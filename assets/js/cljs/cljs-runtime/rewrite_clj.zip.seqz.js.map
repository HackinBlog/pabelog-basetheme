{"version":3,"sources":["rewrite_clj/zip/seqz.cljs"],"sourcesContent":["(ns rewrite-clj.zip.seqz\n  (:refer-clojure :exclude [map get assoc seq? vector? list? map? set?])\n  (:require [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.editz :as e]\n            [rewrite-clj.zip.findz :as f]\n            [rewrite-clj.zip.insert :as i]\n            [rewrite-clj.zip.move :as m]\n            [clojure.zip :as z]))\n\n;; ## Predicates\n\n(defn seq?\n  [zloc]\n  (contains?\n    #{:forms :list :vector :set :map}\n    (base/tag zloc)))\n\n(defn list?\n  [zloc]\n  (= (base/tag zloc) :list))\n\n(defn vector?\n  [zloc]\n  (= (base/tag zloc) :vector))\n\n(defn set?\n  [zloc]\n  (= (base/tag zloc) :set))\n\n(defn map?\n  [zloc]\n  (= (base/tag zloc) :map))\n\n;; ## Map Operations\n\n(defn- map-seq\n  [f zloc]\n  {:pre [(seq? zloc)]}\n  (if-let [n0 (m/down zloc)]\n    (some->> (f n0)\n             (iterate\n               (fn [loc]\n                 (if-let [n (m/right loc)]\n                   (f n))))\n             (take-while identity)\n             (last)\n             (m/up))\n    zloc))\n\n(defn map-vals\n  \"Apply function to all value nodes of the given map node.\"\n  [f zloc]\n  {:pre [(map? zloc)]}\n  (loop [loc (m/down zloc)\n         parent zloc]\n    (if-not (and loc (z/node loc))\n      parent\n      (if-let [v0 (m/right loc)]\n        (if-let [v (f v0)]\n          (recur (m/right v) (m/up v))\n          (recur (m/right v0) parent))\n        parent))))\n\n(defn map-keys\n  \"Apply function to all key nodes of the given map node.\"\n  [f zloc]\n  {:pre [(map? zloc)]}\n  (loop [loc (m/down zloc)\n         parent zloc]\n    (if-not (and loc (z/node loc))\n      parent\n      (if-let [v (f loc)]\n        (recur (m/right (m/right v)) (m/up v))\n        (recur (m/right (m/right loc)) parent)))))\n\n(defn map\n  \"Apply function to all value nodes in the given seq node. Iterates over\n   value nodes of maps but over each element of a seq.\"\n  [f zloc]\n  {:pre [(seq? zloc)]}\n  (if (map? zloc)\n    (map-vals f zloc)\n    (map-seq f zloc)))\n\n;; ## Get/Assoc\n\n(defn get\n  \"If a map is given, get element with the given key; if a seq is given, get nth element.\"\n  [zloc k]\n  {:pre [(or (map? zloc) (and (seq? zloc) (integer? k)))]}\n  (if (map? zloc)\n    (some-> zloc m/down (f/find-value k) m/right)\n    (nth\n      (some->> (m/down zloc)\n               (iterate m/right)\n               (take-while identity))\n      k)))\n\n(defn assoc\n  \"Set map/seq element to the given value.\"\n  [zloc k v]\n  (if-let [vloc (get zloc k)]\n    (-> vloc (e/replace v) m/up)\n    (if (map? zloc)\n      (-> zloc\n          (i/append-child k)\n          (i/append-child v))\n      (throw\n        (js/Error.\n          (str \"index out of bounds: \" k))))))\n"],"mappings":";;;;;;;;AAWA,AAAA,AAAMA,AACH;AADH,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAEC,AAACC,AAASC;;AAEd,AAAA,AAAMC,AACH;AADH,AAEE,AAAA,AAACC,AAAE,AAACH,AAASC;;AAEf,AAAA,AAAMG,AACH;AADH,AAEE,AAAA,AAACD,AAAE,AAACH,AAASC;;AAEf,AAAA,AAAMI,AACH;AADH,AAEE,AAAA,AAACF,AAAE,AAACH,AAASC;;AAEf,AAAA,AAAMK,AACH;AADH,AAEE,AAAA,AAACH,AAAE,AAACH,AAASC;;AAIf,AAAA,AAAOO,AACJ,AAAE;AADL,AAAA,AAES,AAACV,AAAKG;AAFf;AAAA,AAAA,AAAA,AAAAM,AAAA;;;AAGE,AAAA,AAAY,AAACG,AAAOT;AAApB,AAAA,AAAAQ;AAAA,AAAAA,AAAS;AAAT,AACE,AAAA,AAAS,AAACG,AAAAA,AAAAA,AAAEC,AAAAA;AAAZ,AAAA,AAAA,AAAAF,AAAA,AAAA,AACS,AAACG,AACC;AAAK;AAAL,AACE,AAAA,AAAW,AAACC,AAAQC;AAApB,AAAA,AAAAP;AAAA,AAAAA,AAAS;AAAT,AACE,AAACG,AAAAA,AAAAA,AAAEK,AAAAA;;AADL;;;AAFJN;AADT,AAAA,AAAA,AAAAA,AAAA,AAAA,AAKS,AAAAA,AAACO,AAAWC;AALrB,AAAA,AAAA,AAAAR,AAAA,AAAA,AAMS,AAAAA,AAACS;AANV,AAAA,AAAA,AAAAT,AAAA;AAAA;;AAOS,AAAAA,AAACU;;;AACVpB;;;AAEJ;;;AAAA,AAAMqB,AAEH,AAAE;AAFL,AAAA,AAGS,AAAChB,AAAKL;AAHf;AAAA,AAAA,AAAA,AAAAM,AAAA;;;AAIE,AAAO,AAAI,AAACG,AAAOT;AACZ,AAAOA;;AADd,AAEE,AAAA,AAAAsB,AAAQ,AAAA,AAAKP;AAAL,AAAA,AAAAQ;AAAS,AAACC,AAAOT;;AAAjBQ;;;AACNE;;AACA,AAAA,AAAY,AAACX,AAAQC;AAArB,AAAA,AAAAP;AAAA,AAAAA,AAAS;AAAT,AACE,AAAA,AAAW,AAACG,AAAAA,AAAAA,AAAEe,AAAAA;AAAd,AAAA,AAAAlB;AAAA,AAAAA,AAAS;AAAT,AACE,AAAO,AAACM,AAAQa;AAAG,AAACP,AAAKO;;;;;AACzB,AAAO,AAACb,AAAQY;AAAID;;;;;;AACtBA;;;;;;AAER;;;AAAA,AAAMG,AAEH,AAAE;AAFL,AAAA,AAGS,AAACvB,AAAKL;AAHf;AAAA,AAAA,AAAA,AAAAM,AAAA;;;AAIE,AAAO,AAAI,AAACG,AAAOT;AACZ,AAAOA;;AADd,AAEE,AAAA,AAAAsB,AAAQ,AAAA,AAAKP;AAAL,AAAA,AAAAQ;AAAS,AAACC,AAAOT;;AAAjBQ;;;AACNE;;AACA,AAAA,AAAW,AAACd,AAAAA,AAAAA,AAAEI,AAAAA;AAAd,AAAA,AAAAP;AAAA,AAAAA,AAAS;AAAT,AACE,AAAO,AAACM,AAAQ,AAACA,AAAQa;AAAI,AAACP,AAAKO;;;;;AACnC,AAAO,AAACb,AAAQ,AAACA,AAAQC;AAAMU;;;;;;;;;AAEvC;;;;AAAA,AAAMI,AAGH,AAAE;AAHL,AAAA,AAIS,AAAChC,AAAKG;AAJf;AAAA,AAAA,AAAA,AAAAM,AAAA;;;AAKE,AAAI,AAACD,AAAKL;AACR,AAACqB,AAASV,AAAEX;;AACZ,AAACO,AAAQI,AAAEX;;;AAIf;;;AAAA,AAAM8B,AAEH,AAAK;AAFR,AAAA,AAGS,AAAI,AAACzB,AAAKL,AAAM,AAAK,AAACH,AAAKG,AAAM,AAAC+B,AAASC;AAHpD;AAAA,AAAA,AAAA,AAAA1B,AAAA;;;AAIE,AAAI,AAACD,AAAKL;AACR,AAAA,AAAQA;AAAR,AAAA,AAAA,AAAAiC,AAAA,AAAA,AAAA,AAAAA,AAAaxB;AAAb,AAAA,AAAA,AAAAwB,AAAA,AAAA,AAAoB,AAAAA,AAACC,AAAaF;AAAlC,AAAA,AAAA,AAAAC,AAAA;AAAA;;AAAA,AAAAA,AAAqCnB;;;AACrC,AAACqB,AACC,AAAA,AAAS,AAAC1B,AAAOT;AAAjB,AAAA,AAAA,AAAAoC,AAAA,AAAA,AACS,AAAAA,AAACvB,AAAQC;AADlB,AAAA,AAAA,AAAAsB,AAAA;AAAA;;AAES,AAAAA,AAACnB,AAAWC;;AACrBc;;;AAEN;;;AAAA,AAAMK,AAEH,AAAK,AAAE;AAFV,AAGE,AAAA,AAAc,AAACP,AAAI9B,AAAKgC;AAAxB,AAAA,AAAAxB;AAAA,AAAAA,AAAS;AAAT,AACE,AAAI8B,AAAK,AAACC,AAAUZ,AAAGP;;AACvB,AAAI,AAACf,AAAKL;AACJA,AACA,AAACwC,AAAeR,AAChB,AAACQ,AAAeb;;AACpB,AACE,AAAArB,AACE,AAAA,AAA6B0B","names":["rewrite-clj.zip.seqz/seq?","cljs.core/contains?","rewrite-clj.zip.base/tag","zloc","rewrite-clj.zip.seqz/list?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","rewrite-clj.zip.seqz/vector?","rewrite-clj.zip.seqz/set?","rewrite-clj.zip.seqz/map?","js/Error","rewrite-clj.zip.seqz/map-seq","temp__5455__auto__","rewrite-clj.zip.move/down","G__21285","f","n0","cljs.core/iterate","rewrite-clj.zip.move/right","loc","n","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core/last","rewrite-clj.zip.move/up","rewrite-clj.zip.seqz/map-vals","cljs.core/not","and__4036__auto__","clojure.zip/node","parent","v0","v","rewrite-clj.zip.seqz/map-keys","rewrite-clj.zip.seqz/map","rewrite-clj.zip.seqz/get","cljs.core/integer?","k","G__21286","rewrite_clj.zip.findz.find_value.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__21287","rewrite-clj.zip.seqz/assoc","vloc","rewrite-clj.zip.editz/replace","rewrite-clj.zip.insert/append-child"]}