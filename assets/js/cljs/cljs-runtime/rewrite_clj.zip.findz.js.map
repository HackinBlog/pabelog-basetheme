{"version":3,"sources":["rewrite_clj/zip/findz.cljs"],"sourcesContent":["(ns rewrite-clj.zip.findz\n  (:refer-clojure :exclude [find])\n  (:require [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.move :as m]\n            [rewrite-clj.node :as node]\n            [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n;; ## Helpers\n\n(defn- tag-predicate\n  [t & [additional]]\n  (if additional\n    (fn [node]\n      (and (= (base/tag node) t)\n           (additional node)))\n    #(= (base/tag %) t)))\n\n\n(defn in-range? [{:keys [row col end-row end-col]} {r :row c :col}]\n  (and (>= r row)\n       (<= r end-row)\n       (if (= r row) (>= c col) true)\n       (if (= r end-row) (<= c end-col) true)))\n\n\n;; ## Find Operations\n\n(defn find\n  \"Find node satisfying the given predicate by repeatedly\n   applying the given movement function to the initial zipper\n   location.\"\n  ([zloc p?]\n   (find zloc m/right p?))\n  ([zloc f p?]\n   (->> zloc\n        (iterate f)\n        (take-while identity)\n        (take-while (complement m/end?))\n        (drop-while (complement p?))\n        (first))))\n\n\n\n(defn find-last-by-pos\n  \"Find last node (if more than one node) that is in range of pos and\n  satisfying the given predicate depth first from initial zipper\n  location.\"\n  ([zloc pos] (find-last-by-pos zloc pos (constantly true)))\n  ([zloc pos p?]\n   (->> zloc\n        (iterate z/next)\n        (take-while identity)\n        (take-while (complement m/end?))\n        (filter #(and (p? %)\n                      (in-range? (-> % z/node meta) pos)))\n        last)))\n\n\n(defn find-depth-first\n  \"Find node satisfying the given predicate by traversing\n   the zipper in a depth-first way.\"\n  [zloc p?]\n  (find zloc m/next p?))\n\n\n(defn find-next\n  \"Find node other than the current zipper location matching\n   the given predicate by applying the given movement function\n   to the initial zipper location.\"\n  ([zloc p?]\n   (find-next zloc m/right p?))\n  ([zloc f p?]\n   (some-> zloc f (find f p?))))\n\n(defn find-next-depth-first\n  \"Find node other than the current zipper location matching\n   the given predicate by traversing the zipper in a\n   depth-first way.\"\n  [zloc p?]\n  (find-next zloc m/next p?))\n\n(defn find-tag\n  \"Find node with the given tag by repeatedly applying the given\n   movement function to the initial zipper location.\"\n  ([zloc t]\n   (find-tag zloc m/right t))\n  ([zloc f t]\n   (find zloc f #(= (base/tag %) t))))\n\n(defn find-next-tag\n  \"Find node other than the current zipper location with the\n   given tag by repeatedly applying the given movement function to\n   the initial zipper location.\"\n  ([zloc t]\n   (find-next-tag zloc m/right t))\n  ([zloc f t]\n   (->> (tag-predicate t)\n        (find-next zloc f))))\n\n\n(defn find-tag-by-pos\n  \"Find node with the given tag and pos depth-first from initial zipper location.\"\n  ([zloc pos t]\n   (find-last-by-pos zloc pos #(= (base/tag %) t))))\n\n\n\n(defn find-token\n  \"Find token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc p?]\n   (find-token zloc m/right p?))\n  ([zloc f p?]\n   (->> (tag-predicate :token p?)\n        (find zloc f))))\n\n(defn find-next-token\n  \"Find next token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc p?]\n   (find-next-token zloc m/right p?))\n  ([zloc f p?]\n   (find-token (f zloc) f p?)))\n\n(defn find-value\n  \"Find token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc v]\n   (find-value zloc m/right v))\n  ([zloc f v]\n   (let [p? (if (set? v)\n              (comp v base/sexpr)\n              #(= (base/sexpr %) v))]\n     (find-token zloc f p?))))\n\n(defn find-next-value\n  \"Find next token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc v]\n   (find-next-value zloc m/right v))\n  ([zloc f v]\n   (find-value (f zloc) f v)))\n"],"mappings":"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","names":["i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","rewrite-clj.zip.findz/tag-predicate","argseq__4648__auto__","p__21188","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__21189","cljs.core/first","seq21185","cljs.core/next","self__4628__auto__","G__21186","additional","and__4036__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","rewrite-clj.zip.base/tag","node","t","p1__21184#","p__21192","map__21194","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","p__21193","map__21195","rewrite-clj.zip.findz/in-range?","r","row","end-row","c","col","end-col","G__21203","rewrite-clj.zip.findz/find","js/Error","rewrite_clj.zip.findz.find.cljs$core$IFn$_invoke$arity$3","zloc","rewrite-clj.zip.move/right","p?","cljs.core/iterate","f","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core/complement","rewrite-clj.zip.move/end?","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","G__21210","rewrite-clj.zip.findz/find-last-by-pos","rewrite_clj.zip.findz.find_last_by_pos.cljs$core$IFn$_invoke$arity$3","pos","cljs.core/constantly","clojure.zip/next","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p1__21208#","clojure.zip/node","cljs.core/meta","cljs.core/last","rewrite-clj.zip.findz/find-depth-first","rewrite-clj.zip.move/next","G__21212","rewrite-clj.zip.findz/find-next","rewrite_clj.zip.findz.find_next.cljs$core$IFn$_invoke$arity$3","G__21213","rewrite-clj.zip.findz/find-next-depth-first","G__21222","rewrite-clj.zip.findz/find-tag","rewrite_clj.zip.findz.find_tag.cljs$core$IFn$_invoke$arity$3","p1__21214#","G__21235","rewrite-clj.zip.findz/find-next-tag","rewrite_clj.zip.findz.find_next_tag.cljs$core$IFn$_invoke$arity$3","rewrite-clj.zip.findz/find-tag-by-pos","p1__21237#","G__21241","rewrite-clj.zip.findz/find-token","rewrite_clj.zip.findz.find_token.cljs$core$IFn$_invoke$arity$3","rewrite_clj.zip.findz.tag_predicate.cljs$core$IFn$_invoke$arity$variadic","G__21243","rewrite-clj.zip.findz/find-next-token","rewrite_clj.zip.findz.find_next_token.cljs$core$IFn$_invoke$arity$3","G__21246","rewrite-clj.zip.findz/find-value","rewrite_clj.zip.findz.find_value.cljs$core$IFn$_invoke$arity$3","v","cljs.core/set?","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","rewrite-clj.zip.base/sexpr","p1__21244#","G__21248","rewrite-clj.zip.findz/find-next-value","rewrite_clj.zip.findz.find_next_value.cljs$core$IFn$_invoke$arity$3"]}