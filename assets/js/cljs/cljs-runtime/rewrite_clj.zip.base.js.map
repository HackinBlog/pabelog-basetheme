{"version":3,"sources":["rewrite_clj/zip/base.cljs"],"sourcesContent":["(ns rewrite-clj.zip.base\n  (:refer-clojure :exclude [print])\n  (:require [rewrite-clj.node :as node]\n            [rewrite-clj.parser :as p]\n            [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n;; ## Zipper\n\n(defn edn*\n  \"Create zipper over the given Clojure/EDN node.\"\n  [node]\n  (z/zipper\n    node/inner?\n    (comp seq node/children)\n    node/replace-children\n    node))\n\n(defn edn\n  \"Create zipper over the given Clojure/EDN node and move\n   to the first non-whitespace/non-comment child.\"\n  [node]\n  (if (= (node/tag node) :forms)\n    (let [top (edn* node)]\n      (or (-> top z/down ws/skip-whitespace)\n          top))\n    (recur (node/forms-node [node]))))\n\n;; ## Inspection\n\n(defn tag\n  \"Get tag of node at the current zipper location.\"\n  [zloc]\n  (some-> zloc z/node node/tag))\n\n(defn sexpr\n  \"Get sexpr represented by the given node.\"\n  [zloc]\n  (some-> zloc z/node node/sexpr))\n\n(defn child-sexprs\n  \"Get children as s-expressions.\"\n  [zloc]\n  (some-> zloc z/node node/child-sexprs))\n\n(defn length\n  \"Get length of printable string for the given zipper location.\"\n  [zloc]\n  (or (some-> zloc z/node node/length) 0))\n\n\n;; ## Read\n\n(defn of-string\n  \"Create zipper from String.\"\n  [s]\n  (some-> s p/parse-string-all edn))\n\n\n;; ## Write\n\n(defn string\n  \"Create string representing the current zipper location.\"\n  [zloc]\n  (some-> zloc z/node node/string))\n\n(defn root-string\n  \"Create string representing the zipped-up zipper.\"\n  [zloc]\n  (some-> zloc z/root node/string))\n\n;; (defn- print!\n;;   [s writer]\n;;   (if writer\n;;     (.write ^java.io.Writer writer s)\n;;     (recur s *out*)))\n\n;; (defn print\n;;   \"Print current zipper location.\"\n;;   [zloc & [writer]]\n;;   (some-> zloc\n;;           string\n;;           (print! writer)))\n\n;; (defn print-root\n;;   \"Zip up and print root node.\"\n;;   [zloc & [writer]]\n;;   (some-> zloc\n;;           root-string\n;;           (print! writer)))\n"],"mappings":";;;;;;AASA;;;AAAA,AAAMA,AAEH;AAFH,AAGE,AAACC,AACCC,AACA,AAACC,AAAKC,AAAIC,AACVC,AACAC;;AAEJ;;;;AAAA,AAAMC,AAGH;;AAHH,AAIE,AAAI,AAAA,AAACC,AAAE,AAACC,AAAAA,AAAAA,AAASH,AAAAA;AACf,AAAM,AAAI,AAACP,AAAKO;AAAhB,AACE,AAAA,AAAI,AAAA,AAAIK,AAAIC,AAAOC;AAAnB,AAAA,AAAAH;AAAAA;;AACIC;;;AACN,AAAO,AAAA,AAAA,AAAkBL;AAAlB,AAAA,AAAAQ,AAAAA,AAACC,AAAAA,AAAAA;;;;;;;;AAIZ;;;AAAA,AAAMC,AAEH;AAFH,AAGE,AAAA,AAAQE;AAAR,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAAA,AAAaE;AAAb,AAAA,AAAA,AAAAF,AAAA;AAAA;;AAAA,AAAAA,AAAAA,AAAoBR,AAAAA,AAAAA;;;AAEtB;;;AAAA,AAAMW,AAEH;AAFH,AAGE,AAAA,AAAQF;AAAR,AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAAA,AAAaF;AAAb,AAAA,AAAA,AAAAE,AAAA;AAAA;;AAAA,AAAAA,AAAAA,AAAoBC,AAAAA,AAAAA;;;AAEtB;;;AAAA,AAAMC,AAEH;AAFH,AAGE,AAAA,AAAQL;AAAR,AAAA,AAAA,AAAAM,AAAA,AAAA,AAAA,AAAAA,AAAaL;AAAb,AAAA,AAAA,AAAAK,AAAA;AAAA;;AAAA,AAAAA,AAAAA,AAAoBC,AAAAA,AAAAA;;;AAEtB;;;AAAA,AAAMC,AAEH;AAFH,AAGE,AAAA,AAAI,AAAA,AAAQR;AAAR,AAAA,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAAA,AAAaR;AAAb,AAAA,AAAA,AAAAQ,AAAA;AAAA;;AAAA,AAAAA,AAAAA,AAAoBC,AAAAA,AAAAA;;;AAAxB,AAAA,AAAAlB;AAAAA;;AAAA;;;AAKF;;;AAAA,AAAMmB,AAEH;AAFH,AAGE,AAAA,AAAQE;AAAR,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAAA,AAAUE;AAAV,AAAA,AAAA,AAAAF,AAAA;AAAA;;AAAA,AAAAA,AAA6BvB;;;AAK/B;;;AAAA,AAAM0B,AAEH;AAFH,AAGE,AAAA,AAAQf;AAAR,AAAA,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAAA,AAAaf;AAAb,AAAA,AAAA,AAAAe,AAAA;AAAA;;AAAA,AAAAA,AAAAA,AAAoBC,AAAAA,AAAAA;;;AAEtB;;;AAAA,AAAMC,AAEH;AAFH,AAGE,AAAA,AAAQlB;AAAR,AAAA,AAAA,AAAAmB,AAAA,AAAA,AAAA,AAAAA,AAAaC;AAAb,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAAA,AAAAA,AAAAA,AAAoBF,AAAAA,AAAAA","names":["rewrite-clj.zip.base/edn*","clojure.zip/zipper","rewrite-clj.node/inner?","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/seq","rewrite-clj.node/children","rewrite-clj.node/replace-children","node","rewrite-clj.zip.base/edn","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node/tag","or__4047__auto__","top","clojure.zip/down","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1","G__21158","rewrite-clj.node/forms-node","rewrite-clj.zip.base/tag","G__21159","zloc","clojure.zip/node","rewrite-clj.zip.base/sexpr","G__21160","rewrite-clj.node/sexpr","rewrite-clj.zip.base/child-sexprs","G__21161","rewrite-clj.node/child-sexprs","rewrite-clj.zip.base/length","G__21174","rewrite-clj.node/length","rewrite-clj.zip.base/of-string","G__21175","s","rewrite-clj.parser/parse-string-all","rewrite-clj.zip.base/string","G__21176","rewrite-clj.node/string","rewrite-clj.zip.base/root-string","G__21179","clojure.zip/root"]}