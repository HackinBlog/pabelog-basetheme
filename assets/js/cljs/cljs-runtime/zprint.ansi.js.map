{"version":3,"sources":["zprint/ansi.cljc"],"sourcesContent":["(ns ^:no-doc zprint.ansi\n  (:require clojure.string))\n\n;;\n;; # Do ANSI Escape code processing\n;;\n\n(def ansi-codes\n  {:off 0,\n   :bold 1,\n   :underline 3,\n   :blink 5,\n   :reverse 7,\n   :hidden 8,\n   :strike 9,\n   :black 30,\n   :none 30,\n   :red 31,\n   :green 32,\n   :yellow 33,\n   :blue 34,\n   :magenta 35,\n   :purple 35,\n   :cyan 36,\n   :white 37,\n   :xsf 38,\n   :back-red 41,\n   :back-green 42,\n   :back-yellow 43,\n   :back-blue 44,\n   :back-magenta 45,\n   :back-purple 45,\n   :back-cyan 66})\n\n(defn color-str\n  \"Wraps a string with ANSI escape codes.\"\n  [s & ansi]\n  (let [ansi-str (apply str (interpose \\; (map ansi-codes ansi)))]\n    (str \\u001b \\[ ansi-str \\m s \\u001b \\[ \\0 \\m)))"],"mappings":";;;AAOA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AA2BL,AAAA;;;AAAA,AAAA,AAAMK;AAAN,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA,AAAAJ,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAF;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAD,AAAA,AAEG,AAAI;AAFP,AAGE,AAAM,AAAS,AAACO,AAAMC,AAAI,AAAA,AAACC,AAAa,AAACC,AAAIf,AAAWgB;AAAxD,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAeC,AAAYC;;;AAJ/B,AAAA,AAAAb,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAAC,AAAAH;;;AAAA","names":["zprint.ansi/ansi-codes","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","zprint.ansi/color-str","argseq__4648__auto__","cljs.core/first","seq19584","cljs.core/next","self__4628__auto__","G__19585","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","ansi","ansi-str","s"]}