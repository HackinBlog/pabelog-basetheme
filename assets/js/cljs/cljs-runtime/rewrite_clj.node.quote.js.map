{"version":3,"sources":["rewrite_clj/node/quote.cljs"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.quote\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Node\n\n(defrecord QuoteNode [tag prefix sym children]\n  node/Node\n  (tag [_] tag)\n  (printable-only? [_] false)\n  (sexpr [_]\n    (list sym (first (node/sexprs children))))\n  (length [_]\n    (+ (count prefix) (node/sum-lengths children)))\n  (string [_]\n    (str prefix (node/concat-strings children)))\n\n  node/InnerNode\n  (inner? [_] true)\n  (children [_] children)\n  (replace-children [this children']\n    (node/assert-single-sexpr children')\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;(node/make-printable! QuoteNode)\n\n;; ## Constructors\n\n(defn- ->node\n  [t prefix sym children]\n  (node/assert-single-sexpr children)\n  (->QuoteNode t prefix sym children))\n\n(defn quote-node\n  \"Create node representing a quoted form.\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :quote \"'\" 'quote\n      children)\n    (recur [children])))\n\n(defn syntax-quote-node\n  \"Create node representing a syntax-quoted form.\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :syntax-quote \"`\" 'quote\n      children)\n    (recur [children])))\n\n(defn unquote-node\n  \"Create node representing an unquoted form. (`~...`)\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :unquote \"~\" 'unquote\n      children)\n    (recur [children])))\n\n(defn unquote-splicing-node\n  \"Create node representing an unquote-spliced form. (`~@...`)\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :unquote-splicing \"~@\" 'unquote-splicing\n      children)\n    (recur [children])))\n"],"mappings":"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","names":["this__4301__auto__","k__4302__auto__","k19822","G__19837","cljs.core/Keyword","tag","prefix","sym","children","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","else__4304__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__19841","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__19843","f__4321__auto__","ret__4323__auto__","k__4324__auto__","v__4325__auto__","init__4322__auto__","this__4320__auto__","cljs.core/pr-sequential-writer","writer__4316__auto__","opts__4317__auto__","keyval__4319__auto__","pr-pair__4318__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","cljs.core/RecordIter","G__19821","cljs.core/-iterator","cljs.core/nil-iter","__meta","__hash","cljs.core/count","h__4159__auto__","cljs.core/hash-unordered-coll","coll__4298__auto__","fexpr__19887","this__4297__auto__","other19824","this19823","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core/contains?","k__4311__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","this__4310__auto__","cljs.core/not-empty","cljs.core/keyword-identical?","k__4309__auto__","expr__19898","pred__19897","G__19900","G__19901","G__19902","G__19903","G__19904","G__19905","G__19906","G__19907","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/seq","cljs.core/MapEntry","cljs.core/vector?","entry__4307__auto__","this__4306__auto__","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","rewrite-clj.node.quote/QuoteNode","cljs.core/List","cljs.core/-write","writer__4345__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__19827","cljs.core/record?","G__19911","extmap__4340__auto__","rewrite-clj.node.quote/->QuoteNode","rewrite-clj.node.quote/map->QuoteNode","cljs.core/first","rewrite-clj.node.protocols/sexprs","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","rewrite-clj.node.protocols/assert-single-sexpr","children'","this","rewrite-clj.node.quote/->node","t","rewrite-clj.node.quote/quote-node","cljs.core/sequential?","rewrite-clj.node.quote/syntax-quote-node","rewrite-clj.node.quote/unquote-node","rewrite-clj.node.quote/unquote-splicing-node"]}