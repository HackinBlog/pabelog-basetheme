{"version":3,"sources":["rewrite_clj/parser/core.cljs"],"sourcesContent":["(ns rewrite-clj.parser.core\n  (:require [rewrite-clj.node :as node]\n            [rewrite-clj.reader :as reader]\n            [rewrite-clj.parser.keyword :refer [parse-keyword]]\n            [rewrite-clj.parser.string :refer [parse-string parse-regex]]\n            [rewrite-clj.parser.token :refer [parse-token]]\n            [rewrite-clj.parser.whitespace :refer [parse-whitespace]]\n            [cljs.tools.reader.reader-types :refer [peek-char]]))\n\n;; ## Base Parser\n\n(def ^:dynamic ^:private *delimiter*\n  nil)\n\n\n(declare parse-next)\n\n\n(defn- parse-delim\n  [^not-native reader delimiter]\n  (reader/ignore reader)\n  (->> #(binding [*delimiter* delimiter]\n          (parse-next %))\n       (reader/read-repeatedly reader)))\n\n(defn- parse-printables\n  [^not-native reader node-tag n & [ignore?]]\n  (when ignore?\n    (reader/ignore reader))\n  (reader/read-n\n    reader\n    node-tag\n    parse-next\n    (complement node/printable-only?)\n    n))\n\n\n(defn- parse-meta\n  [^not-native reader]\n  (reader/ignore reader)\n  (node/meta-node (parse-printables reader :meta 2)))\n\n\n(defn- parse-eof\n  [^not-native reader]\n  (when *delimiter*\n    (reader/throw-reader reader \"Unexpected EOF.\")))\n\n;; ### Seqs\n\n(defn- parse-list\n  [^not-native reader]\n  (node/list-node (parse-delim reader \\))))\n\n(defn- parse-vector\n  [^not-native reader]\n  (node/vector-node (parse-delim reader \\])))\n\n(defn- parse-map\n  [^not-native reader]\n  (node/map-node (parse-delim reader \\})))\n\n\n;; ### Reader Specialities\n\n\n(defn- parse-conditional [reader]\n  ;; we need to examine the next character, so consume one (known \\?)\n  (reader/next reader)\n  ;; we will always have a reader-macro-node as the result\n  (node/reader-macro-node\n    (let [read1 (fn [] (parse-printables reader :reader-macro 1))]\n      (cons (case (reader/peek reader)\n              ;; the easy case, just emit a token\n              \\( (node/token-node (symbol \"?\"))\n\n              ;; the harder case, match \\@, consume it and emit the token\n              \\@ (do (reader/next reader)\n                   (node/token-node (symbol \"?@\")))\n\n              ;; otherwise no idea what we're reading but its \\? prefixed\n              (do (reader/unread reader \\?)\n                (first (read1))))\n            (read1)))))\n\n\n\n(defn- parse-sharp\n  [^not-native reader]\n  (reader/ignore reader)\n  (case (peek-char reader)\n    nil (reader/throw-reader reader \"Unexpected EOF.\")\n    \\{ (node/set-node (parse-delim reader \\}))\n    \\( (node/fn-node (parse-delim reader \\)))\n    \\\" (parse-regex reader)\n    \\^ (node/meta-node (parse-printables reader :meta 2 true))\n    \\' (node/var-node (parse-printables reader :var 1 true))\n    \\= (node/eval-node (parse-printables reader :eval 1 true))\n    \\_ (node/uneval-node (parse-printables reader :uneval 1 true))\n    \\? (parse-conditional reader)\n    (node/reader-macro-node (parse-printables reader :reader-macro 2))))\n\n\n\n\n(defn- parse-unmatched\n  [^not-native reader]\n  (reader/throw-reader\n    reader\n    \"Unmatched delimiter: %s\"\n    (peek-char reader)))\n\n\n(defn- parse-deref\n  [^not-native reader]\n  (node/deref-node (parse-printables reader :deref 1 true)))\n\n;; ## Quotes\n\n(defn- parse-quote\n  [^not-native reader]\n  (node/quote-node (parse-printables reader :quote 1 true)))\n\n(defn- parse-syntax-quote\n  [^not-native reader]\n  (node/syntax-quote-node (parse-printables reader :syntax-quote 1 true)))\n\n(defn- parse-unquote\n  [^not-native reader]\n  (reader/ignore reader)\n  (let [c (peek-char reader)]\n    (if (= c \\@)\n      (node/unquote-splicing-node\n        (parse-printables reader :unquote 1 true))\n      (node/unquote-node\n        (parse-printables reader :unquote 1)))))\n\n(defn- parse-comment\n  [^not-native reader]\n  (reader/ignore reader)\n  (node/comment-node (reader/read-include-linebreak reader)))\n\n\n\n(defn- dispatch\n  [c]\n  (cond (nil? c)                        parse-eof\n        (identical? c *delimiter*)      reader/ignore\n        (reader/whitespace? c)          parse-whitespace\n        (identical? c \\^)               parse-meta\n        (identical? c \\#)               parse-sharp\n        (identical? c \\()               parse-list\n        (identical? c \\[)               parse-vector\n        (identical? c \\{)               parse-map\n        (identical? c \\})               parse-unmatched\n        (identical? c \\])               parse-unmatched\n        (identical? c \\))               parse-unmatched\n        (identical? c \\~)               parse-unquote\n        (identical? c \\')               parse-quote\n        (identical? c \\`)               parse-syntax-quote\n        (identical? c \\;)               parse-comment\n        (identical? c \\@)               parse-deref\n        (identical? c \\\")               parse-string\n        (identical? c \\:)               parse-keyword\n        :else                           parse-token))\n\n\n(defn parse-next\n  [^not-native rdr]\n  (reader/read-with-meta rdr (dispatch (peek-char rdr))))\n"],"mappings":"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","names":["rewrite-clj.parser.core/*delimiter*","rewrite-clj.parser.core/parse-delim","rewrite-clj.reader/ignore","reader","*delimiter*-temp-val__21013","*delimiter*-orig-val__21012","delimiter","p1__21011#","rewrite-clj.parser.core/parse-next","rewrite-clj.reader/read-repeatedly","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","rewrite-clj.parser.core/parse-printables","argseq__4648__auto__","p__21018","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__21019","cljs.core/first","seq21014","cljs.core/next","self__4628__auto__","G__21015","G__21016","G__21017","ignore?","rewrite-clj.reader/read-n","node-tag","cljs.core/complement","rewrite-clj.node/printable-only?","n","rewrite-clj.parser.core/parse-meta","G__21022","rewrite-clj.node/meta-node","rewrite-clj.parser.core/parse-eof","rewrite-clj.reader/throw-reader","rewrite-clj.parser.core/parse-list","G__21023","rewrite-clj.node/list-node","rewrite-clj.parser.core/parse-vector","G__21027","rewrite-clj.node/vector-node","rewrite-clj.parser.core/parse-map","G__21029","rewrite-clj.node/map-node","rewrite-clj.parser.core/parse-conditional","rewrite-clj.reader/next","G__21032","rewrite-clj.node/reader-macro-node","cljs.core/cons","G__21033","rewrite-clj.reader/peek","G__21034","rewrite-clj.node/token-node","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","G__21035","G__21036","G__21037","rewrite-clj.reader/unread","read1","rewrite-clj.parser.core/parse-sharp","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__21041","G__21042","rewrite-clj.node/set-node","G__21043","rewrite-clj.node/fn-node","rewrite-clj.parser.string/parse-regex","G__21044","rewrite_clj.parser.core.parse_printables.cljs$core$IFn$_invoke$arity$variadic","G__21045","rewrite-clj.node/var-node","G__21046","rewrite-clj.node/eval-node","G__21047","rewrite-clj.node/uneval-node","G__21048","rewrite-clj.parser.core/parse-unmatched","rewrite_clj.reader.throw_reader.cljs$core$IFn$_invoke$arity$variadic","rewrite-clj.parser.core/parse-deref","G__21049","rewrite-clj.node/deref-node","rewrite-clj.parser.core/parse-quote","G__21050","rewrite-clj.node/quote-node","rewrite-clj.parser.core/parse-syntax-quote","G__21051","rewrite-clj.node/syntax-quote-node","rewrite-clj.parser.core/parse-unquote","c","G__21052","rewrite-clj.node/unquote-splicing-node","G__21053","rewrite-clj.node/unquote-node","rewrite-clj.parser.core/parse-comment","G__21054","rewrite-clj.node/comment-node","rewrite-clj.reader/read-include-linebreak","rewrite-clj.parser.core/dispatch","rewrite-clj.reader/whitespace?","rewrite-clj.parser.whitespace/parse-whitespace","rewrite-clj.parser.string/parse-string","rewrite-clj.parser.keyword/parse-keyword","rewrite-clj.parser.token/parse-token","rewrite-clj.reader/read-with-meta","rdr"]}