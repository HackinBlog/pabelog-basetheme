{"version":3,"sources":["rewrite_clj/parser/token.cljs"],"sourcesContent":["(ns rewrite-clj.parser.token\n  (:require [rewrite-clj.node :as node]\n            [rewrite-clj.reader :as r]\n            [goog.string :as gstring]))\n\n\n(defn- join-2 [a b]\n  (-> a gstring/StringBuffer. (.append b) .toString))\n\n(defn- ^boolean allowed-default? [c]\n  false)\n\n(defn- ^boolean allowed-suffix? [c]\n  (or (identical? c \\')\n      (identical? c \\:)))\n\n\n\n(defn- read-to-boundary\n  [^not-native reader allowed?]\n  (r/read-until\n   reader\n   #(and (not (allowed? %))\n         (r/whitespace-or-boundary? %))))\n\n\n\n\n(defn- read-to-char-boundary\n  [^not-native reader]\n  (let [c (r/read-char reader)]\n    (join-2 c (if (not (identical? c \\\\))\n                (read-to-boundary reader allowed-default?)\n                \"\"))))\n\n\n\n(defn- symbol-node\n  \"Symbols allow for certain boundary characters that have\n   to be handled explicitly.\"\n  [^not-native reader value value-string]\n  (let [suffix (read-to-boundary\n                 reader\n                 allowed-suffix?)]\n    (if (empty? suffix)\n      (node/token-node value value-string)\n      (let [s (join-2 value-string suffix)]\n        (node/token-node\n          (r/read-string s)\n          s)))))\n\n\n\n\n(defn parse-token\n  \"Parse a single token.\"\n  [^not-native reader]\n  (let [first-char (r/read-char reader)\n        s (join-2 first-char (if (identical? first-char \\\\)\n                         (read-to-char-boundary reader)\n                         (read-to-boundary reader allowed-default?)))\n        v (r/read-string s)]\n    (if (symbol? v)\n      (symbol-node reader v s)\n      (node/token-node v s))))\n"],"mappings":";;;;;AAMA,AAAA,AAAOA,AAAQ,AAAE;AAAjB,AACE,AAAIC,AAAwB,AAAA,AAAAC,AAASC;;AAEvC,AAAA,AAAgBC,AAAkB;AAAlC,AAAA;;AAGA,AAAA,AAAgBC,AAAiB;AAAjC,AACE,AAAI,AAAA,AAAYC,AACZ,AAAA,AAAYA;;AAIlB,AAAA,AAAOC,AACQ,AAAO;AADtB,AAEE,AAAA,AAAA,AAACC,AACAC;AADD,AAEE,AAAK,AAACC,AAAI,AAAAC,AAAAA,AAACC,AAAAA,AAAAA,AACN,AAAAD,AAACE;;;AAKV,AAAA,AAAOC,AACQ;AADf,AAEE,AAAM,AAAE,AAACC,AAAAA,AAAAA,AAAYN,AAAAA;AAArB,AACE,AAACT,AAAOM,AAAE,AAAA,AAAI,AAAK,AAAA,AAAYA,AACnB,AAACC,AAAiBE,AAAOL;;AAKzC;;;;AAAA,AAAOY,AAGQ,AAAO,AAAM;AAH5B,AAIE,AAAM,AAAO,AAACT,AACCE,AACAJ;AAFf,AAGE,AAAI,AAACY,AAAOC;AACV,AAACC,AAAAA,AAAAA,AAAgBC,AAAAA,AAAMC,AAAAA;;AACvB,AAAM,AAAE,AAACrB,AAAOqB,AAAaH;AAA7B,AACE,AAAA,AACE,AAACM,AAAAA,AAAAA,AAAcC,AAAAA;AADjB,AAEEA;AAFF,AAAA,AAAAH,AAAAC,AAAAD,AAAAC,AAACJ,AAAAA,AAAAA;;;AAOT;;;AAAA,AAAMO,AAES;AAFf,AAGE,AAAM,AAAW,AAACX,AAAAA,AAAAA,AAAYN,AAAAA;AACxB,AAAE,AAACT,AAAO2B,AAAW,AAAI,AAAA,AAAYA,AACpB,AAACb,AAAsBL,AACvB,AAACF,AAAiBE,AAAOL;AAC1C,AAAE,AAACoB,AAAAA,AAAAA,AAAcC,AAAAA;AAJvB,AAKE,AAAI,AAAAG,AAASC;AACX,AAACb,AAAYP,AAAOoB,AAAEJ;;AACtB,AAACN,AAAAA,AAAAA,AAAgBU,AAAAA,AAAEJ,AAAAA","names":["rewrite-clj.parser.token/join-2","a","goog.string/StringBuffer","b","rewrite-clj.parser.token/allowed-default?","rewrite-clj.parser.token/allowed-suffix?","c","rewrite-clj.parser.token/read-to-boundary","rewrite-clj.reader/read-until","reader","cljs.core/not","p1__20999#","allowed?","rewrite-clj.reader/whitespace-or-boundary?","rewrite-clj.parser.token/read-to-char-boundary","rewrite-clj.reader/read-char","rewrite-clj.parser.token/symbol-node","cljs.core/empty?","suffix","rewrite-clj.node/token-node","value","value-string","G__21004","G__21005","rewrite-clj.reader/read-string","s","rewrite-clj.parser.token/parse-token","first-char","cljs.core/Symbol","v"]}