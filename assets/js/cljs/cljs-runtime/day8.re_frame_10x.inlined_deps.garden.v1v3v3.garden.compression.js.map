{"version":3,"sources":["day8/re_frame_10x/inlined_deps/garden/v1v3v3/garden/compression.cljc"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.compression\n  \"Stylesheet compression utilities.\"\n  #?(:clj\n     (:import (java.io StringReader StringWriter)\n               (com.yahoo.platform.yui.compressor CssCompressor))))\n\n;; ---------------------------------------------------------------------\n;; Clojure\n\n;; Clojure stylesheet compression leverages the YUI Compressor as it\n;; provides a performant and excellent solution to CSS compression.\n\n#?(:clj\n   (defn compress-stylesheet\n     \"Compress a stylesheet with the YUI CSSCompressor. Set\n  line-break-position to -1 for no line breaks, 0 for a line break\n  after each rule, and n > 0 for a line break after at most n\n  columns. Defaults to no -1\"\n     ([stylesheet]\n      (compress-stylesheet stylesheet -1))\n     ([^String stylesheet line-break-position]\n      (with-open [reader (StringReader. stylesheet)\n                  writer (StringWriter.)]\n        (doto (CssCompressor. reader)\n          (.compress writer line-break-position))\n        (str writer)))))\n\n;; ---------------------------------------------------------------------\n;; ClojureScript\n\n;; ClojureScript stylesheet compression uses a simple tokenizer and\n;; loop/recur to construct a new string of minified CSS.\n\n#?(:cljs\n   (defn- token-fn\n     \"Return a function which when given a string will return a map\n  containing the chunk of text matched by re, it's size, and tag.\"\n     [[tag re]]\n     (fn [s]\n       (when-let [chunk (re-find re s)]\n         {:tag tag\n          :chunk chunk\n          :size (count chunk)}))))\n\n#?(:cljs\n   (defn- tokenizer\n     \"Given an arbitrary number of [tag regex] pairs, return a function\n  which when given a string s will return the first matching token of s.\n  Token precedence is determined by the order of the pairs. The first\n  and last pairs have the highest and lowest precedence respectively.\"\n     [& tags+regexes]\n     (let [fs (map token-fn tags+regexes)]\n       (fn [s]\n         (some #(% s) fs)))))\n\n#?(:cljs\n   (def\n     ^{:private true\n       :doc \"Tokenizer used during stylesheet compression.\"}\n     stylesheet-tokenizer\n     (tokenizer\n      ;; String literals\n      [:string #\"^\\\"(?:\\\\.|[^\\\"])*\\\"\"]\n      ;; Delimiters\n      [:r-brace #\"^\\s*\\{\\s*\"]\n      [:l-brace #\"^;?\\s*}\"]\n      [:r-paren #\"^\\s*\\(\\s*\"]\n      [:l-paren #\"^\\s*\\)\"]\n      [:comma #\"^,\\s*\"]\n      [:colon #\"^:\\s*\"]\n      [:semicolon #\"^;\"]\n      ;; White space\n      [:space+ #\"^ +\"]\n      [:white-space+ #\"^\\s+\"]\n      ;; Everything else\n      [:any #\"^.\"])))\n\n#?(:cljs\n   (defn compress-stylesheet\n     \"Compress a string of CSS using a basic compressor.\"\n     [stylesheet]\n     (loop [s1 stylesheet s2 \"\"]\n       (if-let [{:keys [tag chunk size]} (stylesheet-tokenizer s1)]\n         (recur (subs s1 size)\n                (str s2 (case tag\n                          :string chunk\n                          :r-brace \"{\"\n                          :l-brace \"}\"\n                          :r-paren \"(\"\n                          :l-paren \")\"\n                          :comma \",\"\n                          :semi-comma \";\"\n                          :colon \":\"\n                          :space+ \" \"\n                          :white-space+ \"\"\n                          chunk)))\n         s2))))\n"],"mappings":";;AAkCG;;;;AAAA,AAAA,AAAOG;AAAP,AAAA,AAAA,AAAAH;AAAA,AAAAC,AAAAC,AAAA,AAAA,AAGI;AAHJ,AAAAD,AAAAC,AAAA,AAAA,AAGQ;AAHR,AAIE;AAAK;AAAL,AACE,AAAA,AAAiB,AAACG,AAAQC,AAAGC;AAA7B,AAAA,AAAAH;AAAA,AAAA,AAAAA,AAAW;AAAX,AAAA,AAAA,AAAA,AAAA,AACQI,AACEC,AACD,AAACC,AAAMD;;AAHhB;;;;;AAMJ,AAAA;;;;;;AAAA,AAAA,AAAOM;AAAP,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA,AAAAJ,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAF;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAAC;;;AAAA,AAAA,AAAA,AAAAD,AAAA,AAKK;AALL,AAME,AAAM,AAAG,AAACK,AAAIjB,AAASkB;AAAvB,AACE;AAAK;AAAL,AACE,AAAA,AAACC;AAAD;AAAA,AAAO,AAAAC,AAAAA,AAAAA,AAAGhB,AAAAA;;AAAGiB;;;;;AARnB,AAAA,AAAAT,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAC;;;AAAA,AAWA;;;AAGEM,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAkBH;;;AAAA,AAAMC,AAEH;AAFH,AAGE,AAAO,AAAGC;AAAV,AAAqB;;AAArB,AACE,AAAA,AAAkC,AAACH,AAAAA,AAAAA,AAAqBU,AAAAA;AAAxD,AAAA,AAAAN;AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAiB;AAAjB,AAAAI,AAAAJ,AAAA,AAAqB;AAArB,AAAAI,AAAAJ,AAAA,AAA2B;AAA3B,AACE,AAAO,AAACM,AAAKD,AAAGE;AACT,AAAKC,AAAG,AAAA,AAAM9B;AAAN,AAAA,AAAA,AAAA+B,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACU9B;;;AADV;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;;AAWEA;;;;;;;;AACjB6B","names":["p__16702","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__16703","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.compression/token-fn","temp__5457__auto__","cljs.core/re-find","re","s","tag","chunk","cljs.core/count","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.compression/tokenizer","argseq__4648__auto__","self__4629__auto__","cljs.core/seq","seq16707","cljs.core.map.cljs$core$IFn$_invoke$arity$2","tags+regexes","cljs.core/some","p1__16706#","fs","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.compression/stylesheet-tokenizer","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.compression/compress-stylesheet","stylesheet","temp__5455__auto__","map__16718","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","s1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","size","s2","G__16721","cljs.core/Keyword"]}