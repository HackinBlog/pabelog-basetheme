{"version":3,"sources":["day8/re_frame_10x/inlined_deps/re_frame/v0v10v6/re_frame/fx.cljc"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.fx\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.router      :as router]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.db          :refer [app-db]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.interceptor :refer [->interceptor]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.interop     :refer [set-timeout!]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.events      :as events]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.registrar   :refer [get-handler clear-handlers register-handler]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.loggers     :refer [console]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.trace :as trace :include-macros true]))\n\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :fx)\n(assert (day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.registrar/kinds kind))\n\n(defn reg-fx\n  \"Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`.\"\n  [id handler]\n  (register-handler kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(def do-fx\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \\\"set flag\\\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.\"\n  (->interceptor\n    :id :do-fx\n    :after (fn do-fx-after\n             [context]\n             (trace/with-trace\n               {:op-type :event/do-fx}\n               (doseq [[effect-key effect-value] (:effects context)]\n                 (if-let [effect-fn (get-handler kind effect-key false)]\n                   (effect-fn effect-value)\n                   (console :error \"re-frame: no handler registered for effect:\" effect-key \". Ignoring.\")))))))\n\n;; -- Builtin Effect Handlers  ------------------------------------------------\n\n;; :dispatch-later\n;;\n;; `dispatch` one or more events after given delays. Expects a collection\n;; of maps with two keys:  :`ms` and `:dispatch`\n;;\n;; usage:\n;;\n;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\n;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\n;;\n;; Note: nil entries in the collection are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-later [ (when (> 3 5) {:ms 200 :dispatch [:conditioned-out]})\n;;                       {:ms 100 :dispatch [:another-one]}]}\n;;\n(reg-fx\n  :dispatch-later\n  (fn [value]\n    (doseq [{:keys [ms dispatch] :as effect} (remove nil? value)]\n        (if (or (empty? dispatch) (not (number? ms)))\n          (console :error \"re-frame: ignoring bad :dispatch-later value:\" effect)\n          (set-timeout! #(router/dispatch dispatch) ms)))))\n\n\n;; :dispatch\n;;\n;; `dispatch` one event. Expects a single vector.\n;;\n;; usage:\n;;   {:dispatch [:event-id \"param\"] }\n\n(reg-fx\n  :dispatch\n  (fn [value]\n    (if-not (vector? value)\n      (console :error \"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\" value)\n      (router/dispatch value))))\n\n\n;; :dispatch-n\n;;\n;; `dispatch` more than one event. Expects a list or vector of events. Something for which\n;; sequential? returns true.\n;;\n;; usage:\n;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\n;;\n;; Note: nil events are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\n;;                       [:another-one])}\n;;\n(reg-fx\n  :dispatch-n\n  (fn [value]\n    (if-not (sequential? value)\n      (console :error \"re-frame: ignoring bad :dispatch-n value. Expected a collection, got got:\" value)\n      (doseq [event (remove nil? value)] (router/dispatch event)))))\n\n\n;; :deregister-event-handler\n;;\n;; removes a previously registered event handler. Expects either a single id (\n;; typically a namespaced keyword), or a seq of ids.\n;;\n;; usage:\n;;   {:deregister-event-handler :my-id)}\n;; or:\n;;   {:deregister-event-handler [:one-id :another-id]}\n;;\n(reg-fx\n  :deregister-event-handler\n  (fn [value]\n    (let [clear-event (partial clear-handlers events/kind)]\n      (if (sequential? value)\n        (doseq [event value] (clear-event event))\n        (clear-event value)))))\n\n\n;; :db\n;;\n;; reset! app-db with a new value. `value` is expected to be a map.\n;;\n;; usage:\n;;   {:db  {:key1 value1 key2 value2}}\n;;\n(reg-fx\n  :db\n  (fn [value]\n    (if-not (identical? @app-db value)\n      (reset! app-db value))))\n\n"],"mappings":"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","names":["day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.fx/kind","js/Error","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.registrar/kinds","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.fx/reg-fx","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.registrar/register-handler","id","handler","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.fx/do-fx","day8.re_frame_10x.inlined_deps.re_frame.v0v10v6.re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.trace/is-trace-enabled?","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.trace/*current-trace*","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.trace/start-trace","*current-trace*-temp-val__19178","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.interop/now","end__18937__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","duration__18938__auto__","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.trace/run-tracing-callbacks!","*current-trace*-orig-val__19177","cljs.core/seq","i__19182","count__19181","chunk__19180","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__19183","seq__19179","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","cljs.core/first","vec__19186","cljs.core/next","i__19192","count__19191","chunk__19190","vec__19193","seq__19189","vec__19196","context","temp__5455__auto__","day8.re_frame_10x.inlined_deps.re_frame.v0v10v6.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","effect-key","effect-fn","effect-value","day8.re_frame_10x.inlined_deps.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","i__19202","count__19201","chunk__19200","map__19203","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq__19199","map__19206","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","value","cljs.core/empty?","dispatch","ms","effect","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.interop/set-timeout!","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.router/dispatch","cljs.core/vector?","cljs.core/sequential?","i__19214","count__19213","chunk__19212","seq__19211","event","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.registrar/clear-handlers","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.events/kind","i__19218","count__19217","chunk__19216","seq__19215","clear-event","cljs.core/deref","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.db/app-db","cljs.core/reset!"]}