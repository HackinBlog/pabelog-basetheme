{"version":3,"sources":["rewrite_clj/node/meta.cljs"],"sourcesContent":["(ns rewrite-clj.node.meta\n  (:require [rewrite-clj.node.protocols :as node]\n            [rewrite-clj.node.whitespace :as ws]))\n\n;; ## Node\n\n(defrecord MetaNode [tag prefix children]\n  node/Node\n  (tag [_] tag)\n  (printable-only? [_] false)\n  (sexpr [_]\n    (let [[mta data] (node/sexprs children)]\n      (assert (implements? IWithMeta data)\n              (str \"cannot attach metadata to: \" (pr-str data)))\n      (with-meta data (if (map? mta) mta {mta true}))))\n  (length [_]\n    (+ (count prefix) (node/sum-lengths children)))\n  (string [_]\n    (str prefix (node/concat-strings children)))\n\n  node/InnerNode\n  (inner? [_] true)\n  (children [_] children)\n  (replace-children [this children']\n    (node/assert-sexpr-count children' 2)\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;; TODO\n;(node/make-printable! MetaNode)\n\n;; ## Constructor\n\n(defn meta-node\n  \"Create node representing a form and its metadata.\"\n  ([children]\n   (node/assert-sexpr-count children 2)\n   (->MetaNode :meta \"^\" children))\n  ([metadata data]\n   (meta-node [metadata (ws/spaces 1) data])))\n\n(defn raw-meta-node\n  \"Create node representing a form and its metadata using the\n   `#^` prefix.\"\n  ([children]\n   (node/assert-sexpr-count children 2)\n   (->MetaNode :meta* \"#^\" children))\n  ([metadata data]\n   (raw-meta-node [metadata (ws/spaces 1) data])))\n"],"mappings":";;;;AAMA,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAWqE;;AAAX,AAAA,AAAA,AAsBa;AAtBb,AAuBI,AAAauB;;;AAvBjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWvB;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAArE,AAAAC,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWoE;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAnE;AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAAE;;;AAAA;AAAAC;;;AAAA;AAAAC;;;;AAAA,AAAAC,AAAAC,AAAAP,AAAAQ;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAW2D;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA1D,AAAA;AAAA,AAAA;AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAAA,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC;;AAAAC,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWiD;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;AAAA;AAAA,AAAA,AAAAhD,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC;;;AAAA,AAAA,AAAAH,AAAAC,AAAAG,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAG,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAA,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApB,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAW4D;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAzC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAApB,AAAA,AAAAqB,AAAArB,AAAA,AAAAsB;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAWsC;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAArC;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAWqC;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAhE,AAAAC,AAAAC,AAAAyB,AAAAvB,AAAAwB,AAAWoC;;;AAAX,AAAA,AAAA,AAAA,AAAA,AAAWA;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAnC,AAAAzB;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAW4D;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAApC;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA;AAAAA;;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC;;;AAAA,AAAA,AAAAC,AAAAC;;AAAA,AAAA,AAAAN,AAAAE;;AAAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWkC;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA7B,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAAE,AAAA,AAAAD,AAAA,AAAAD,AAAA,AAAAE,AAAA,AAAAD,AAAA,AAAAD,AAAA,AAAAE,AAAA,AAAAD,AAAA,AAAAD,AAAA,AAAAE,AAAA,AAAAD,AAAA,AAAAD;;;AAAA,AAAA,AAAA,AAAAG,AAAW0B;;AAAX,AAAA,AAAA,AAAA,AAAWA,AAEH;;AAFR,AAAA,AAAA,AAEQ;AAFR,AAEWhE;;;AAFX,AAAA,AAAA,AAAA,AAAWgE,AAGS;;AAHpB,AAAA,AAAA,AAGoB;AAHpB,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAWA,AAID;;AAJV,AAAA,AAAA,AAIU;AAJV,AAKI,AAAA,AAAiB,AAACY,AAAY1E;AAA9B,AAAAM,AAAAmE,AAAA,AAAA,AAAO;AAAP,AAAAnE,AAAAmE,AAAA,AAAA,AAAW;AAAX,AACE,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAArC,AAAA,AAAA,AAAA,AAAA,AAAuBwC,AAAAA,AAAAA;AAA/B;AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AACQ,AAAA,AAAmC,AAACE,AAAOD;;;AACnD,AAACE,AAAUF,AAAK,AAAA,AAAA,AAAI,AAACG,AAAKC,AAAKA,AAAKA;;;AAR1C,AAAA,AAAA,AAAA,AAAWlB,AASA;;AATX,AAAA,AAAA,AASW;AATX,AAUI,AAAG,AAACnC,AAAM5B,AAAQ,AAACkF,AAAiBjF;;;AAVxC,AAAA,AAAA,AAAA,AAAW8D,AAWA;;AAXX,AAAA,AAAA,AAWW;AAXX,AAYI,AAAK/D,AAAO,AAACmF,AAAoBlF;;;AAZrC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAW8D;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAzB,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAAjB,AAAAa;;AAAA,AAAAxC,AAAAC,AAAAC,AAAAyB,AAAA,AAAAkB,AAAA,AAAAJ,AAAArC,AAAAoC,AAAA,AAAWwB;;;;AAAX,AAAA,AAAA,AAAA1B,AAAW0B;;AAAX,AAAA,AAAA,AAAA,AAAWA,AAeA;;AAfX,AAAA,AAAA,AAeW;AAfX,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAWA,AAgBE;;AAhBb,AAAA,AAAA,AAgBa;AAhBb,AAgBgB9D;;;AAhBhB,AAAA,AAAA,AAAA,AAAW8D,AAiBU,AAAK;;AAjB1B,AAAA,AAAA,AAiBqB;AAjBrB,AAkBI,AAAA,AAACqB,AAAwBC;;AACzB,AAAA,AAAC9B,AAAM+B,AAAeD;;;AAnB1B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWtB;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAlB;AAAA,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAA,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC;;AAAA,AAAA3B,AAAAvB,AAAAC,AAAAyB,AAAAvB,AAAA,AAAW4D;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAAhB;AAAA,AAAA,AAAAC,AAAAA,AAAAG,AAAAC,AAAAJ,AAAAG,AAAAC;;AAAA,AAAArD,AAAAwB,AAAAtB,AAAAyB,AAAAvB,AAAA,AAAW4D;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAAhB;AAAA,AAAA,AAAAC,AAAAA,AAAAK,AAAAC,AAAAN,AAAAK,AAAAC;;AAAA,AAAAvD,AAAAC,AAAAuB,AAAAG,AAAAvB,AAAA,AAAW4D;;AAAX,AAAAhE,AAAAC,AAAAC,AAAAyB,AAAA,AAAA6B,AAAApD,AAAA2C,AAAAvB,AAAA,AAAWwC;;;;;;AAAX,AAAA,AAAA,AAAA,AAAA,AAAWA;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAP,AAAA,AAAApC,AAAA,AAAA,AAAAqC,AAAA,AAAA1D,AAAA,AAAA,AAAA0D,AAAA,AAAAzD,AAAA,AAAA,AAAAyD,AAAA,AAAAxD,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAW4D;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAhE,AAAAC,AAAAC,AAAAsB,AAAApB,AAAAwB,AAAWoC;;;AAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWA;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAL,AAAAC;AAAA,AAAAC,AAAA,AAAAC,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;;AAAA,AAAAtD,AAAAyD,AAAAF,AAAAD;;;;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAAC,AAAA;;;AAAA;;;AAAA,AAAWM,AAAU,AAAI,AAAO;AAAhC,AAAA,AAAAT,AAAA,AAAA,AAAA,AAAqBhE,AAAIC,AAAOC;;;AAAhC;;;AAAA,AAAA,AAAWwE;AAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAN,AAAAC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA1B,AAAA,AAAA4B;;AAAAA;;;AAAA,AAAA,AAAAP,AAAA,AAAA,AAAAK,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxB,AAAA2B,AAAA;;;AAAAR,AA8BA,AAAA;;;AAAA,AAAA,AAAMyB;AAAN,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAZ,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMY,AAEF;AAFJ,AAGG,AAAA,AAACJ,AAAwBnF;;AACzB,AAAA,AAAA,AAACuE,AAAqBvE;;;AAJzB,AAAA,AAAA,AAAMuF,AAKF,AAAS;AALb,AAMG,AAAA,AAACC,AAAWC,AAAS,AAAA,AAACC,AAAad;;;AANtC,AAAA,AAAA,AAAMW;;AAAN,AAQA,AAAA;;;;AAAA,AAAA,AAAMK;AAAN,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAjB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMiB,AAGF;AAHJ,AAIG,AAAA,AAACT,AAAwBnF;;AACzB,AAAA,AAAA,AAACuE,AAAuBvE;;;AAL3B,AAAA,AAAA,AAAM4F,AAMF,AAAS;AANb,AAOG,AAAA,AAACC,AAAeJ,AAAS,AAAA,AAACC,AAAad;;;AAP1C,AAAA,AAAA,AAAMgB;;AAAN","names":["this__4301__auto__","k__4302__auto__","k20348","G__20355","cljs.core/Keyword","tag","prefix","children","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","else__4304__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__20356","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__20357","f__4321__auto__","ret__4323__auto__","k__4324__auto__","v__4325__auto__","init__4322__auto__","this__4320__auto__","cljs.core/pr-sequential-writer","writer__4316__auto__","opts__4317__auto__","keyval__4319__auto__","pr-pair__4318__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","cljs.core/RecordIter","G__20347","cljs.core/-iterator","cljs.core/nil-iter","__meta","__hash","cljs.core/count","h__4159__auto__","cljs.core/hash-unordered-coll","coll__4298__auto__","fexpr__20382","this__4297__auto__","other20350","this20349","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core/contains?","k__4311__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","this__4310__auto__","cljs.core/not-empty","cljs.core/keyword-identical?","k__4309__auto__","expr__20411","pred__20410","G__20413","G__20414","G__20415","G__20416","G__20417","G__20418","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/seq","cljs.core/MapEntry","cljs.core/vector?","entry__4307__auto__","this__4306__auto__","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","rewrite-clj.node.meta/MetaNode","cljs.core/List","cljs.core/-write","writer__4345__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__20353","cljs.core/record?","G__20419","extmap__4340__auto__","rewrite-clj.node.meta/->MetaNode","rewrite-clj.node.meta/map->MetaNode","vec__20392","rewrite-clj.node.protocols/sexprs","js/Error","data","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/with-meta","cljs.core/map?","mta","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","rewrite-clj.node.protocols/assert-sexpr-count","children'","this","G__20421","rewrite-clj.node.meta/meta-node","rewrite_clj.node.meta.meta_node.cljs$core$IFn$_invoke$arity$1","metadata","rewrite-clj.node.whitespace/spaces","G__20432","rewrite-clj.node.meta/raw-meta-node","rewrite_clj.node.meta.raw_meta_node.cljs$core$IFn$_invoke$arity$1"]}