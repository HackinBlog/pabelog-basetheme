{"version":3,"sources":["day8/re_frame_10x/inlined_deps/reagent/v0v8v0/reagent/impl/component.cljs"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component\n  (:require [create-react-class :as create-react-class]\n            [react :as react]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.util :as util]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.batching :as batch]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.ratom :as ratom]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.interop :refer-macros [$ $!]]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.debug :refer-macros [dbg prn dev? warn error warn-unless\n                                          assert-callable]]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn shallow-obj-to-map [o]\n  (let [ks (js-keys o)\n        len (alength ks)]\n    (loop [m {} i 0]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (assoc m (keyword k) (aget o k)) (inc i)))\n        m))))\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [c p]\n  (if-some [a ($ p :argv)]\n    a\n    [(.-constructor c) (shallow-obj-to-map p)]))\n\n(defn get-argv [c]\n  (props-argv c ($ c :props)))\n\n(defn get-props [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-props v)\n      (shallow-obj-to-map p))))\n\n(defn get-children [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-children v)\n      (->> ($ p :children)\n           (react/Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :render)))))\n\n(defn ^boolean reagent-component? [c]\n  (some? ($ c :reagentRender)))\n\n(defn cached-react-class [c]\n  ($ c :cljsReactClass))\n\n(defn cache-react-class [c constructor]\n  ($! c :cljsReactClass constructor))\n\n\n;;; State\n\n(defn state-atom [this]\n  (let [sa ($ this :cljsState)]\n    (if-not (nil? sa)\n      sa\n      ($! this :cljsState (ratom/atom nil)))))\n\n;; avoid circular dependency: this gets set from template.cljs\n(defonce as-element nil)\n\n\n;;; Rendering\n\n(defn wrap-render [c]\n  (let [f ($ c :reagentRender)\n        _ (assert-callable f)\n        res (if (true? ($ c :cljsLegacyRender))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (as-element res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (as-element (apply vector res args)))\n                           res)]\n                   ($! c :reagentRender f)\n                   (recur c))\n      :else res)))\n\n(declare comp-name)\n\n(defn do-render [c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(def static-fns\n  {:render\n   (fn render []\n     (this-as c (if util/*non-reactive*\n                  (do-render c)\n                  (let [rat ($ c :cljsRatom)]\n                    (batch/mark-rendered c)\n                    (if (nil? rat)\n                      (ratom/run-in-reaction #(do-render c) c \"cljsRatom\"\n                                             batch/queue-render rat-opts)\n                      (._run rat false))))))})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getInitialState\n    (fn getInitialState []\n      (this-as c (reset! (state-atom c) (.call f c c))))\n\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv ($ c :props.argv)\n                         new-argv ($ nextprops :argv)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (not= old-argv new-argv))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops]\n      (this-as c (.call f c c (props-argv c oldprops))))\n\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c\n               ($! c :cljsMountOrder (batch/next-mount-count))\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> ($ c :cljsRatom)\n                       ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidCatch\n    (fn componentDidCatch [error info]\n      (this-as c (.call f c c error info)))\n\n    nil))\n\n(defn get-wrapper [key f name]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillMount nil\n                 :componentWillUnmount nil})\n\n(def dash-to-camel (util/memoize-1 util/dash-to-camel))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-camel keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender :componentFunction])\n          render-fun (-> renders vals first)]\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:componentFunction fmap))\n        legacy-render (nil? render-fun)\n        render-fun (or render-fun\n                       (:render fmap))\n        name (str (or (:displayName fmap)\n                      (util/fun-name render-fun)))\n        name (case name\n               \"\" (str (gensym \"reagent\"))\n               name)\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v name)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :autobind false\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (:render static-fns))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (aset (name k) v)))\n             #js{} m))\n\n(defn cljsify [body]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      wrap-funs\n      map-to-js))\n\n(defn create-class [body]\n  {:pre [(map? body)]}\n  (->> body\n       cljsify\n       create-react-class))\n\n(defn fiber-component-path [fiber]\n  (let [name (some-> fiber\n                     ($ :type)\n                     ($ :displayName))\n        parent (some-> fiber\n                       ($ :return))\n        path (some-> parent\n                     fiber-component-path\n                     (str \" > \"))\n        res (str path name)]\n    (when-not (empty? res) res)))\n\n(defn component-path [c]\n  ;; Alternative branch for React 16\n  ;; Try both original name (for UMD foreign-lib) and manged name (property access, for Closure optimized React)\n  (if-let [fiber (or (some-> c ($ :_reactInternalFiber))\n                     (some-> c (.-_reactInternalFiber)))]\n    (fiber-component-path fiber)\n    (let [instance (or (some-> c ($ :_reactInternalInstance))\n                       (some-> c (.-_reactInternalInstance))\n                       c)\n          elem (or (some-> instance ($ :_currentElement))\n                   (some-> instance (.-_currentElement)))\n          name (some-> elem\n                       ($ :type)\n                       ($ :displayName))\n          owner (or (some-> elem ($ :_owner))\n                    (some-> elem (.-_owner)))\n          path (some-> owner\n                       component-path\n                       (str \" > \"))\n          res (str path name)]\n      (when-not (empty? res) res))))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (or (component-path c)\n                (some-> c .-constructor util/fun-name))]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn fn-to-class [f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (let [n (util/fun-name f)]\n                                               (if (empty? n) f n))\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender)]\n      (cache-react-class f res))))\n\n(defn as-class [tag]\n  (if-some [cached-class (cached-react-class tag)]\n    cached-class\n    (fn-to-class tag)))\n\n(defn reactify-component [comp]\n  (if (react-class? comp)\n    comp\n    (as-class comp)))\n"],"mappings":"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","names":["day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/shallow-obj-to-map","cljs.core/js-keys","o","ks","i","len","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","m","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","k","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/extract-props","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v","cljs.core/map?","p","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/extract-children","cljs.core/count","first-child","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/props-argv","temp__5459__auto__","a","c","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/get-argv","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/get-props","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/get-children","G__18329","js/module$node_modules$react$index.Children.toArray","cljs.core.into.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/reagent-class?","cljs.core/fn?","G__18331","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/react-class?","G__18336","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/reagent-component?","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/cached-react-class","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/cache-react-class","constructor","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/state-atom","this","sa","day8.re_frame_10x.inlined_deps.reagent.v0v8v0.reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1","js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component.as-element","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/as-element","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/wrap-render","cljs.core/ifn?","js/Error","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","f","G__18343","n","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core/vector?","res","G__18345","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","args","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/do-render","*current-component*-temp-val__18352","*current-component*-orig-val__18351","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/*current-component*","ok","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.debug/has-console","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.debug/tracking","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.debug/track-console","js/console","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/comp-name","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/rat-opts","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/static-fns","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.util/*non-reactive*","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.batching/mark-rendered","rat","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.ratom/run-in-reaction","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.batching/queue-render","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/custom-wrapper","G__18357","cljs.core/Keyword","key","cljs.core/reset!","nextprops","or__4047__auto__","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.util/*always-update*","old-argv","new-argv","noargv","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","oldprops","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.batching/next-mount-count","G__18365","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.ratom/dispose!","error","info","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/get-wrapper","and__4036__auto__","wrap","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/obligatory","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/dash-to-camel","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.util/memoize-1","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.util/dash-to-camel","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/camelify-map-keys","cljs.core/reduce-kv","fun-map","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/add-obligatory","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/wrap-funs","cljs.core/select-keys","fmap","renders","cljs.core/vals","cljs.core/first","render-fun","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.util/fun-name","G__18374","name","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","legacy-render","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/map-to-js","G__18375","cljs.core/name","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/cljsify","body","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/create-class","G__18376","js/module$node_modules$create_react_class$index","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/fiber-component-path","G__18378","fiber","G__18381","G__18383","parent","path","cljs.core/empty?","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/component-path","temp__5455__auto__","G__18385","G__18387","G__18389","G__18394","G__18396","instance","G__18397","G__18398","elem","G__18401","G__18402","G__18403","owner","G__18407","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/fn-to-class","cljs.core/meta","spec","withrender","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/as-class","tag","cached-class","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/reactify-component","comp"]}