{"version":3,"sources":["rewrite_clj/zip/removez.cljs"],"sourcesContent":["(ns rewrite-clj.zip.removez\n  (:refer-clojure :exclude [remove])\n  (:require [rewrite-clj.zip.move :as m]\n            [rewrite-clj.zip.utils :as u]\n            [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n\n(defn- remove-trailing-space\n  \"Remove all whitespace following a given node.\"\n  [zloc p?]\n  (u/remove-right-while zloc p?))\n\n(defn- remove-preceding-space\n  \"Remove all whitespace preceding a given node.\"\n  [zloc p?]\n  (u/remove-left-while zloc p?))\n\n(defn remove\n  \"Remove value at the given zipper location. Returns the first non-whitespace\n   node that would have preceded it in a depth-first walk. Will remove whitespace\n   appropriately.\n\n  - `[1  2  3]   => [1  3]`\n  - `[1 2]       => [1]`\n  - `[1 2]       => [2]`\n  - `[1]         => []`\n  - `[  1  ]     => []`\n  - `[1 [2 3] 4] => [1 [2 3]]`\n  - `[1 [2 3] 4] => [[2 3] 4]`\n\n   If a node is located rightmost, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are touched. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour.\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (->> (-> (if (or (m/rightmost? zloc)\n                   (m/leftmost? zloc))\n             (remove-preceding-space zloc ws/whitespace?)\n             zloc)\n           (remove-trailing-space ws/whitespace?)\n           z/remove)\n       (ws/skip-whitespace z/prev)))\n\n(defn remove-preserve-newline\n  \"Same as remove but preserves newlines\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (->> (-> (if (or (m/rightmost? zloc)\n                   (m/leftmost? zloc))\n             (remove-preceding-space zloc #(and (ws/whitespace? %)\n                                                (not (ws/linebreak? %))))\n             zloc)\n           (remove-trailing-space #(and (ws/whitespace? %)\n                                                (not (ws/linebreak? %))))\n           z/remove)\n       (ws/skip-whitespace z/prev)))\n\n"],"mappings":";;;;;;AAQA;;;AAAA,AAAOA,AAEJ,AAAK;AAFR,AAGE,AAACC,AAAqBC,AAAKC;;AAE7B;;;AAAA,AAAOC,AAEJ,AAAK;AAFR,AAGE,AAACC,AAAoBH,AAAKC;;AAE5B;;;;;;;;;;;;;;;;;;;AAAA,AAAMK,AAkBH;AAlBH,AAAA,AAmBSN;AAnBT;AAAA,AAAA,AAAA,AAAAI,AAAA;;;AAAA,AAAA,AAqBO,AAAI,AAAI,AAAI,AAACG,AAAaP,AACd,AAACQ,AAAYR,AACnB,AAACE,AAAuBF,AAAKS,AAC7BT,AACF,AAACF,AAAsBW,AACvBC,AACJ,AAACC,AAAmBC;AA3B3B,AAAA,AAoBUP;AApBV;AAAA,AAAA,AAAA,AAAAD,AAAA;;;AAAAC;;AA6BA;;;AAAA,AAAMQ,AAEH;AAFH,AAAA,AAGSb;AAHT;AAAA,AAAA,AAAA,AAAAI,AAAA;;;AAAA,AAAA,AAKO,AAAI,AAAI,AAAI,AAACG,AAAaP,AACd,AAACQ,AAAYR,AACnB,AAAA,AAAA,AAACE,AAAuBF,AAG1B,AAACF,AAEDY,AACJ,AAACC,AAAmBC;AANd,AAA8B,AAAA,AAAK,AAAAG,AAACN;AAAN,AAAA,AAAAK;AACK,AAACE,AAAI,AAAAD,AAACE;;AADXH;;AAE9Bd,AACF,AAAA;AAAA,AAAwB,AAAA,AAAK,AAAAkB,AAACT;AAAN,AAAA,AAAAK;AACa,AAACE,AAAI,AAAAE,AAACD;;AADnBH;;;AAVnC,AAAA,AAIUT;AAJV;AAAA,AAAA,AAAA,AAAAD,AAAA;;;AAAAC","names":["rewrite-clj.zip.removez/remove-trailing-space","rewrite-clj.zip.utils/remove-right-while","zloc","p?","rewrite-clj.zip.removez/remove-preceding-space","rewrite-clj.zip.utils/remove-left-while","js/Error","%","rewrite-clj.zip.removez/remove","rewrite-clj.zip.move/rightmost?","rewrite-clj.zip.move/leftmost?","rewrite-clj.zip.whitespace/whitespace?","clojure.zip/remove","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2","clojure.zip/prev","rewrite-clj.zip.removez/remove-preserve-newline","and__4036__auto__","p1__21255#","cljs.core/not","rewrite-clj.zip.whitespace/linebreak?","p1__21256#"]}