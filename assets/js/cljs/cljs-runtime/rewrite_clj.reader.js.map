{"version":3,"sources":["rewrite_clj/reader.cljs"],"sourcesContent":["(ns rewrite-clj.reader\n  (:refer-clojure :exclude [peek next])\n  (:require [cljs.tools.reader :as r]\n            [cljs.tools.reader.reader-types :as reader-types]\n            [cljs.tools.reader.impl.commons :refer [parse-symbol]]\n            [goog.string :as gstring]\n            [rewrite-clj.node.protocols :as nd]))\n\n(def read-char reader-types/read-char)\n(def get-column-number reader-types/get-column-number)\n(def get-line-number reader-types/get-line-number)\n(def peek-char reader-types/peek-char)\n(def indexing-push-back-reader reader-types/indexing-push-back-reader)\n(def unread reader-types/unread)\n(def read-string r/read-string)\n\n;; TODO: try to get goog.string.format up and running !\n(defn throw-reader\n  \"Throw reader exception, including line/column.\"\n  [^not-native reader fmt & data]\n  (let [c (get-column-number reader)\n        l (get-line-number reader)]\n    (throw\n      (js/Error.\n        (str data fmt\n             \" [at line \" l \", column \" c \"]\")))))\n\n\n(defn boundary?\n  \"Check whether a given char is a token boundary.\"\n  [c]\n  (< -1 (.indexOf #js [\\\" \\: \\; \\' \\@ \\^ \\` \\~\n                       \\( \\) \\[ \\] \\{ \\} \\\\ nil] c)))\n\n(defn- ^boolean whitespace?\n  \"Checks whether a given character is whitespace\"\n  [ch]\n  ;(or (gstring/isBreakingWhitespace ch) (identical? \\, ch))\n  (< -1 (.indexOf #js [\\return \\newline \\tab \\space \",\"] ch)))\n\n(defn ^boolean linebreak?\n  \"Checks whether the character is a newline\"\n  [c]\n  (< -1 (.indexOf #js [\\return \\newline] c)))\n\n(defn ^boolean space?\n  \"Checks whether the character is a space\"\n  [c]\n  (< -1 (.indexOf #js [\\tab \\space \",\"] c)))\n\n(defn ^boolean whitespace-or-boundary?\n  [c]\n  (or (whitespace? c) (boundary? c)))\n\n(def buf (gstring/StringBuffer. \"\"))\n\n(defn read-while\n  \"Read while the chars fulfill the given condition. Ignores\n  the unmatching char.\"\n  ([^not-native reader p?]\n   (read-while reader p? (not (p? nil))))\n\n  ([^not-native reader p? eof?]\n    (.clear buf)\n    (loop []\n      (if-let [c (read-char reader)]\n        (if (p? c)\n          (do\n            (.append buf c)\n            (recur))\n          (do\n            (unread reader c)\n            (.toString buf)))\n        (if eof?\n          (.toString buf)\n          (throw-reader reader \"Unexpected EOF.\"))))))\n\n(defn read-until\n  \"Read until a char fulfills the given condition. Ignores the\n   matching char.\"\n  [^not-native reader p?]\n  (read-while\n    reader\n    (complement p?)\n    (p? nil)))\n\n(defn read-include-linebreak\n  \"Read until linebreak and include it.\"\n  [^not-native reader]\n  (str\n    (read-until\n      reader\n      #(or (nil? %) (linebreak? %)))\n    (read-char reader)))\n\n(defn string->edn\n  \"Convert string to EDN value.\"\n  [s]\n  (read-string s))\n\n(defn ignore\n  \"Ignore the next character.\"\n  [^not-native reader]\n  (read-char reader)\n  nil)\n\n\n(defn next\n  \"Read next char.\"\n  [^not-native reader]\n  (read-char reader))\n\n(defn peek\n  \"Peek next char.\"\n  [^not-native reader]\n  (peek-char reader))\n\n\n\n(defn read-with-meta\n  \"Use the given function to read value, then attach row/col metadata.\"\n  [^not-native reader read-fn]\n  (let [row (get-line-number reader)\n        col (get-column-number reader)\n        ^not-native entry (read-fn reader)]\n    (when entry\n      (let [end-row (get-line-number reader)\n            end-col (get-column-number reader)\n            end-col (if (= 0 end-col)\n                      (+ col (.-length (nd/string entry)))\n                      end-col)] ; TODO: Figure out why numbers are sometimes whacky\n        (if (= 0 col) ; why oh why\n          entry\n          (-with-meta\n            entry\n            {:row row\n             :col col\n             :end-row end-row\n             :end-col end-col}))))))\n\n(defn read-repeatedly\n  \"Call the given function on the given reader until it returns\n   a non-truthy value.\"\n  [^not-native reader read-fn]\n  (->> (repeatedly #(read-fn reader))\n       (take-while identity)\n       (doall)))\n\n\n(defn read-n\n  \"Call the given function on the given reader until `n` values matching `p?` have been\n   collected.\"\n  [^not-native reader node-tag read-fn p? n]\n  {:pre [(pos? n)]}\n  (loop [c 0\n         vs []]\n    (if (< c n)\n      (if-let [v (read-fn reader)]\n        (recur\n          (if (p? v) (inc c) c)\n          (conj vs v))\n        (throw-reader\n          reader\n          \"%s node expects %d value%s.\"\n          node-tag\n          n\n          (if (= n 1) \"\" \"s\")))\n      vs)))\n\n(defn- re-matches*\n  [re s]\n  (let [matches (.exec re s)]\n    (when (and (not (nil? matches))\n               (identical? (aget matches 0) s))\n      (if (== (alength matches) 1)\n        (aget matches 0)\n        matches))))\n\n(defn read-keyword\n  [^not-native reader initch]\n  (let [tok (cljs.tools.reader/read-token reader :keyword (read-char reader))\n        a (re-matches* (re-pattern \"^[:]?([^0-9/].*/)?([^0-9/][^/]*)$\") tok)\n        token (aget a 0)\n        ns (aget a 1)\n        name (aget a 2)]\n    (if (or (and (not (undefined? ns))\n                 (identical? (. ns (substring (- (.-length ns) 2) (.-length ns))) \":/\"))\n            (identical? (aget name (dec (.-length name))) \":\")\n            (not (== (.indexOf token \"::\" 1) -1)))\n      (cljs.tools.reader.impl.errors/reader-error reader \n                                                  \"Invalid token: \" \n\t\t\t\t\t\t  token)\n      (if (and (not (nil? ns)) (> (.-length ns) 0))\n        (keyword (.substring ns 0 (.indexOf ns \"/\")) name)\n        (keyword (.substring token 1))))))\n\n;; (let [form-rdr (r/indexing-push-back-reader \"(+ 1 1)\")]\n;;   (read-include-linebreak form-rdr))\n\n\n;(re-matches* (re-pattern \"^[:]?([^0-9/].*/)?([^0-9/][^/]*)$\") \":%dill.*\")\n"],"mappings":";;;;;;;AAQA,AAAKA,AAAUC;AACf,AAAKC,AAAkBC;AACvB,AAAKC,AAAgBC;AACrB,AAAKC,AAAUC;AACf,AAAKC,AAA0BC;AAC/B,AAAKC,AAAOC;AACZ,AAAKC,AAAYC;AAGjB,AAAA;;;AAAA,AAAA,AAAMK;AAAN,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA,AAAAJ,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAF;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAD,AAAA,AAEe,AAAO,AAAM;AAF5B,AAGE,AAAM,AAAE,AAAChB,AAAAA,AAAAA,AAAkBwB,AAAAA;AACrB,AAAE,AAACtB,AAAAA,AAAAA,AAAgBsB,AAAAA;AADzB,AAEE,AACE,AAAAC,AACE,AAAA,AAAA,AAAA,AAAKC,AAAKC,AACQC,AAAcC;;;AARxC,AAAA,AAAAb,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAAD,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAAC,AAAAC,AAAAJ;;;AAAA,AAWA;;;AAAA,AAAMW,AAEH;AAFH,AAGE,AAAA,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACyCD;;AAEjD;;;AAAA,AAAgBE,AAEb;AAFH,AAIE,AAAA,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAiDC;;AAEzD;;;AAAA,AAAeC,AAEZ;AAFH,AAGE,AAAA,AAAM,AAAA,AAAA,AAAA,AAAiCJ;;AAEzC;;;AAAA,AAAeK,AAEZ;AAFH,AAGE,AAAA,AAAM,AAAA,AAAA,AAAA,AAAA,AAAgCL;;AAExC,AAAA,AAAeM,AACZ;AADH,AAEE,AAAI,AAACJ,AAAYF,AAAG,AAACC,AAAUD;;AAEjC,AAAKO,AAAI,AAAAC,AAAA;AAET,AAAA;;;;AAAA,AAAA,AAAME;AAAN,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAd,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMc,AAGU,AAAO;AAHvB,AAIG,AAACC,AAAWhB,AAAOiB,AAAG,AAACC,AAAI,AAAA,AAAA,AAACD,AAAAA,AAAAA;;;AAJ/B,AAAA,AAAA,AAAMF,AAMU,AAAO,AAAG;AAN1B,AAOI,AAAQH;;AACR;AAAA,AACE,AAAA,AAAW,AAACtC,AAAAA,AAAAA,AAAU0B,AAAAA;AAAtB,AAAA,AAAAmB;AAAA,AAAAA,AAAS;AAAT,AACE,AAAI,AAACF,AAAAA,AAAAA,AAAGZ,AAAAA;AACN,AACE,AAASO,AAAIP;;AACb;;AACF,AACE,AAACrB,AAAAA,AAAAA,AAAOgB,AAAAA,AAAOK,AAAAA;;AACf,AAAWO;;;AACf,AAAIQ;AACF,AAAWR;;AACX,AAAA,AAACpB,AAAaQ;;;;;;;AAnBxB,AAAA,AAAA,AAAMe;;AAAN,AAqBA;;;;AAAA,AAAMM,AAGS,AAAO;AAHtB,AAIE,AAACL,AACChB,AACA,AAACsB,AAAWL,AACZ,AAAA,AAAA,AAACA,AAAAA,AAAAA;;AAEL;;;AAAA,AAAMM,AAES;AAFf,AAGE,AACE,AAAA,AAAA,AAACF,AACCrB;AADF,AAEG,AAAI,AAAAwB,AAAA,AAAS,AAAAA,AAACf;AACjB,AAACnC,AAAAA,AAAAA,AAAU0B,AAAAA;;AAEf;;;AAAA,AAAMyB,AAEH;AAFH,AAGE,AAACvC,AAAAA,AAAAA,AAAYwC,AAAAA;;AAEf;;;AAAA,AAAMC,AAES;AAFf,AAGE,AAACrD,AAAAA,AAAAA,AAAU0B,AAAAA;;AAHb;;AAOA;;;AAAA,AAAM4B,AAES;AAFf,AAGE,AAACtD,AAAAA,AAAAA,AAAU0B,AAAAA;;AAEb;;;AAAA,AAAM6B,AAES;AAFf,AAGE,AAACjD,AAAAA,AAAAA,AAAUoB,AAAAA;;AAIb;;;AAAA,AAAM8B,AAES,AAAO;AAFtB,AAGE,AAAM,AAAI,AAACpD,AAAAA,AAAAA,AAAgBsB,AAAAA;AACrB,AAAI,AAACxB,AAAAA,AAAAA,AAAkBwB,AAAAA;AACX,AAAM,AAAC+B,AAAAA,AAAAA,AAAQ/B,AAAAA;AAFjC,AAGE,AAAMgC;AAAN,AACE,AAAM,AAAQ,AAACtD,AAAAA,AAAAA,AAAgBsB,AAAAA;AACzB,AAAQ,AAACxB,AAAAA,AAAAA,AAAkBwB,AAAAA;AAC3B,AAAQ,AAAI,AAAA,AAACiC,AAAIC,AACP,AAAGC,AAAI,AAAU,AAAWH,AAC5BE;AAJhB,AAKE,AAAI,AAAA,AAACD,AAAIE;AACPH;;AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACEA,AACMI,AACAD,AACIE,AACAH;;;AAblB;;;AAeJ;;;;AAAA,AAAMI,AAGS,AAAO;AAHtB,AAIO,AAAA,AAACC,AACD,AAACC,AAAWC,AACZ,AAACC;AAFD,AAAa,AAACX,AAAAA,AAAAA,AAAQ/B,AAAAA;;;AAK7B;;;;AAAA,AAAM2C,AAGS,AAAO,AAAS,AAAQ,AAAG;AAH1C,AAAA,AAIS,AAAA,AAAMC;AAJf;AAAA,AAAA,AAAA,AAAA3C,AAAA;;;AAKE,AAAA,AAAO;AAAP,AACO;;AADP,AAEE,AAAI,AAAGI,AAAEuC;AACP,AAAA,AAAW,AAACb,AAAAA,AAAAA,AAAQ/B,AAAAA;AAApB,AAAA,AAAAmB;AAAA,AAAAA,AAAS;AAAT,AACE,AACE,AAAI,AAACF,AAAAA,AAAAA,AAAG4B,AAAAA,AAAG,AAAA,AAAKxC,AAAGA;AACnB,AAACyC,AAAKC,AAAGF;;;;;AACX,AAAA,AAACG,AACChD,AAEAiD,AACAL,AACA,AAAA,AAAA,AAAI,AAAA,AAACX,AAAEW;;;AACXG;;;;;AAEN,AAAA,AAAOG,AACJ,AAAG;AADN,AAEE,AAAM,AAAQ,AAAOC,AAAGzB;AAAxB,AACE,AAAM,AAAK,AAAK,AAAA,AAAM0B,AACX,AAAY,AAAA,AAAMA,AAAW1B;AADxC,AAEE,AAAI,AAAA,AAAI,AAAS0B;AACf,AAAA,AAAMA;;AACNA;;;AAJJ;;;AAMJ,AAAA,AAAMC,AACS,AAAO;AADtB,AAEE,AAAM,AAAI,AAAA,AAACC,AAA6BtD,AAAgB,AAAC1B,AAAAA,AAAAA,AAAU0B,AAAAA;AAC7D,AAAE,AAACkD,AAAY,AAAA,AAACK,AAAgDC;AAChE,AAAM,AAAA,AAAMC;AACZ,AAAG,AAAA,AAAMA;AACT,AAAK,AAAA,AAAMA;AAJjB,AAKE,AAAI,AAAI,AAAK,AAAK,AAAYC,AACjB,AAAA,AAAY,AAAGA,AAAc,AAAA,AAAG,AAAUA,AAAO,AAAUA,AAChE,AAAA,AAAY,AAAMC,AAAK,AAAA,AAAK,AAAUA,AACtC,AAAK,AAAA,AAAI,AAAA,AAAA,AAAUC;AACzB,AAAA,AAACC,AAA2C7D,AAE1C4D;;AACF,AAAI,AAAK,AAAK,AAAA,AAAMF,AAAK,AAAA,AAAG,AAAUA;AACpC,AAACI,AAAQ,AAAA,AAAYJ,AAAK,AAAA,AAAUA,AAASC;;AAC7C,AAACI,AAAQ,AAAA,AAAYH","names":["rewrite-clj.reader/read-char","cljs.tools.reader.reader-types/read-char","rewrite-clj.reader/get-column-number","cljs.tools.reader.reader-types/get-column-number","rewrite-clj.reader/get-line-number","cljs.tools.reader.reader-types/get-line-number","rewrite-clj.reader/peek-char","cljs.tools.reader.reader-types/peek-char","rewrite-clj.reader/indexing-push-back-reader","cljs.tools.reader.reader-types/indexing-push-back-reader","rewrite-clj.reader/unread","cljs.tools.reader.reader-types/unread","rewrite-clj.reader/read-string","cljs.tools.reader/read-string","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","rewrite-clj.reader/throw-reader","argseq__4648__auto__","cljs.core/first","seq20930","cljs.core/next","self__4628__auto__","G__20931","G__20932","reader","js/Error","data","fmt","l","c","rewrite-clj.reader/boundary?","rewrite-clj.reader/whitespace?","ch","rewrite-clj.reader/linebreak?","rewrite-clj.reader/space?","rewrite-clj.reader/whitespace-or-boundary?","rewrite-clj.reader/buf","goog.string/StringBuffer","G__20940","rewrite-clj.reader/read-while","rewrite_clj.reader.read_while.cljs$core$IFn$_invoke$arity$3","p?","cljs.core/not","temp__5455__auto__","eof?","rewrite-clj.reader/read-until","cljs.core/complement","rewrite-clj.reader/read-include-linebreak","p1__20944#","rewrite-clj.reader/string->edn","s","rewrite-clj.reader/ignore","rewrite-clj.reader/next","rewrite-clj.reader/peek","rewrite-clj.reader/read-with-meta","read-fn","entry","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","end-col","col","row","end-row","rewrite-clj.reader/read-repeatedly","cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","rewrite-clj.reader/read-n","n","v","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","vs","rewrite_clj.reader.throw_reader.cljs$core$IFn$_invoke$arity$variadic","node-tag","rewrite-clj.reader/re-matches*","re","matches","rewrite-clj.reader/read-keyword","cljs.tools.reader/read-token","cljs.core/re-pattern","tok","a","ns","name","token","cljs.tools.reader.impl.errors.reader_error.cljs$core$IFn$_invoke$arity$variadic","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1"]}