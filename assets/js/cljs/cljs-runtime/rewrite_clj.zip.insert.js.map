{"version":3,"sources":["rewrite_clj/zip/insert.cljs"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.insert\n  (:require [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.whitespace :as ws]\n            [rewrite-clj.node :as node]\n            [clojure.zip :as z]))\n\n(def ^:private space\n  (node/spaces 1))\n\n(defn- insert\n  \"Generic insertion helper. If the node reached by `move-fn`\n   is a whitespace, insert an additional space.\"\n  [move-fn insert-fn prefix zloc item]\n  (let [item-node (node/coerce item)\n        next-node (move-fn zloc)]\n    (->> (if (or (not next-node) (ws/whitespace? next-node))\n           (concat [item-node] prefix)\n           (concat [space item-node] prefix))\n         (reduce insert-fn zloc))))\n\n(defn insert-right\n  \"Insert item to the right of the current location. Will insert a space if necessary.\"\n  [zloc item]\n  (insert\n    z/right\n    z/insert-right\n    [space]\n    zloc item))\n\n(defn insert-left\n  \"Insert item to the right of the left location. Will insert a space if necessary.\"\n  [zloc item]\n  (insert\n    z/left\n    z/insert-left\n    [space]\n    zloc item))\n\n(defn insert-child\n  \"Insert item as first child of the current node. Will insert a space if necessary.\"\n  [zloc item]\n  (insert\n    z/down\n    z/insert-child\n    []\n    zloc item))\n\n(defn append-child\n  \"Insert item as last child of the current node. Will insert a space if necessary.\"\n  [zloc item]\n  (insert\n    #(some-> % z/down z/rightmost)\n    z/append-child\n    []\n    zloc item))\n"],"mappings":";;;;;;AAMA,AAAeA,AACb,AAAA,AAAA,AAACC,AAAAA,AAAAA;AAEH;;;;AAAA,AAAOC,AAGJ,AAAQ,AAAU,AAAO,AAAK;AAHjC,AAIE,AAAM,AAAU,AAACC,AAAAA,AAAAA,AAAYC,AAAAA;AACvB,AAAU,AAACC,AAAAA,AAAAA,AAAQC,AAAAA;AADzB,AAEO,AAAI,AAAA,AAAI,AAACE,AAAIC,AAGb,AAACK,AAAOC,AAAUT;AAHd,AAAA,AAAAC;AAAAA;;AAAoB,AAACG,AAAeD;;AACtC,AAAA,AAACE,AAAQC,AAAWC,AACpB,AAAA,AAACF,AAAQX,AAAMY,AAAWC;;AAGrC;;;AAAA,AAAMG,AAEH,AAAK;AAFR,AAGE,AAAA,AAACd,AACCe,AACAC,AACClB,AACDM,AAAKF;;AAET;;;AAAA,AAAMe,AAEH,AAAK;AAFR,AAGE,AAAA,AAACjB,AACCkB,AACAC,AACCrB,AACDM,AAAKF;;AAET;;;AAAA,AAAMkB,AAEH,AAAK;AAFR,AAGE,AAAA,AAACpB,AACCqB,AACAC,AAEAlB,AAAKF;;AAET;;;AAAA,AAAMqB,AAEH,AAAK;AAFR,AAGE,AAAA,AAAA,AAACvB;AAAD,AACG,AAAA,AAAAwB;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAA,AAAUJ;AAAV,AAAA,AAAA,AAAAI,AAAA;AAAA;;AAAA,AAAAA,AAAiBC;;AADpB,AAEEC,AAEAvB,AAAKF","names":["rewrite-clj.zip.insert/space","rewrite-clj.node/spaces","rewrite-clj.zip.insert/insert","rewrite-clj.node/coerce","item","move-fn","zloc","or__4047__auto__","cljs.core/not","next-node","rewrite-clj.zip.whitespace/whitespace?","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","item-node","prefix","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","insert-fn","rewrite-clj.zip.insert/insert-right","clojure.zip/right","clojure.zip/insert-right","rewrite-clj.zip.insert/insert-left","clojure.zip/left","clojure.zip/insert-left","rewrite-clj.zip.insert/insert-child","clojure.zip/down","clojure.zip/insert-child","rewrite-clj.zip.insert/append-child","p1__21283#","G__21284","clojure.zip/rightmost","clojure.zip/append-child"]}