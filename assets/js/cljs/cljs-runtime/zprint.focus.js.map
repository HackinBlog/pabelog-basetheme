{"version":3,"sources":["zprint/focus.cljc"],"sourcesContent":["(ns ^:no-doc zprint.focus\n  (:require [clojure.string :as s]\n            [zprint.ansi :refer [color-str]]))\n\n;;\n;; # Find focus in a style-vec\n;;\n\n(defn type-ssv\n  \"What is this element in a str-style-vec?\"\n  [ssv-element]\n  (nth ssv-element 2 :whitespace))\n\n(defn skip-whitespace-ssv\n  \"Skip any whitespace in this ssv starting at n. Whitespace is :whitespace\n  and :indent\"\n  [ssv n]\n  #_(println \"skip-whitespace: n:\" n)\n  (loop [index n]\n    #_(println \"skip-whitespace: loop index:\" index)\n    (if (>= index (count ssv))\n      (dec index)\n      (if (not (or (= (type-ssv (nth ssv index)) :whitespace)\n                   (= (type-ssv (nth ssv index)) :indent)))\n        index\n        (recur (inc index))))))\n\n(defn down-ssv\n  \"Given a str-style-vec, move into a collection at element n.\"\n  [ssv n]\n  (let [non-ws-n (skip-whitespace-ssv ssv n)]\n    (when (= (type-ssv (nth ssv non-ws-n)) :left) (inc non-ws-n))))\n\n(defn next-ssv\n  \"Given a str-style-vec, move to the next element beyond this\n  one.  This will skip over entire collections, if there are any.\n  It will also ignore :whitespace elements.\"\n  [ssv n]\n  #_(println \"next-ssv: n:\" n \"count ssv:\" (count ssv))\n  (loop [index n\n         skip-to-right? nil\n         next-nonws? nil]\n    #_(println \"next-ssv: loop index:\" index)\n    (if (>= index (count ssv))\n      nil\n      (let [index-type (type-ssv (nth ssv index))\n            new-next-nonws? (and (or (not skip-to-right?) (= index-type :right))\n                                 (not= index-type :left)\n                                 (not= index-type :whitespace)\n                                 (not= index-type :indent))]\n        #_(println \"next-ssv: index:\" index\n                   \"skip-to-right?\" skip-to-right?\n                   \"next-nonws?\" next-nonws?\n                   \"index-type:\" index-type\n                   \"new-next-nonws?\" new-next-nonws?)\n        (if next-nonws?\n          index\n          (recur (if (and (= index-type :left) skip-to-right?)\n                   (next-ssv ssv index)\n                   (inc index))\n                 (and (or (= index-type :left) skip-to-right?)\n                      (not= index-type :right))\n                 new-next-nonws?))))))\n\n(defn right-ssv\n  \"Given a str-style-vec, move right nr elements.\"\n  [nr ssv n]\n  #_(println \"right-ssv: nr:\" nr \"n:\" n)\n  (loop [index n\n         moves nr]\n    #_(println \"right-ssv: loop index:\" index \"moves:\" moves)\n    (when index\n      (if (zero? moves)\n        (when index (skip-whitespace-ssv ssv index))\n        (recur (next-ssv ssv index) (dec moves))))))\n\n(defn path-ssv\n  \"Given a non-whitespace path from a zipper, find that same\n  collection or element in a str-style-vec.\"\n  [nwpath ssv]\n  (loop [idx 0\n         nwp nwpath]\n    (when idx\n      (if (empty? nwp)\n        idx\n        (recur (right-ssv (first nwp) ssv (down-ssv ssv idx)) (next nwp))))))\n\n(defn range-ssv\n  \"Use a non-whitespace path from a zipper, and find that\n  same collection or element in a str-style-vec, and return\n  a vector of the start and end of that collection or element.\n  Depends on next-ssv returning one past the end of its input.\"\n  [ssv nwpath]\n  #_(def rssv ssv)\n  #_(prn \"range-ssv: nwpath:\" nwpath \"ssv:\\n\" ssv)\n  (let [start (path-ssv nwpath ssv)\n        #_(println \"range-ssv: start:\" start \"nwpath:\" nwpath)\n        start (skip-whitespace-ssv ssv start)\n        ssv-next (next-ssv ssv start)\n        end (if (and ssv-next (not= start 0))\n              ((fnil dec 1) ssv-next)\n              (dec (count ssv)))]\n    #_(println \"range-ssv:\" [start end])\n    [start end]))"],"mappings":";;;;AAQA;;;AAAA,AAAMA,AAEH;AAFH,AAGE,AAAA,AAAA,AAACC,AAAIC;;AAEP;;;;AAAA,AAAMC,AAGH,AAAI;AAHP,AAKE,AAAO,AAAMC;;AAAb,AAEE,AAAI,AAAIC,AAAM,AAACC,AAAMC;AACnB,AAAA,AAAKF;;AACL,AAAI,AAAK,AAAI,AAAA,AAACG,AAAE,AAACR,AAAS,AAACS,AAAIF,AAAIF,AACtB,AAAA,AAACG,AAAE,AAACR,AAAS,AAACS,AAAIF,AAAIF;AACjCA;;AACA,AAAO,AAAA,AAAKA;;;;;;;;AAEpB;;;AAAA,AAAMK,AAEH,AAAI;AAFP,AAGE,AAAM,AAAS,AAACP,AAAoBI,AAAIH;AAAxC,AACE,AAAM,AAAA,AAACI,AAAE,AAACR,AAAS,AAACS,AAAIF,AAAII;AAA5B,AAA8C,AAAA,AAAKA;;AAAnD;;;AAEJ;;;;;AAAA,AAAMC,AAIH,AAAI;AAJP,AAME,AAAO,AAAMR;AAAb,AACO;AADP,AAEO;;AAFP,AAIE,AAAI,AAAIC,AAAM,AAACC,AAAMC;AAArB;;AAEE,AAAM,AAAW,AAACP,AAAS,AAACS,AAAIF,AAAIF;AAC9B,AAAgB,AAAK,AAAI,AAACQ,AAAIC,AAAgB,AAAA,AAACN,AAAEO,AAC5B,AAAA,AAACC,AAAKD,AACN,AAAA,AAACC,AAAKD,AACN,AAAA,AAACC,AAAKD;AAJjC,AAUE,AAAIE;AACFZ;;AACA,AAAO,AAAI,AAAA,AAAK,AAAA,AAACG,AAAEO;AAAR,AAAA,AAAAG;AAA0BJ;;AAA1BI;;AACF,AAACN,AAAAA,AAAAA,AAASL,AAAAA,AAAIF,AAAAA,AACd,AAAA,AAAKA;AACP,AAAA,AAAK,AAAA,AAAI,AAAA,AAACG,AAAEO;AAAP,AAAA,AAAAI;AAAAA;;AAAyBL;;;AAA9B,AAAA,AAAAI;AACK,AAAA,AAACF,AAAKD;;AADXG;;;AAEAE;;;;;;;;;;AAEjB;;;AAAA,AAAMC,AAEH,AAAG,AAAI;AAFV,AAIE,AAAO,AAAMjB;AACN,AAAMkB;;AADb,AAGE,AAAMjB;AAAN,AACE,AAAI,AAAA,AAAOkB;AACT,AAAMlB;AAAN,AAAY,AAACF,AAAoBI,AAAIF;;AAArC;;;AACA,AAAO,AAACO,AAASL,AAAIF;AAAO,AAAA,AAAKkB;;;;;;AAHrC;;;;;AAKJ;;;;AAAA,AAAMC,AAGH,AAAO;AAHV,AAIE,AAAA,AAAO;AACA,AAAIC;;AADX,AAEE,AAAMC;AAAN,AACE,AAAI,AAACC,AAAOC;AACVF;;AACA,AAAO,AAACL,AAAU,AAACQ,AAAMD,AAAKrB,AAAI,AAACG,AAASH,AAAImB;AAAM,AAACI,AAAKF;;;;;;AAHhE;;;;;AAKJ;;;;;;AAAA,AAAMG,AAKH,AAAI;AALP,AAQE,AAAM,AAAM,AAACP,AAASC,AAAOlB;AAEvB,AAAM,AAACJ,AAAoBI,AAAIyB;AAC/B,AAAS,AAACpB,AAASL,AAAIyB;AACvB,AAAI,AAAI,AAAA,AAAKC;AAAL,AAAA,AAAAf;AAAc,AAAA,AAACF,AAAKgB;;AAApBd;;AACF,AAAA,AAAC,AAAA,AAACiB,AAAKC;AAAP,AAAA,AAAAF,AAAAA,AAAAA,AAAcD,AAAAA;AACd,AAAA,AAAK,AAAC3B,AAAMC;AANxB,AAAA,AAQGyB,AAAMK","names":["zprint.focus/type-ssv","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","ssv-element","zprint.focus/skip-whitespace-ssv","n","index","cljs.core/count","ssv","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","zprint.focus/down-ssv","non-ws-n","zprint.focus/next-ssv","cljs.core/not","skip-to-right?","index-type","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","next-nonws?","and__4036__auto__","or__4047__auto__","new-next-nonws?","zprint.focus/right-ssv","nr","moves","zprint.focus/path-ssv","nwpath","idx","cljs.core/empty?","nwp","cljs.core/first","cljs.core/next","zprint.focus/range-ssv","start","ssv-next","fexpr__21509","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/dec","end"]}