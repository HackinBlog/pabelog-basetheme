{"version":3,"sources":["day8/re_frame_10x/events.cljs"],"sourcesContent":["(ns day8.re-frame-10x.events\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core :as rf]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.core :as r]\n            [cljs.tools.reader.edn]\n            [day8.re-frame-10x.utils.utils :as utils :refer [spy]]\n            [day8.re-frame-10x.utils.localstorage :as localstorage]\n            [reagent.impl.batching :as batching]\n            [clojure.string :as str]\n            [goog.object]\n            [goog.string]\n            [re-frame.db]\n            [re-frame.interop]\n            [re-frame.core]\n            [re-frame.trace]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.styles :as styles]\n            [clojure.set :as set]\n            [day8.re-frame-10x.metamorphic :as metam]))\n\n(defn fixed-after\n  ;; Waiting on https://github.com/Day8/re-frame/issues/447\n  [f]\n  (rf/->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (:effects context) :db)\n                           (get-in context [:effects :db])\n                           (get-in context [:coeffects :db]))\n                   event (get-in context [:coeffects :event])]\n               (f db event)                                 ;; call f for side effects\n               context))))                                  ;; context is unchanged\n\n(defn log-trace? [trace]\n  (let [render-operation? (or (= (:op-type trace) :render)\n                              (= (:op-type trace) :componentWillUnmount))\n        component-path    (get-in trace [:tags :component-path] \"\")]\n    (if-not render-operation?\n      true\n      (not (str/includes? component-path \"devtools outer\")))))\n\n(defn disable-tracing! []\n  (re-frame.trace/remove-trace-cb ::cb))\n\n(defn enable-tracing! []\n  (re-frame.trace/register-trace-cb ::cb #(rf/dispatch [:epochs/receive-new-traces %])))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\"\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (clojure.core/get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn read-string-maybe [s]\n  (try (cljs.tools.reader.edn/read-string {:readers utils/default-readers} s)\n       (catch :default e\n         nil)))\n\n(rf/reg-event-db\n  :settings/panel-width%\n  (fn [db [_ width%]]\n    (localstorage/save! \"panel-width-ratio\" (max width% 0.05))\n    (assoc-in db [:settings :panel-width%] (max width% 0.05))))\n\n(rf/reg-event-db\n  :settings/window-width\n  (fn [db [_ width]]\n    (assoc-in db [:settings :window-width] width)))\n\n(rf/reg-event-db\n  :settings/selected-tab\n  (fn [db [_ selected-tab]]\n    (localstorage/save! \"selected-tab\" selected-tab)\n    (assoc-in db [:settings :selected-tab] selected-tab)))\n\n(rf/reg-event-db\n  :settings/toggle-settings\n  (fn [db _]\n    (update-in db [:settings :showing-settings?] not)))\n\n(rf/reg-event-db\n  :settings/show-panel?\n  (fn [db [_ show-panel?]]\n    (localstorage/save! \"show-panel\" show-panel?)\n    (assoc-in db [:settings :show-panel?] show-panel?)))\n\n(rf/reg-event-db\n  :settings/factory-reset\n  (fn [db _]\n    (localstorage/delete-all-keys!)\n    (js/location.reload)\n    db))\n\n(rf/reg-event-db\n  :settings/user-toggle-panel\n  (fn [db _]\n    (let [now-showing?    (not (get-in db [:settings :show-panel?]))\n          external-panel? (get-in db [:settings :external-window?])\n          using-trace?    (or external-panel? now-showing?)]\n      (if now-showing?\n        (enable-tracing!)\n        (when-not external-panel?\n          (disable-tracing!)))\n      (localstorage/save! \"using-trace?\" using-trace?)\n      (localstorage/save! \"show-panel\" now-showing?)\n      (-> db\n          (assoc-in [:settings :using-trace?] using-trace?)\n          (assoc-in [:settings :show-panel?] now-showing?)))))\n\n(rf/reg-event-db\n  :settings/set-number-of-retained-epochs\n  (fn [db [_ num-str]]\n    ;; TODO: this is not perfect, there is an issue in re-com\n    ;; where it won't update its model if it never receives another\n    ;; changes after it's on-change is fired.\n    ;; TODO: you could reset the stored epochs on change here\n    ;; once the way they are processed is refactored.\n    (let [num (js/parseInt num-str)\n          num (if (and (not (js/isNaN num)) (pos-int? num))\n                num\n                5)]\n      (localstorage/save! \"retained-epochs\" num)\n      (assoc-in db [:settings :number-of-epochs] num))))\n\n(def ignored-event-mw\n  [(rf/path [:settings :ignored-events]) (fixed-after #(localstorage/save! \"ignored-events\" %))])\n\n(rf/reg-event-db\n  :settings/add-ignored-event\n  ignored-event-mw\n  (fn [ignored-events _]\n    (let [id (random-uuid)]\n      (assoc ignored-events id {:id id :event-str \"\" :event-id nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id]]\n    (dissoc ignored-events id)))\n\n(rf/reg-event-db\n  :settings/update-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id event-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe event-str)]\n      (-> ignored-events\n          (assoc-in [id :event-str] event-str)\n          (update-in [id :event-id] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-ignored-events\n  ignored-event-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def filtered-view-trace-mw\n  [(rf/path [:settings :filtered-view-trace]) (fixed-after #(localstorage/save! \"filtered-view-trace\" %))])\n\n(rf/reg-event-db\n  :settings/add-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace _]\n    (let [id (random-uuid)]\n      (assoc filtered-view-trace id {:id id :ns-str \"\" :ns nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id]]\n    (dissoc filtered-view-trace id)))\n\n(rf/reg-event-db\n  :settings/update-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id ns-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe ns-str)]\n      (-> filtered-view-trace\n          (assoc-in [id :ns-str] ns-str)\n          (update-in [id :ns] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def low-level-trace-mw [(rf/path [:settings :low-level-trace]) (fixed-after #(localstorage/save! \"low-level-trace\" %))])\n\n(rf/reg-event-db\n  :settings/set-low-level-trace\n  low-level-trace-mw\n  (fn [_ [_ low-level]]\n    low-level))\n\n(rf/reg-event-db\n  :settings/low-level-trace\n  low-level-trace-mw\n  (fn [low-level [_ trace-type capture?]]\n    (assoc low-level trace-type capture?)))\n\n(rf/reg-event-db\n  :settings/debug?\n  (fn [db [_ debug?]]\n    (assoc-in db [:settings :debug?] debug?)))\n\n(rf/reg-event-db\n  :settings/app-db-follows-events?\n  [(rf/path [:settings :app-db-follows-events?]) (fixed-after #(localstorage/save! \"app-db-follows-events?\" %))]\n  (fn [db [_ follows-events?]]\n    follows-events?))\n\n;; Global\n\n(defn mount [popup-window popup-document]\n  ;; When programming here, we need to be careful about which document and window\n  ;; we are operating on, and keep in mind that the window can close without going\n  ;; through standard react lifecycle, so we hook the beforeunload event.\n  (let [app                      (.getElementById popup-document \"--re-frame-10x--\")\n        resize-update-scheduled? (atom false)\n        handle-window-resize     (fn [e]\n                                   (when-not @resize-update-scheduled?\n                                     (batching/next-tick\n                                       (fn []\n                                         (let [width  (.-innerWidth popup-window)\n                                               height (.-innerHeight popup-window)]\n                                           (rf/dispatch [:settings/external-window-resize {:width width :height height}]))\n                                         (reset! resize-update-scheduled? false)))\n                                     (reset! resize-update-scheduled? true)))\n        handle-window-position   (let [pos (atom {})]\n                                   (fn []\n                                     ;; Only update re-frame if the windows position has changed.\n                                     (let [{:keys [left top]} @pos\n                                           screen-left (.-screenX popup-window)\n                                           screen-top  (.-screenY popup-window)]\n                                       (when (or (not= left screen-left)\n                                                 (not= top screen-top))\n                                         (rf/dispatch [:settings/external-window-position {:left screen-left :top screen-top}])\n                                         (reset! pos {:left screen-left :top screen-top})))))\n        window-position-interval (atom nil)\n        unmount                  (fn [_]\n                                   (.removeEventListener popup-window \"resize\" handle-window-resize)\n                                   (some-> @window-position-interval js/clearInterval)\n                                   nil)]\n\n\n    (styles/inject-trace-styles popup-document)\n    (goog.object/set popup-window \"onunload\" #(rf/dispatch [:global/external-closed]))\n    (r/render\n      [(r/create-class\n         {:display-name           \"devtools outer external\"\n          :component-did-mount    (fn []\n                                    (.addEventListener popup-window \"resize\" handle-window-resize)\n                                    (.addEventListener popup-window \"beforeunload\" unmount)\n                                    ;; Check the window position every 10 seconds\n                                    (reset! window-position-interval\n                                            (js/setInterval\n                                              handle-window-position\n                                              2000)))\n          :component-will-unmount unmount\n          :reagent-render         (fn [] [container/devtools-inner {:panel-type :popup}])})]\n      app)))\n\n(defn open-debugger-window\n  \"Originally copied from re-frisk.devtool/open-debugger-window\"\n  [{:keys [width height top left] :as dimensions}]\n  (let [doc-title        js/document.title\n        new-window-title (goog.string/escapeString (str \"re-frame-10x | \" doc-title))\n        new-window-html  (str \"<head><title>\"\n                              new-window-title\n                              \"</title></head><body style=\\\"margin: 0px;\\\"><div id=\\\"--re-frame-10x--\\\" class=\\\"external-window\\\"></div></body>\")]\n    ;; We would like to set the windows left and top positions to match the monitor that it was on previously, but Chrome doesn't give us\n    ;; control over this, it will only position it within the same display that it was popped out on.\n    (if-let [w (js/window.open \"about:blank\" \"re-frame-10x-popout\"\n                               (str \"width=\" width \",height=\" height \",left=\" left \",top=\" top\n                                    \",resizable=yes,scrollbars=yes,status=no,directories=no,toolbar=no,menubar=no\"))]\n      (let [d (.-document w)]\n        (when-let [el (.getElementById d \"--re-frame-10x--\")]\n          (r/unmount-component-at-node el))\n        (.open d)\n        (.write d new-window-html)\n        (goog.object/set w \"onload\" #(mount w d))\n        (.close d)\n        true)\n      false)))\n\n(rf/reg-event-fx\n  :global/launch-external\n  (fn [ctx _]\n    (if (open-debugger-window (get-in ctx [:db :settings :external-window-dimensions]))\n      (do\n        (localstorage/save! \"external-window?\" true)\n        {:db             (-> (:db ctx)\n                             (assoc-in [:settings :external-window?] true)\n                             (dissoc-in [:errors :popup-failed?]))\n         :dispatch-later [{:ms 200 :dispatch [:settings/show-panel? false]}]})\n      {:db (assoc-in (:db ctx) [:errors :popup-failed?] true)\n       :dispatch [:global/external-closed]})))\n\n(rf/reg-event-fx\n  :global/external-closed\n  (fn [ctx _]\n    (localstorage/save! \"external-window?\" false)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] false)\n     :dispatch-later [{:ms 400 :dispatch [:settings/show-panel? true]}]}))\n\n(rf/reg-event-db\n  :settings/external-window-dimensions\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ new-dim]]\n    new-dim))\n\n(rf/reg-event-db\n  :settings/external-window-resize\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {width :width height :height}]]\n    (assoc dim :width width :height height)))\n\n(rf/reg-event-db\n  :settings/external-window-position\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {left :left top :top}]]\n    (assoc dim :left left :top top)))\n\n(rf/reg-event-fx\n  :global/enable-tracing\n  (fn [ctx _]\n    (enable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/disable-tracing\n  (fn [ctx _]\n    (disable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/add-unload-hook\n  (fn [_ _]\n    (js/window.addEventListener \"beforeunload\" #(rf/dispatch-sync [:global/unloading? true]))\n    nil))\n\n(rf/reg-event-db\n  :global/unloading?\n  (fn [db [_ unloading?]]\n    (assoc-in db [:global :unloading?] unloading?)))\n\n;; Traces\n\n(defn save-filter-items [filter-items]\n  (localstorage/save! \"filter-items\" filter-items))\n\n(rf/reg-event-db\n  :traces/filter-items\n  (fn [db [_ filter-items]]\n    (save-filter-items filter-items)\n    (assoc-in db [:traces :filter-items] filter-items)))\n\n(rf/reg-event-db\n  :traces/add-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-input filter-type]]\n    (let [new-db (when-not (some #(= filter-input (:query %)) filter-items) ;; prevent duplicate filter strings\n                   ;; if existing, remove prior filter for :slower-than\n                   ;; TODO: rework how time filters are used.\n                   (let [filter-items (if (and (= :slower-than filter-type)\n                                               (some #(= filter-type (:filter-type %)) filter-items))\n                                        (remove #(= :slower-than (:filter-type %)) filter-items)\n                                        filter-items)]\n                     ;; add new filter\n                     (conj filter-items {:id          (random-uuid)\n                                         :query       (if (= filter-type :contains)\n                                                        (str/lower-case filter-input)\n                                                        (js/parseFloat filter-input))\n                                         :filter-type filter-type})))]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/remove-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-id]]\n    (let [new-db (remove #(= (:id %) filter-id) filter-items)]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/reset-filter-items\n  (fn [db _]\n    (let [new-db (dissoc-in db [:traces :filter-items])]\n      (save-filter-items (get-in new-db [:traces :filter-items]))\n      new-db)))\n\n(rf/reg-event-db\n  :traces/toggle-all-expansions\n  [(rf/path [:traces :expansions])]\n  (fn [trace-detail-expansions _]\n    (-> trace-detail-expansions\n        (assoc :overrides {})\n        (update :show-all? not))))\n\n(rf/reg-event-db\n  :traces/toggle-trace\n  [(rf/path [:traces :expansions])]\n  (fn [expansions [_ id]]\n    (let [showing? (get-in expansions [:overrides id] (:show-all? expansions))]\n      (update-in expansions [:overrides id] #(if showing? false (not %))))))\n\n(rf/reg-event-db\n  :traces/toggle-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    (let [new-categories (if (set/superset? categories new-categories)\n                           (set/difference categories new-categories)\n                           (set/union categories new-categories))]\n      (localstorage/save! \"categories\" new-categories)\n      new-categories)))\n\n(rf/reg-event-db\n  :traces/set-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    new-categories))\n\n\n(rf/reg-event-db\n  :trace-panel/update-show-epoch-traces?\n  [(rf/path [:trace-panel :show-epoch-traces?]) (fixed-after #(localstorage/save! \"show-epoch-traces?\" %))]\n  (fn [_ [k show-epoch-traces?]]\n    show-epoch-traces?))\n\n;; App DB\n\n(def app-db-path-mw\n  [(rf/path [:app-db :paths]) (fixed-after #(localstorage/save! \"app-db-paths\" %))])\n\n(rf/reg-event-db\n  :app-db/create-path\n  app-db-path-mw\n  (fn [paths _]\n\n    (assoc paths (js/Date.now) {:diff? false :open? true :path nil :path-str \"\" :valid-path? true})))\n\n\n\n;; The core idea with :app-db/update-path and :app-db/update-path-blur\n;; is that we need to separate the users text input (`path-str`) with the\n;; parsing of that string (`path`). We let the user type any string that\n;; they like, and check it for validity on each change. If it is valid\n;; then we update `path` and mark the pod as valid. If it isn't valid then\n;; we don't update `path` and mark the pod as invalid.\n;;\n;; On blur of the input, we reset path-str to the last valid path, if\n;; the pod isn't currently valid.\n\n(rf/reg-event-db\n  :app-db/update-path\n  app-db-path-mw\n  (fn [paths [_ path-id path-str]]\n    (let [path  (read-string-maybe path-str)\n          paths (assoc-in paths [path-id :path-str] path-str)]\n      (if (or (and (some? path)\n                   (sequential? path))\n              (str/blank? path-str))\n        (-> paths\n            (assoc-in [path-id :path] path)\n            (assoc-in [path-id :valid-path?] true))\n        (assoc-in paths [path-id :valid-path?] false)))))\n\n(rf/reg-event-db\n  :app-db/update-path-blur\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (let [{:keys [valid-path? path]} (get paths path-id)]\n      (if valid-path?\n        paths\n        (-> (assoc-in paths [path-id :path-str] (pr-str path))\n            (assoc-in [path-id :valid-path?] true))))))\n\n(rf/reg-event-db\n  :app-db/set-path-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id open?]]\n    (assoc-in paths [path-id :open?] open?)))\n\n(rf/reg-event-db\n  :app-db/set-diff-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in paths [path-id :open?]))]\n      (-> paths\n          (assoc-in [path-id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [path-id :open?] open?)))))\n\n(rf/reg-event-db\n  :app-db/remove-path\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (dissoc paths path-id)))\n\n(rf/reg-event-db\n  :app-db/paths\n  app-db-path-mw\n  (fn [db [_ paths]]\n    paths))\n\n#_(rf/reg-event-db\n    :app-db/remove-path\n    (fn [db [_ path]]\n      (let [new-db (update-in db [:app-db :paths] #(remove (fn [p] (= p path)) %))]\n        (localstorage/save! \"app-db-paths\" (get-in new-db [:app-db :paths]))\n        ;; TODO: remove from json-ml expansions too.\n        new-db)))\n\n#_(rf/reg-event-db\n    :app-db/add-path\n    (fn [db _]\n      (let [search-string (get-in db [:app-db :search-string])\n            path          (try\n                            (when-not (str/blank? search-string)\n                              (cljs.reader/read-string (str \"[\" search-string \"]\")))\n                            (catch :default e\n                              nil))]\n        (if (some? path)\n          (do (localstorage/save! \"app-db-paths\" (cons path (get-in db [:app-db :paths])))\n              (rf/dispatch [:app-db/toggle-expansion [path]])\n              (-> db\n                  (update-in [:app-db :paths] #(cons path %))\n                  (assoc-in [:app-db :search-string] \"\")))\n          db))))\n\n(rf/reg-event-db\n  :app-db/search-string\n  (fn [db [_ search-string]]\n    (assoc-in db [:app-db :search-string] search-string)))\n\n(rf/reg-event-db\n  :app-db/set-json-ml-paths\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [db [_ paths]]\n    (localstorage/save! \"app-db-json-ml-expansions\" paths)\n    paths))\n\n(rf/reg-event-db\n  :app-db/toggle-expansion\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [paths [_ path]]\n    (let [new-paths (if (contains? paths path)\n                      (disj paths path)\n                      (conj paths path))]\n      (localstorage/save! \"app-db-json-ml-expansions\" new-paths)\n      new-paths)))\n\n(rf/reg-event-db\n  :app-db/reagent-id\n  [(rf/path [:app-db :reagent-id])]\n  (fn [paths _]\n    (re-frame.interop/reagent-id re-frame.db/app-db)))\n\n(rf/reg-event-db\n  :snapshot/reset-current-epoch-app-db\n  (fn [db [_ new-id]]\n    (when (get-in db [:settings :app-db-follows-events?])\n      (let [epochs   (:epochs db)\n            match-id (or new-id\n                         ;; new-id may be nil when we call this event from :settings/play\n                         (utils/last-in-vec (get epochs :match-ids)))\n            match    (get-in epochs [:matches-by-id match-id])\n            event    (metam/matched-event (:match-info match))]\n        ;; Don't mess up the users app if there is a problem getting app-db-after.\n        (when-some [new-db (metam/app-db-after event)]\n          (reset! re-frame.db/app-db new-db))))\n    db))\n\n;;;\n\n(defn first-match-id\n  [m]\n  (-> m :match-info first :id))\n\n(rf/reg-event-fx\n  :epochs/receive-new-traces\n  (fn [{:keys [db]} [_ new-traces]]\n    (if-let [filtered-traces (->> (filter log-trace? new-traces)\n                                  (sort-by :id))]\n      (let [number-of-epochs-to-retain (get-in db [:settings :number-of-epochs])\n            events-to-ignore           (->> (get-in db [:settings :ignored-events]) vals (map :event-id) set)\n            previous-traces            (get-in db [:traces :all-traces] [])\n            parse-state                (get-in db [:epochs :parse-state] metam/initial-parse-state)\n            {drop-re-frame :re-frame drop-reagent :reagent} (get-in db [:settings :low-level-trace])\n            all-traces                 (reduce conj previous-traces filtered-traces)\n            parse-state                (metam/parse-traces parse-state filtered-traces)\n            ;; TODO:!!!!!!!!!!!!! We should be parsing everything else with the traces that span the newly matched\n            ;; epochs, not the filtered-traces, as these are only partial.\n            new-matches                (:partitions parse-state)\n            previous-matches           (get-in db [:epochs :matches] [])\n            parse-state                (assoc parse-state :partitions []) ;; Remove matches we know about\n            new-matches                (remove (fn [match]\n                                                 (let [event (get-in (metam/matched-event match) [:tags :event])]\n                                                   (contains? events-to-ignore (first event)))) new-matches)\n            ;; subscription-info is calculated separately from subscription-match-state because they serve different purposes:\n            ;; - subscription-info collects all the data that we know about the subscription itself, like its layer, inputs and other\n            ;;   things that are defined as part of the reg-sub.\n            ;; - subscription-match-state collects all the data that we know about the state of specific instances of subscriptions\n            ;;   like its reagent id, when it was created, run, disposed, what values it returned, e.t.c.\n            subscription-info          (metam/subscription-info (get-in db [:epochs :subscription-info] {}) filtered-traces (get-in db [:app-db :reagent-id]))\n            sub-state                  (get-in db [:epochs :sub-state] metam/initial-sub-state)\n            subscription-match-state   (metam/subscription-match-state sub-state all-traces new-matches)\n            subscription-matches       (rest subscription-match-state)\n\n            new-sub-state              (last subscription-match-state)\n            timing                     (mapv (fn [match]\n                                               (let [epoch-traces        (into []\n                                                                               (comp\n                                                                                 (utils/id-between-xf (:id (first match)) (:id (last match))))\n                                                                               all-traces)\n                                                     ;; TODO: handle case when there are no epoch-traces\n                                                     start-of-epoch      (nth epoch-traces 0)\n                                                     ;; TODO: optimise trace searching\n                                                     event-handler-trace (first (filter metam/event-handler? epoch-traces))\n                                                     dofx-trace          (first (filter metam/event-dofx? epoch-traces))\n                                                     event-trace         (first (filter metam/event-run? epoch-traces))\n                                                     finish-run          (or (first (filter metam/finish-run? epoch-traces))\n                                                                             (utils/last-in-vec epoch-traces))]\n                                                 {:re-frame/event-run-time     (metam/elapsed-time start-of-epoch finish-run)\n                                                  :re-frame/event-time         (:duration event-trace)\n                                                  :re-frame/event-handler-time (:duration event-handler-trace)\n                                                  :re-frame/event-dofx-time    (:duration dofx-trace)}))\n                                             new-matches)\n\n            new-matches                (map (fn [match sub-match t] {:match-info match\n                                                                     :sub-state  sub-match\n                                                                     :timing     t})\n                                            new-matches subscription-matches timing)\n            ;; If there are new matches found, then by definition, a quiescent trace must have been received\n            ;; However in cases where we reset the db in a replay, we won't get an event match.\n            ;; We short circuit here to avoid iterating over the traces when it's unnecessary.\n            quiescent?                 (or (seq new-matches)\n                                           (filter metam/quiescent? filtered-traces))\n            all-matches                (reduce conj previous-matches new-matches)\n            retained-matches           (into [] (take-last number-of-epochs-to-retain all-matches))\n            first-id-to-retain         (first-match-id (first retained-matches))\n            retained-traces            (into [] (comp (drop-while #(< (:id %) first-id-to-retain))\n                                                      (remove (fn [trace]\n                                                                (or (when drop-reagent (metam/low-level-reagent-trace? trace))\n                                                                    (when drop-re-frame (metam/low-level-re-frame-trace? trace)))))) all-traces)]\n        {:db       (-> db\n                       (assoc-in [:traces :all-traces] retained-traces)\n                       (update :epochs (fn [epochs]\n                                         (let [current-index (:current-epoch-index epochs)\n                                               current-id    (:current-epoch-id epochs)]\n                                           (assoc epochs\n                                             :matches retained-matches\n                                             :matches-by-id (into {} (map (juxt first-match-id identity)) retained-matches)\n                                             :match-ids (mapv first-match-id retained-matches)\n                                             :parse-state parse-state\n                                             :sub-state new-sub-state\n                                             :subscription-info subscription-info\n                                             ;; Reset current epoch to the head of the list if we got a new event in.\n                                             :current-epoch-id (if (seq new-matches) nil current-id)\n                                             :current-epoch-index (if (seq new-matches) nil current-index))))))\n         :dispatch (when quiescent? [:epochs/quiescent])})\n      ;; Else\n      {:db db})))\n\n;; TODO: this code is a bit messy, needs refactoring and cleaning up.\n(rf/reg-event-fx\n  :epochs/previous-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (dec match-array-index))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (nth (:match-ids db)\n                        (- (count (:match-ids db)) 2))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/next-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (inc match-array-index))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch   [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (utils/last-in-vec (:match-ids db))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch   [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/most-recent-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    {:db (assoc db :current-epoch-index nil\n                   :current-epoch-id nil)\n     :dispatch [:snapshot/reset-current-epoch-app-db (utils/last-in-vec (:match-ids db))]}))\n\n(rf/reg-event-db\n  :epochs/replay\n  [(rf/path [:epochs])]\n  (fn [epochs _]\n    (let [current-epoch-id (or (get epochs :current-epoch-id)\n                               (utils/last-in-vec (get epochs :match-ids)))\n          event-trace      (-> (get-in epochs [:matches-by-id current-epoch-id :match-info])\n                               (metam/matched-event))\n          app-db-before    (metam/app-db-before event-trace)\n          event            (get-in event-trace [:tags :event])]\n      (reset! re-frame.db/app-db app-db-before)\n      ;; Wait for quiescence\n      (assoc epochs :replay event))))\n\n(rf/reg-event-db\n  :epochs/quiescent\n  [(rf/path [:epochs])]\n  (fn [db _]\n    (if-some [event-to-replay (:replay db)]\n      (do (re-frame.core/dispatch event-to-replay)\n          (dissoc db :replay))\n      db)))\n\n(rf/reg-event-db\n  :epochs/reset\n  (fn [db]\n    (re-frame.trace/reset-tracing!)\n    (dissoc db :epochs :traces)))\n\n;;\n\n(rf/reg-event-db\n  :subs/ignore-unchanged-l2-subs?\n  [(rf/path [:subs :ignore-unchanged-subs?])]\n  (fn [_ [_ ignore?]]\n    ignore?))\n\n(rf/reg-event-db\n  :subs/open-pod?\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id open?]]\n    (assoc-in expansions [id :open?] open?)))\n\n(rf/reg-event-db\n  :subs/set-diff-visibility\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in expansions [id :open?]))]\n      (-> expansions\n          (assoc-in [id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [id :open?] open?)))))\n\n(rf/reg-event-db\n :subs/set-pinned\n [(rf/path [:subs :pinned])]\n (fn [pinned [_ id pinned?]]\n   (assoc-in pinned [id :pin?] pinned?)))\n\n(rf/reg-event-db\n  :subs/set-filter\n  [(rf/path [:subs :filter-str])]\n  (fn [_ [_ filter-value]]\n    filter-value))\n\n;;\n\n(rf/reg-event-db\n  :code/set-code-visibility\n  [(rf/path [:code :code-open?])]\n  (fn [code-open? [_ open?-path open?]]\n    (assoc-in code-open? open?-path open?)))\n\n(rf/reg-event-db\n  :code/hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    new-form))\n\n(rf/reg-event-db\n  :code/exit-hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    (if (= form new-form)\n      nil\n      new-form)))\n\n(rf/reg-event-db\n  :code/set-show-all-code?\n  [(rf/path [:code :show-all-code?])]\n  (fn [_show-all-code? [_ new-show-all-code?]]\n    new-show-all-code?))\n\n(rf/reg-event-db\n  :code/repl-msg-state\n  [(rf/path [:code :repl-msg-state])]\n  (fn [current-state [_ new-state]]\n    (if (and (= current-state :running) (= new-state :start)) ;; Toggles between :running and :re-running to guarantee rerenderig when you continuously call this event\n      :re-running\n      (if (= new-state :start) :running :end))))\n\n;;\n\n(rf/reg-event-db\n  :component/set-direction\n  [(rf/path [:component])]\n  (fn [component [_ new-direction]]\n    (assoc component :direction new-direction)))\n\n;;\n\n(rf/reg-event-db\n  :errors/dismiss-popup-failed\n  [(rf/path [:errors])]\n  (fn [errors _]\n    (dissoc errors :popup-failed?)))\n"],"mappings":"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","names":["day8.re-frame-10x.events/fixed-after","G__24423","G__24424","G__24425","G__24426","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core/->interceptor","cljs.core/contains?","context","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","f","db","event","day8.re-frame-10x.events/log-trace?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","trace","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","render-operation?","clojure.string/includes?","component-path","day8.re-frame-10x.events/disable-tracing!","re-frame.trace/remove-trace-cb","day8.re-frame-10x.events/enable-tracing!","re-frame.trace/register-trace-cb","p1__24452#","G__24462","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core/dispatch","p__24475","cljs.core/seq","vec__24496","cljs.core/first","seq__24497","cljs.core/next","first__24498","day8.re-frame-10x.events/dissoc-in","ks","temp__5455__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","m","k","nextmap","newmap","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.events/read-string-maybe","e24509","cljs.tools.reader.edn.read_string.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.utils.utils/default-readers","s","day8.re_frame_10x.inlined_deps.re_frame.v0v10v6.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__24510","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__24511","day8.re-frame-10x.utils.localstorage/save!","x__4135__auto__","y__4136__auto__","width%","cljs.core/assoc-in","p__24514","vec__24515","width","p__24518","vec__24519","selected-tab","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/not","p__24522","vec__24527","show-panel?","day8.re-frame-10x.utils.localstorage/delete-all-keys!","js/location.reload","or__4047__auto__","external-panel?","now-showing?","using-trace?","p__24568","vec__24569","js/parseInt","num-str","js/isNaN","num","cljs.core/pos-int?","day8.re-frame-10x.events/ignored-event-mw","G__24577","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core/path","p1__24572#","day8.re_frame_10x.inlined_deps.re_frame.v0v10v6.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","cljs.core/random-uuid","ignored-events","id","js/Date.now","p__24586","vec__24587","p__24594","vec__24595","event-str","old-event","p__24610","vec__24613","day8.re-frame-10x.events/filtered-view-trace-mw","G__24617","p1__24616#","filtered-view-trace","p__24626","vec__24627","p__24638","vec__24639","ns-str","p__24642","vec__24643","day8.re-frame-10x.events/low-level-trace-mw","G__24653","p1__24652#","p__24664","vec__24665","low-level","p__24672","vec__24677","trace-type","capture?","p__24680","vec__24681","debug?","G__24685","p1__24684#","p__24698","vec__24703","follows-events?","day8.re-frame-10x.events/mount","popup-document","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","resize-update-scheduled?","G__24718","reagent.impl.batching/next-tick","popup-window","G__24719","height","cljs.core/reset!","map__24724","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","pos","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","left","screen-left","top","screen-top","G__24726","handle-window-resize","G__24727","window-position-interval","js/clearInterval","day8.re-frame-10x.styles/inject-trace-styles","G__24728","G__24729","G__24730","goog.object/set","G__24731","day8.re_frame_10x.inlined_deps.reagent.v0v8v0.reagent.core.render.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.core/create-class","unmount","js/setInterval","handle-window-position","day8.re-frame-10x.view.container/devtools-inner","app","p__24736","map__24741","day8.re-frame-10x.events/open-debugger-window","js/document.title","G__24743","goog.string/escapeString","doc-title","new-window-title","js/window.open","w","temp__5457__auto__","d","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.core/unmount-component-at-node","el","new-window-html","G__24754","G__24755","G__24756","day8.re_frame_10x.inlined_deps.re_frame.v0v10v6.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","ctx","G__24764","G__24765","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core/after","p1__24763#","p__24766","vec__24767","new-dim","G__24775","G__24776","p1__24774#","p__24781","vec__24782","map__24785","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","dim","G__24788","G__24793","p1__24787#","p__24794","vec__24795","map__24798","js/window.addEventListener","G__24803","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core/dispatch-sync","p__24805","vec__24806","unloading?","day8.re-frame-10x.events/save-filter-items","filter-items","p__24815","vec__24816","G__24822","p__24823","vec__24824","cljs.core/some","filter-input","p1__24819#","and__4036__auto__","filter-type","p1__24820#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p1__24821#","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.string/lower-case","js/parseFloat","new-db","G__24832","p__24837","vec__24838","p1__24831#","filter-id","G__24847","trace-detail-expansions","cljs.core.update.cljs$core$IFn$_invoke$arity$3","G__24853","p__24858","vec__24859","expansions","showing?","p1__24852#","G__24866","p__24871","vec__24872","clojure.set/superset?","categories","new-categories","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","clojure.set.union.cljs$core$IFn$_invoke$arity$2","G__24875","p__24876","vec__24877","G__24881","p1__24880#","p__24882","vec__24883","show-epoch-traces?","day8.re-frame-10x.events/app-db-path-mw","G__24887","p1__24886#","paths","p__24888","vec__24889","path-str","path-id","path","cljs.core/sequential?","clojure.string/blank?","p__24892","vec__24893","map__24896","valid-path?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","p__24898","vec__24899","open?","p__24903","vec__24904","diff?","p__24910","vec__24911","p__24915","vec__24916","p__24921","vec__24922","search-string","G__24925","p__24926","vec__24927","G__24930","p__24935","vec__24936","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","new-paths","G__24943","re-frame.interop/reagent-id","re-frame.db/app-db","p__24950","vec__24951","new-id","day8.re-frame-10x.utils.utils/last-in-vec","epochs","match-id","day8.re-frame-10x.metamorphic/matched-event","match","temp__5461__auto__","day8.re-frame-10x.metamorphic/app-db-after","day8.re-frame-10x.events/first-match-id","p__24975","map__24977","p__24976","vec__24978","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","new-traces","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","map__24982","cljs.core/vals","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/set","day8.re-frame-10x.metamorphic/initial-parse-state","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","previous-traces","filtered-traces","day8.re-frame-10x.metamorphic/parse-traces","parse-state","events-to-ignore","new-matches","day8.re-frame-10x.metamorphic/subscription-info","day8.re-frame-10x.metamorphic/initial-sub-state","day8.re-frame-10x.metamorphic/subscription-match-state","sub-state","all-traces","cljs.core/rest","subscription-match-state","cljs.core/last","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.utils.utils/id-between-xf","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","epoch-traces","day8.re-frame-10x.metamorphic/event-handler?","day8.re-frame-10x.metamorphic/event-dofx?","day8.re-frame-10x.metamorphic/event-run?","day8.re-frame-10x.metamorphic/finish-run?","day8.re-frame-10x.metamorphic/elapsed-time","start-of-epoch","finish-run","event-trace","event-handler-trace","dofx-trace","cljs.core.map.cljs$core$IFn$_invoke$arity$4","sub-match","t","subscription-matches","timing","day8.re-frame-10x.metamorphic/quiescent?","previous-matches","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/take-last","number-of-epochs-to-retain","all-matches","retained-matches","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1","p1__24974#","first-id-to-retain","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","drop-reagent","day8.re-frame-10x.metamorphic/low-level-reagent-trace?","drop-re-frame","day8.re-frame-10x.metamorphic/low-level-re-frame-trace?","retained-traces","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","new-sub-state","subscription-info","current-id","current-index","quiescent?","day8.re_frame_10x.inlined_deps.re_frame.v0v10v6.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","G__25026","p__25027","map__25028","temp__5459__auto__","day8.re-frame-10x.utils.utils/find-index-in-vec","x","match-ids","match-array-index","cljs.core/count","G__25046","p__25051","map__25052","G__25066","p__25069","map__25070","G__25076","current-epoch-id","day8.re-frame-10x.metamorphic/app-db-before","app-db-before","G__25077","re-frame.core/dispatch","event-to-replay","re-frame.trace/reset-tracing!","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__25078","p__25079","vec__25082","ignore?","G__25089","p__25090","vec__25091","G__25094","p__25095","vec__25096","G__25099","p__25100","vec__25101","pinned","pinned?","G__25104","p__25105","vec__25106","filter-value","G__25109","p__25110","vec__25111","code-open?","open?-path","G__25114","p__25115","vec__25116","new-form","G__25119","p__25120","vec__25121","form","G__25124","p__25125","vec__25126","new-show-all-code?","G__25129","p__25130","vec__25131","current-state","new-state","G__25134","p__25135","vec__25136","component","new-direction","G__25139","errors"]}