{"version":3,"sources":["zprint/sutil.cljc"],"sourcesContent":["(ns ^:no-doc zprint.sutil\n  (:require clojure.string\n            #?@(:clj [[zprint.macros :refer [do-redef-vars]]])\n            zprint.zfns\n            #?@(:clj [[zprint.redef]])\n            #?@(:cljs [[cljs.reader :refer [read-string]]])))\n\n;;\n;; # Sexpression functions, see map at the end\n;;\n\n(defn sstring \"The string value of this sexpr.\" [sexpr] (pr-str sexpr))\n\n;;\n;; Pure clojure hex conversion.\n;;\n\n#?(:clj\n     (do\n       (def hexseq\n         [\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"])\n       (def hexbyte\n         (vec (map #(str (nth hexseq (bit-shift-right (bit-and % 240) 4))\n                         (nth hexseq (bit-and % 15)))\n                (range 256))))\n       (defn hexadj [b] (if (< b 0) (+ b 256) b))\n       (defn hex-byte\n         \"Turn the low byte of a number into hex\"\n         [n]\n         (nth hexbyte (hexadj (bit-and n 255))))\n       (defn hex-number\n         \"Turn a number into hex. The shift-seq encodes the amount of the number\n  that should be turned into hex.\"\n         [n shift-seq]\n         (apply str (map #(hex-byte (unsigned-bit-shift-right n %)) shift-seq)))\n       (def int-array-type (type (int-array [0])))\n       (def byte-array-type (type (byte-array [0])))\n       (def short-array-type (type (short-array [0])))\n       (def long-array-type (type (long-array [0])))\n       (defn array-to-shift-seq\n         \"Given an array of integers, what is the shift-seq to give\n  to hex-number to make them into hex?\"\n         [a]\n         (let [t (type a)]\n           (cond (= t byte-array-type) [0]\n                 (= t short-array-type) [8 0]\n                 (= t int-array-type) [24 16 8 0]\n                 (= t long-array-type) [56 48 40 32 24 16 8 0]\n                 :else nil)))\n       (defn snumstr\n         \"Does pr-str, but takes an additional argument for hex conversion. Only\n  works for bytes at this time.\"\n         [zloc hex? shift-seq]\n         (if (and (integer? zloc) hex?)\n           (if (string? hex?)\n             (str hex? (hex-number zloc shift-seq))\n             (hex-number zloc shift-seq))\n           (pr-str zloc))))\n   :cljs (defn snumstr \"Does pr-str.\" [zloc hex? shift-seq] (pr-str zloc)))\n\n(defn sseqnws\n  \"Return a seq of everything after this. Maps get\n  special handling here, as a seq of a map is a bunch\n  of map elements, which are pretty much vectors of\n  [k v] pairs.\"\n  [sexpr]\n  (if (map? sexpr) (apply concat (seq sexpr)) (seq sexpr)))\n\n(defn smap-right\n  \"Map a function of all of the elements to ther right\n  of this.\"\n  [zfn sexpr]\n  (if (coll? sexpr) (mapv zfn (next sexpr)) nil))\n\n(defn stake-append\n  \"Considering the current sexpr a collection, move down into it and\n  take n non-whitespace elements, dropping the rest.  Then append the\n  given element to the end.\"\n  [n sexpr end-sexpr]\n  (concat (take n sexpr) (list end-sexpr)))\n\n(defn sfocus-style\n  \"Take the various inputs and come up with a style.  But we\n  don't do focus, so that's easy.\"\n  [style _ sexpr]\n  style)\n\n(defn snthnext\n  \"Find the nthnext of this sexpr.\"\n  [sexpr n]\n  (when (coll? sexpr) (nthnext sexpr n)))\n\n(defn sfind\n  \"Find the locations (counting from zero, and only counting non-whitespace\n  elements) of the first zthing?.  Return its index if it is found, nil if not.\"\n  [zthing? sexpr]\n  (when (coll? sexpr)\n    (loop [sloc sexpr\n           i 0]\n      (when sloc (if (zthing? (first sloc)) i (recur (next sloc) (inc i)))))))\n\n(defn scount\n  \"How many children does sexpr have?\"\n  [sexpr]\n  (if (coll? sexpr) (count sexpr) 0))\n\n(defn smap\n  \"Return a vector containing the return of applying a function to\n  every element inside of sexpr.\"\n  [zfn sexpr]\n  ;(println \"smap: sexpr:\" sexpr)\n  (let [v (if (coll? sexpr) (mapv zfn sexpr) [])]\n    ;(println \"smap:\" v)\n    v))\n\n(defn sfn? \"Is this an anonymous fn?\" [sexpr] (fn? sexpr))\n\n(defn sfocus\n  \"Is this the focus.  It is possible that this could\n  be implemented with path's and such, but that is not a goal\n  at this point.\"\n  [sexpr fsexpr]\n  nil)\n\n(defn sfind-root-and-path\n  \"This is inherently impossible, as we don't have\n  an up capability.  But we could build one as we\n  go down which would give us an up capability (or\n  at least we would always know where we were).  An\n  interesting idea, but for now, return essentially\n  nothing.\"\n  [sexpr]\n  [\"root\" []])\n\n(defn swhitespace?\n  \"Return true if this is whitespace.  But as we\n  don't have any whitespace in regular s-expressions,\n  we will always return false.\"\n  [sexpr]\n  nil)\n\n(defn sfirst\n  \"Do the first thing, with the right amount of arguments.\"\n  [sexpr]\n  (first sexpr))\n\n(defn ssecond\n  \"Do the second thing, with the right amount of arguments.\"\n  [sexpr]\n  (second sexpr))\n\n(defn sthird\n  \"Define a third since we need one, and znth isn't really nth.\"\n  [sexpr]\n  (nth sexpr 2))\n\n(defn sfourth\n  \"Define a fourth since we need one, and znth isn't really nth.\"\n  [sexpr]\n  (nth sexpr 3))\n\n(defn slist?\n  \"A list? that includes cons.\"\n  [sexpr]\n  (or (list? sexpr) (seq? sexpr)))\n\n(defn slast\n  \"last which can take two arguments.\"\n  [sexpr]\n  (if (coll? sexpr) (last sexpr) sexpr))\n\n(defn sarray?\n  \"Is this an array?\"\n  [x]\n  (when x\n    #?(:clj (.isArray (type x))\n       :cljs (array? x))))\n\n(defn satom?\n  \"Is this an atom?\"\n  [x]\n  (when x\n    #?(:clj (= clojure.lang.Atom (class x))\n       :cljs nil)))\n\n(defn sderef \"Deref this thing.\" [x] (deref x))\n\n(defn sexpandarray \"Blow an array out into a vector.\" [a] (mapv identity a))\n\n(defn sns? \"Is this a namespace?\" [x] (if (symbol? x) (find-ns x)))\n\n(defn sobj-to-vec\n  \"Turn something whose pr-str starts with #object into a vector.\n  obj is the thing that prints as #object, and val is its value.\n  Two forms, one with and one w/out val.  val could be nil, or\n  anything, so there isn't a particularly good sentinal here.\"\n  ([obj val]\n   (let [obj-term (-> (pr-str obj)\n                      (clojure.string/replace #\"^\\#object\\[\" \"\")\n                      (clojure.string/split #\" \" 3))]\n     [(read-string (first obj-term)) (second obj-term) val]))\n  ([obj]\n   (let [obj-term (-> (pr-str obj)\n                      (clojure.string/replace #\"^\\#object\\[\" \"\")\n                      (clojure.string/replace #\"\\]$\" \"\")\n                      (clojure.string/split #\" \" 3))]\n     [(read-string (first obj-term)) (second obj-term)\n      (read-string (nth obj-term 2))])))\n\n(defn spromise?\n  \"Is this a promise?\"\n  [x]\n  #?(:clj (re-find #\"promise\" (pr-str (type x)))\n     :cljs nil))\n\n(defn sagent?\n  \"Is this an agent?\"\n  [x]\n  #?(:clj (re-find #\"clojure.lang.Agent\" (pr-str (type x)))\n     :cljs nil))\n\n; This is faster, but only works in 1.8:\n;  (clojure.string/includes? (pr-str (type x)) \"promise\"))\n\n(defn sconstant?\n  \"Is this a constant?\"\n  [x]\n  (or (keyword? x)\n      (string? x)\n      (number? x)\n      (= \"true\" (str x))\n      (= \"false\" (str x))))\n\n(defn slift-ns\n  \"Perform a lift-ns on a pair-seq that is returned from\n  partition-2-all-nc, which is a seq of pairs of zlocs that may or\n  may not have been sorted and which may or may not have had things\n  removed from it and may or may not actually be pairs.  Could be\n  single things, could be multiple things.  If contains multiple\n  things, the first thing is the key, but if it is just a single\n  thing, the first thing is *not* a key. So we only need to work\n  on the first of each seq which has more than one element in it,\n  and possibly replace it. This will only lift out a ns if all keys\n  in seqs with more than one element have the same namespace. Returns\n  the [namespace pair-seq] or nil.\"\n  [pair-seq]\n  (let [strip-ns (fn [named]\n                   (if (symbol? named)\n                     (symbol nil (name named))\n                     (keyword nil (name named))))]\n    (loop [ns nil\n           pair-seq pair-seq\n           out []]\n      (let [[k & rest-of-pair :as pair] (first pair-seq)\n            #_(println \"k:\" k \"rest-of-pair:\" rest-of-pair)\n            current-ns (when (and rest-of-pair (or (keyword? k) (symbol? k)))\n                         (namespace k))]\n        (if-not k\n          (when ns [ns out])\n          (if current-ns\n            (if ns\n              (when (= ns current-ns)\n                (recur ns\n                       (next pair-seq)\n                       (conj out (cons (strip-ns k) rest-of-pair))))\n              (recur current-ns\n                     (next pair-seq)\n                     (conj out (cons (strip-ns k) rest-of-pair))))\n            (when (= (count pair) 1)\n              (recur ns (next pair-seq) (conj out pair)))))))))\n\n;!zprint {:vector {:respect-nl? true}}\n(defn sredef-call\n  \"Redefine all of the traversal functions for s-expressions, then\n  call the function of no arguments passed in.\"\n  [body-fn]\n  (#?@(:clj [do-redef-vars :structure]\n       :cljs [with-redefs])\n   [zprint.zfns/zstring sstring\n    zprint.zfns/znumstr snumstr\n    zprint.zfns/zcomment? (constantly false)\n    zprint.zfns/zsexpr identity\n    zprint.zfns/zseqnws sseqnws\n    zprint.zfns/zmap-right smap-right\n    zprint.zfns/zfocus-style sfocus-style\n    zprint.zfns/zfirst sfirst\n    zprint.zfns/zfirst-no-comment sfirst\n    zprint.zfns/zsecond ssecond\n    zprint.zfns/zthird sthird\n    zprint.zfns/zfourth sfourth\n    zprint.zfns/znthnext snthnext\n    zprint.zfns/zcount scount\n    zprint.zfns/zmap smap\n    zprint.zfns/zmap-w-nl smap\n    ; zprint.zfns/zfn? sfn?\n    zprint.zfns/zanonfn? (constantly false) ; this only works because lists,\n    ; anon-fn's, etc. are checked before this is used.\n    zprint.zfns/zfn-obj? fn?\n    zprint.zfns/zfocus sfocus\n    zprint.zfns/zfind-path sfind-root-and-path\n    zprint.zfns/zwhitespace? swhitespace?\n    zprint.zfns/zlist? slist?\n    zprint.zfns/zvector? vector?\n    zprint.zfns/zmap? map?\n    zprint.zfns/zset? set?\n    zprint.zfns/zcoll? coll?\n    zprint.zfns/zmeta? (constantly false)\n    zprint.zfns/zuneval? (constantly false)\n    zprint.zfns/ztag (constantly nil)\n    zprint.zfns/zlast slast\n    zprint.zfns/zarray? sarray?\n    zprint.zfns/zatom? satom?\n    zprint.zfns/zderef sderef\n    zprint.zfns/zrecord? record?\n    zprint.zfns/zns? (constantly false)\n    zprint.zfns/zobj-to-vec sobj-to-vec\n    zprint.zfns/zexpandarray sexpandarray\n    zprint.zfns/znewline? (constantly false)\n    zprint.zfns/zwhitespaceorcomment? (constantly false)\n    zprint.zfns/zmap-all map\n    zprint.zfns/zfuture?\n    #?(:clj future?\n       :cljs (constantly false))\n    zprint.zfns/zpromise? spromise?\n    zprint.zfns/zkeyword? keyword?\n    zprint.zfns/zdelay? delay?\n    zprint.zfns/zconstant? sconstant?\n    zprint.zfns/zagent? sagent?\n    zprint.zfns/zreader-macro? (constantly false)\n    zprint.zfns/zarray-to-shift-seq\n    #?(:clj array-to-shift-seq\n       :cljs nil)\n    zprint.zfns/zdotdotdot (constantly '...)\n    zprint.zfns/zsymbol? symbol?\n    zprint.zfns/znil? nil?\n    zprint.zfns/zreader-cond-w-symbol? (constantly false)\n    zprint.zfns/zreader-cond-w-coll? (constantly false)\n    zprint.zfns/zlift-ns slift-ns\n    zprint.zfns/zinlinecomment? (constantly false)\n    zprint.zfns/zfind sfind\n    zprint.zfns/ztake-append stake-append]\n   (body-fn)))"],"mappings":"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","names":["zprint.sutil/sstring","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","sexpr","zprint.sutil/snumstr","zloc","zprint.sutil/sseqnws","cljs.core/map?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","cljs.core/seq","zprint.sutil/smap-right","cljs.core/coll?","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","zfn","cljs.core/next","zprint.sutil/stake-append","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.take.cljs$core$IFn$_invoke$arity$2","n","cljs.core/List","end-sexpr","zprint.sutil/sfocus-style","style","zprint.sutil/snthnext","cljs.core/nthnext","zprint.sutil/sfind","sloc","G__21846","zthing?","cljs.core/first","i","zprint.sutil/scount","cljs.core/count","zprint.sutil/smap","v","zprint.sutil/sfn?","cljs.core/fn?","zprint.sutil/sfocus","zprint.sutil/sfind-root-and-path","zprint.sutil/swhitespace?","zprint.sutil/sfirst","zprint.sutil/ssecond","cljs.core/second","zprint.sutil/sthird","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","zprint.sutil/sfourth","zprint.sutil/slist?","cljs.core/list?","cljs.core/seq?","zprint.sutil/slast","cljs.core/last","zprint.sutil/sarray?","x","cljs.core/array?","zprint.sutil/satom?","zprint.sutil/sderef","cljs.core/deref","zprint.sutil/sexpandarray","cljs.core/identity","a","zprint.sutil/sns?","cljs.core/Symbol","cljs.core/find-ns","G__21858","zprint.sutil/sobj-to-vec","js/Error","obj","clojure.string/replace","clojure.string.split.cljs$core$IFn$_invoke$arity$3","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","obj-term","val","zprint.sutil/spromise?","zprint.sutil/sagent?","zprint.sutil/sconstant?","cljs.core/Keyword","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","zprint.sutil/slift-ns","named","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core/name","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","pair-seq","vec__21870","seq__21871","first__21872","rest-of-pair","k","cljs.core/namespace","cljs.core/not","ns","out","current-ns","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/cons","strip-ns","pair","zprint.sutil/sredef-call","zstring-temp-val__21934","znumstr-temp-val__21935","zcomment?-temp-val__21936","zsexpr-temp-val__21937","zseqnws-temp-val__21938","zmap-right-temp-val__21939","zfocus-style-temp-val__21940","zfirst-temp-val__21941","zfirst-no-comment-temp-val__21942","zsecond-temp-val__21943","zthird-temp-val__21944","zfourth-temp-val__21945","znthnext-temp-val__21946","zcount-temp-val__21947","zmap-temp-val__21948","zmap-w-nl-temp-val__21949","zanonfn?-temp-val__21950","zfn-obj?-temp-val__21951","zfocus-temp-val__21952","zfind-path-temp-val__21953","zwhitespace?-temp-val__21954","zlist?-temp-val__21955","zvector?-temp-val__21956","zmap?-temp-val__21957","zset?-temp-val__21958","zcoll?-temp-val__21959","zmeta?-temp-val__21960","zuneval?-temp-val__21961","ztag-temp-val__21962","zlast-temp-val__21963","zarray?-temp-val__21964","zatom?-temp-val__21965","zderef-temp-val__21966","zrecord?-temp-val__21967","zns?-temp-val__21968","zobj-to-vec-temp-val__21969","zexpandarray-temp-val__21970","znewline?-temp-val__21971","zwhitespaceorcomment?-temp-val__21972","zmap-all-temp-val__21973","zfuture?-temp-val__21974","zpromise?-temp-val__21975","zkeyword?-temp-val__21976","zdelay?-temp-val__21977","zconstant?-temp-val__21978","zagent?-temp-val__21979","zreader-macro?-temp-val__21980","zarray-to-shift-seq-temp-val__21981","zdotdotdot-temp-val__21982","zsymbol?-temp-val__21983","znil?-temp-val__21984","zreader-cond-w-symbol?-temp-val__21985","zreader-cond-w-coll?-temp-val__21986","zlift-ns-temp-val__21987","zinlinecomment?-temp-val__21988","zfind-temp-val__21989","ztake-append-temp-val__21990","ztake-append-orig-val__21933","zfind-orig-val__21932","zinlinecomment?-orig-val__21931","zlift-ns-orig-val__21930","zreader-cond-w-coll?-orig-val__21929","zreader-cond-w-symbol?-orig-val__21928","znil?-orig-val__21927","zsymbol?-orig-val__21926","zdotdotdot-orig-val__21925","zarray-to-shift-seq-orig-val__21924","zreader-macro?-orig-val__21923","zagent?-orig-val__21922","zconstant?-orig-val__21921","zdelay?-orig-val__21920","zkeyword?-orig-val__21919","zpromise?-orig-val__21918","zfuture?-orig-val__21917","zmap-all-orig-val__21916","zwhitespaceorcomment?-orig-val__21915","znewline?-orig-val__21914","zexpandarray-orig-val__21913","zobj-to-vec-orig-val__21912","zns?-orig-val__21911","zrecord?-orig-val__21910","zderef-orig-val__21909","zatom?-orig-val__21908","zarray?-orig-val__21907","zlast-orig-val__21906","ztag-orig-val__21905","zuneval?-orig-val__21904","zmeta?-orig-val__21903","zcoll?-orig-val__21902","zset?-orig-val__21901","zmap?-orig-val__21900","zvector?-orig-val__21899","zlist?-orig-val__21898","zwhitespace?-orig-val__21897","zfind-path-orig-val__21896","zfocus-orig-val__21895","zfn-obj?-orig-val__21894","zanonfn?-orig-val__21893","zmap-w-nl-orig-val__21892","zmap-orig-val__21891","zcount-orig-val__21890","znthnext-orig-val__21889","zfourth-orig-val__21888","zthird-orig-val__21887","zsecond-orig-val__21886","zfirst-no-comment-orig-val__21885","zfirst-orig-val__21884","zfocus-style-orig-val__21883","zmap-right-orig-val__21882","zseqnws-orig-val__21881","zsexpr-orig-val__21880","zcomment?-orig-val__21879","znumstr-orig-val__21878","zstring-orig-val__21877","zprint.zfns/zstring","zprint.zfns/znumstr","zprint.zfns/zcomment?","cljs.core/constantly","zprint.zfns/zsexpr","zprint.zfns/zseqnws","zprint.zfns/zmap-right","zprint.zfns/zfocus-style","zprint.zfns/zfirst","zprint.zfns/zfirst-no-comment","zprint.zfns/zsecond","zprint.zfns/zthird","zprint.zfns/zfourth","zprint.zfns/znthnext","zprint.zfns/zcount","zprint.zfns/zmap","zprint.zfns/zmap-w-nl","zprint.zfns/zanonfn?","zprint.zfns/zfn-obj?","zprint.zfns/zfocus","zprint.zfns/zfind-path","zprint.zfns/zwhitespace?","zprint.zfns/zlist?","zprint.zfns/zvector?","cljs.core/vector?","zprint.zfns/zmap?","zprint.zfns/zset?","cljs.core/set?","zprint.zfns/zcoll?","zprint.zfns/zmeta?","zprint.zfns/zuneval?","zprint.zfns/ztag","zprint.zfns/zlast","zprint.zfns/zarray?","zprint.zfns/zatom?","zprint.zfns/zderef","zprint.zfns/zrecord?","cljs.core/record?","zprint.zfns/zns?","zprint.zfns/zobj-to-vec","zprint.zfns/zexpandarray","zprint.zfns/znewline?","zprint.zfns/zwhitespaceorcomment?","zprint.zfns/zmap-all","cljs.core/map","zprint.zfns/zfuture?","zprint.zfns/zpromise?","zprint.zfns/zkeyword?","cljs.core/keyword?","zprint.zfns/zdelay?","cljs.core/delay?","zprint.zfns/zconstant?","zprint.zfns/zagent?","zprint.zfns/zreader-macro?","zprint.zfns/zarray-to-shift-seq","zprint.zfns/zdotdotdot","zprint.zfns/zsymbol?","cljs.core/symbol?","zprint.zfns/znil?","cljs.core/nil?","zprint.zfns/zreader-cond-w-symbol?","zprint.zfns/zreader-cond-w-coll?","zprint.zfns/zlift-ns","zprint.zfns/zinlinecomment?","zprint.zfns/zfind","zprint.zfns/ztake-append","body-fn"]}