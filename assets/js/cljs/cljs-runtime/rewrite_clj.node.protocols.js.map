{"version":3,"sources":["rewrite_clj/node/protocols.cljs"],"sourcesContent":["(ns rewrite-clj.node.protocols\n  (:require [clojure.string :as s]))\n\n\n\n(defprotocol Node\n  \"Protocol for EDN/Clojure nodes.\"\n  (tag [_]\n    \"Keyword representing the type of the node.\")\n  (printable-only? [_]\n    \"Return true if the node cannot be converted to an s-expression\n     element.\")\n  (sexpr [_]\n    \"Convert node to s-expression.\")\n  (length [_]\n    \"Get number of characters for the string version of this node.\")\n  (string [_]\n    \"Convert node to printable string.\"))\n\n\n(extend-protocol Node\n  object\n  (tag [_] :unknown)\n  (printable-only? [_] false)\n  (sexpr [this] this)\n  (length [this] (count (string this)))\n  (string [this] (pr-str this)))\n\n(defn sexprs\n  \"Given a seq of nodes, convert those that represent s-expressions\n   to the respective forms.\"\n  [nodes]\n  (->> nodes\n       (remove printable-only?)\n       (map sexpr)))\n\n(defn sum-lengths\n  \"Sum up lengths of the given nodes.\"\n  [nodes]\n  (reduce + (map length nodes)))\n\n(defn concat-strings\n  \"Convert nodes to strings and concatenate them.\"\n  [nodes]\n  (reduce str (map string nodes)))\n\n\n(defprotocol InnerNode\n  \"Protocol for non-leaf EDN/Clojure nodes.\"\n  (inner? [_]\n    \"Check whether the node can contain children.\")\n  (children [_]\n    \"Get child nodes.\")\n  (replace-children [_ children]\n    \"Replace the node's children.\"))\n\n(extend-protocol InnerNode\n  object\n  (inner? [_] false)\n  (children [_]\n    (throw (js/Error. \"UnsupportedOperationException\")))\n  (replace-children [_ _]\n    (throw (js/Error. \"UnsupportedOperationException\"))))\n\n(defn child-sexprs\n  \"Get all child s-expressions for the given node.\"\n  [node]\n  (if (inner? node)\n    (sexprs (children node))))\n\n\n(defprotocol NodeCoerceable\n  \"Protocol for values that can be coerced to nodes.\"\n  (coerce [_]))\n\n\n;; TODO: Need to handle format !!!!\n;; (defn- node->string\n;;   [node]\n;;   (let [n (str (if (printable-only? node)\n;;                  (pr-str (string node))\n;;                  (string node)))\n;;         n' (if (re-find #\"\\n\" n)\n;;              (->> (s/replace n #\"\\r?\\n\" \"\\n  \")\n;;                   (format \"%n  %s%n\"))\n;;              (str \" \" n))]\n;;     (format \"<%s:%s>\" (name (tag node)) n')))\n\n\n;; (defn write-node\n;;   [writer node]\n;;   (str writer (node->string node)))\n\n\n;; ## Helpers\n\n(defn assert-sexpr-count\n  [nodes c]\n  (assert\n    (= (count (remove printable-only? nodes)) c)\n   (str \"can only contain\" c \" non-whitespace form(s).\")))\n\n(defn assert-single-sexpr\n  [nodes]\n  (assert-sexpr-count nodes 1))\n"],"mappings":";;;AAKA,AAAA;AAAA;;;;AAAA,AAAaS;;AAAb;;;AAAA,AAEGT,AAAK;AAFR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEQU,AAAAA;AAFR,AAEQA,AAAAA;;AAFR,AAAA,AAAA,AAAA,AAAA,AAAA,AAEQA,AAAAA;AAFR,AAAA,AAAAV,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEQO,AAAAA;;AAFR,AAAA,AAAA,AAAAV,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEQO,AAAAA;;AAFR,AAAA,AAAAN,AAAA,AAEQM;;;;;;AAFR;;;;AAAA,AAIGL,AAAiB;AAJpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIoBK,AAAAA;AAJpB,AAIoBA,AAAAA;;AAJpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAIoBA,AAAAA;AAJpB,AAAA,AAAAL,AAAA,AAAAJ,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIoBO,AAAAA;;AAJpB,AAAA,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIoBO,AAAAA;;AAJpB,AAAA,AAAAN,AAAA,AAIoBM;;;;;;AAJpB;;;AAAA,AAOGJ,AAAO;AAPV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOUI,AAAAA;AAPV,AAOUA,AAAAA;;AAPV,AAAA,AAAA,AAAA,AAAA,AAAA,AAOUA,AAAAA;AAPV,AAAA,AAAAJ,AAAA,AAAAL,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAOUO,AAAAA;;AAPV,AAAA,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAOUO,AAAAA;;AAPV,AAAA,AAAAN,AAAA,AAOUM;;;;;;AAPV;;;AAAA,AASGH,AAAQ;AATX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AASWG,AAAAA;AATX,AASWA,AAAAA;;AATX,AAAA,AAAA,AAAA,AAAA,AAAA,AASWA,AAAAA;AATX,AAAA,AAAAH,AAAA,AAAAN,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AASWO,AAAAA;;AATX,AAAA,AAAA,AAAAH,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AASWO,AAAAA;;AATX,AAAA,AAAAN,AAAA,AASWM;;;;;;AATX;;;AAAA,AAWGF,AAAQ;AAXX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAWWE,AAAAA;AAXX,AAWWA,AAAAA;;AAXX,AAAA,AAAA,AAAA,AAAA,AAAA,AAWWA,AAAAA;AAXX,AAAA,AAAAF,AAAA,AAAAP,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAWWO,AAAAA;;AAXX,AAAA,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAL,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAWWO,AAAAA;;AAXX,AAAA,AAAAN,AAAA,AAWWM;;;;;;AAXX,AAeA,AAAA,AAAA,AAAAC,AAAAF,AAAA,AAAA;;AAAA,AAAA,AAAAT;AAAA,AAAA;AAAA,AAEE;AAAM;AAAN,AAAA;;;AAFF,AAAA,AAAAW,AAAAC,AAAAC,AAAAC;;AAAA,AAAA,AAAAT;AAAA,AAAA;AAAA,AAGE;AAAkB;AAAlB,AAAA;;;AAHF,AAAA,AAAAM,AAAAI,AAAAC,AAAAC;;AAAA,AAAA,AAAAX;AAAA,AAAA;AAAA,AAIE;AAAQ;AAAR,AAAcqB;;;AAJhB,AAAA,AAAAhB,AAAAO,AAAAC,AAAAC;;AAAA,AAAA,AAAAb;AAAA,AAAA;AAAA,AAKE;AAAS;AAAT,AAAe,AAACqB,AAAM,AAACpB,AAAOmB;;;AALhC,AAAA,AAAAhB,AAAAU,AAAAC,AAAAC;;AAAA,AAAA,AAAAf;AAAA,AAAA;AAAA,AAME;AAAS;AAAT,AAAe,AAACqB,AAAOF;;;AANzB,AAAA,AAAAhB,AAAAa,AAAAC,AAAAC;AAQA;;;;AAAA,AAAMI,AAGH;AAHH,AAIOC,AACA,AAACC,AAAO3B,AACR,AAAC4B,AAAI3B;;AAEZ;;;AAAA,AAAM4B,AAEH;AAFH,AAGE,AAACC,AAAOC,AAAE,AAACH,AAAI1B,AAAOwB;;AAExB;;;AAAA,AAAMM,AAEH;AAFH,AAGE,AAACF,AAAOG,AAAI,AAACL,AAAIzB,AAAOuB;;AAG1B,AAAA;AAAA;;;;AAAA,AAAaW;;AAAb;;;AAAA,AAEGH,AAAQ;AAFX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEW7B,AAAAA;AAFX,AAEWA,AAAAA;;AAFX,AAAA,AAAA,AAAA,AAAA,AAAA,AAEWA,AAAAA;AAFX,AAAA,AAAA6B,AAAA,AAAAtC,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEWO,AAAAA;;AAFX,AAAA,AAAA,AAAA6B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAApC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEWO,AAAAA;;AAFX,AAAA,AAAAN,AAAA,AAEWM;;;;;;AAFX;;;AAAA,AAIG8B,AAAU;AAJb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIa9B,AAAAA;AAJb,AAIaA,AAAAA;;AAJb,AAAA,AAAA,AAAA,AAAA,AAAA,AAIaA,AAAAA;AAJb,AAAA,AAAA8B,AAAA,AAAAvC,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIaO,AAAAA;;AAJb,AAAA,AAAA,AAAA8B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAArC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIaO,AAAAA;;AAJb,AAAA,AAAAN,AAAA,AAIaM;;;;;;AAJb;;;AAAA,AAMG+B,AAAkB,AAAE;AANvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMqB/B,AAAAA;AANrB,AAMqBA,AAAAA,AAAEiC;;AANvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAMqBjC,AAAAA;AANrB,AAAA,AAAA+B,AAAA,AAAAxC,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAMqBO,AAAAA,AAAEiC,AAAAA;;AANvB,AAAA,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAtC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAMqBO,AAAAA,AAAEiC,AAAAA;;AANvB,AAAA,AAAAvC,AAAA,AAMqBM;;;;;;AANrB,AASA,AAAA,AAAA,AAAAC,AAAA+B,AAAA,AAAA;;AAAA,AAAA,AAAAH;AAAA,AAAA;AAAA,AAEE;AAAS;AAAT,AAAA;;;AAFF,AAAA,AAAA5B,AAAAiC,AAAAC,AAAAC;;AAAA,AAAA,AAAAN;AAAA,AAAA;AAAA,AAGE;AAAW;AAAX,AACE,AAAO,AAAAa,AAAA;;;AAJX,AAAA,AAAA1C,AAAAoC,AAAAC,AAAAC;;AAAA,AAAA,AAAAR;AAAA,AAAA;AAAA,AAKE;AAAmB,AAAE;AAArB,AACE,AAAO,AAAAY,AAAA;;;AANX,AAAA,AAAA1C,AAAAuC,AAAAC,AAAAC;AAQA;;;AAAA,AAAME,AAEH;AAFH,AAGE,AAAI,AAACf,AAAOgB;AACV,AAACzB,AAAO,AAACU,AAASe;;AADpB;;;AAIF,AAAA;AAAA;;;;AAAA,AAAaE;;AAAb,AAAA,AAEGD,AAAQ;AAFX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEW9C,AAAAA;AAFX,AAEWA,AAAAA;;AAFX,AAAA,AAAA,AAAA,AAAA,AAAA,AAEWA,AAAAA;AAFX,AAAA,AAAA8C,AAAA,AAAAvD,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEWO,AAAAA;;AAFX,AAAA,AAAA,AAAA8C,AAAA;AAAA,AAAA,AAAA,AAAA,AAAArD,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEWO,AAAAA;;AAFX,AAAA,AAAAN,AAAA,AAEWM;;;;;;AAFX,AAyBA,AAAA,AAAMgD,AACH,AAAM;AADT,AAEE,AACE,AAACC,AAAE,AAAC/B,AAAM,AAACI,AAAO3B,AAAgB0B,AAAQ6B;AAD5C;;AAAA,AAAA,AAAA,AAAAP,AAAA,AAAA,AAAA,AAAA,AAEC,AAAA,AAAA,AAAwBO;;;AAE3B,AAAA,AAAMC,AACH;AADH,AAEE,AAAA,AAACH,AAAmB3B","names":["rewrite-clj.node.protocols/tag","goog/typeOf","x__4347__auto__","m__4348__auto__","cljs.core/missing-protocol","rewrite-clj.node.protocols/printable-only?","rewrite-clj.node.protocols/sexpr","rewrite-clj.node.protocols/length","rewrite-clj.node.protocols/string","rewrite-clj.node.protocols/Node","_","goog.object/set","G__19598","G__19599","G__19600","G__19601","G__19602","G__19603","G__19604","G__19605","G__19606","G__19607","G__19608","G__19609","G__19610","G__19611","G__19612","this","cljs.core/count","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","rewrite-clj.node.protocols/sexprs","nodes","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.protocols/sum-lengths","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","rewrite-clj.node.protocols/concat-strings","cljs.core/str","rewrite-clj.node.protocols/inner?","rewrite-clj.node.protocols/children","rewrite-clj.node.protocols/replace-children","rewrite-clj.node.protocols/InnerNode","children","G__19615","G__19616","G__19617","G__19619","G__19620","G__19621","G__19622","G__19623","G__19624","js/Error","rewrite-clj.node.protocols/child-sexprs","node","rewrite-clj.node.protocols/coerce","rewrite-clj.node.protocols/NodeCoerceable","rewrite-clj.node.protocols/assert-sexpr-count","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","c","rewrite-clj.node.protocols/assert-single-sexpr"]}