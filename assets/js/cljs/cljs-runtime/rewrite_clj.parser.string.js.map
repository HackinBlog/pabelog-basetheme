{"version":3,"sources":["rewrite_clj/parser/string.cljs"],"sourcesContent":["(ns rewrite-clj.parser.string\n  (:require [rewrite-clj.node :as node]\n            [rewrite-clj.reader :as r]\n            [goog.string :as gstring]))\n\n(defn- flush-into\n  \"Flush buffer and add string to the given vector.\"\n  [lines buf]\n  (let [s (.toString buf)]\n    (.set buf \"\")\n    (conj lines s)))\n\n(defn- read-string-data\n  [^not-native reader]\n  (r/ignore reader)\n  (let [buf (gstring/StringBuffer.)]\n    (loop [escape? false\n           lines []]\n      (if-let [c (r/read-char reader)]\n        (cond (and (not escape?) (identical? c \\\"))\n              (flush-into lines buf)\n\n              (identical? c \\newline)\n              (recur escape? (flush-into lines buf))\n\n              :else\n              (do\n                (.append buf c)\n                (recur (and (not escape?) (identical? c \\\\)) lines)))\n        (r/throw-reader reader \"Unexpected EOF while reading string.\")))))\n\n(defn parse-string\n  [^not-native reader]\n  (node/string-node (read-string-data reader)))\n\n(defn parse-regex\n  [^not-native reader]\n  (let [lines (read-string-data reader)\n        regex (clojure.string/join \"\\n\" lines)]\n    (node/token-node (re-pattern regex) (str \"#\\\"\" regex \"\\\"\"))))\n"],"mappings":";;;;;AAKA;;;AAAA,AAAOA,AAEJ,AAAM;AAFT,AAGE,AAAM,AAAE,AAAWC;AAAnB,AACE,AAAA,AAAMA;;AACN,AAACC,AAAKC,AAAMC;;AAEhB,AAAA,AAAOC,AACQ;AADf,AAEE,AAACC,AAASC;;AACV,AAAM,AAAI,AAAAC;AAAV,AACE,AAAA,AAAO;AAAP,AACO;;AADP,AAEE,AAAA,AAAW,AAACE,AAAAA,AAAAA,AAAYH,AAAAA;AAAxB,AAAA,AAAAE;AAAA,AAAAA,AAAS;AAAT,AACE,AAAM,AAAK,AAAKE,AAAS,AAAA,AAAYC;AAC/B,AAACZ,AAAWG,AAAMF;;AADxB,AAGM,AAAA,AAAYW;AACZ,AAAOD;AAAQ,AAACX,AAAWG,AAAMF;;;;;AAJvC,AAOM,AACE,AAASA,AAAIW;;AACb,AAAO,AAAK,AAAKD,AAAS,AAAA,AAAYC;AAAOT;;;;;;;;AACrD,AAAA,AAACU,AAAeN;;;;;AAExB,AAAA,AAAMO,AACS;AADf,AAEE,AAAA,AAAkB,AAACT,AAAiBE;AAApC,AAAA,AAAAQ,AAAAA,AAACC,AAAAA,AAAAA;;AAEH,AAAA,AAAMC,AACS;AADf,AAEE,AAAM,AAAM,AAACZ,AAAiBE;AACxB,AAAM,AAAA,AAACW,AAAyBf;AADtC,AAEE,AAAA,AAAiB,AAACmB,AAAWC;AAA7B,AAAoC,AAAA,AAAA,AAAWA;AAA/C,AAAA,AAAAJ,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA","names":["rewrite-clj.parser.string/flush-into","buf","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","lines","s","rewrite-clj.parser.string/read-string-data","rewrite-clj.reader/ignore","reader","goog.string/StringBuffer","temp__5455__auto__","rewrite-clj.reader/read-char","escape?","c","rewrite-clj.reader/throw-reader","rewrite-clj.parser.string/parse-string","G__20985","rewrite-clj.node/string-node","rewrite-clj.parser.string/parse-regex","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__20987","G__20988","rewrite-clj.node/token-node","cljs.core/re-pattern","regex"]}