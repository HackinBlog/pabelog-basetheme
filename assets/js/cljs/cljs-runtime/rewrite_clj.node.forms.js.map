{"version":3,"sources":["rewrite_clj/node/forms.cljs"],"sourcesContent":["(ns rewrite-clj.node.forms\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Node\n\n(defrecord FormsNode [children]\n  node/Node\n  (tag [_]\n    :forms)\n  (printable-only? [_]\n    false)\n  (sexpr [_]\n    (let [es (node/sexprs children)]\n      (if (next es)\n        (list* 'do es)\n        (first es))))\n  (length [_]\n    (node/sum-lengths children))\n  (string [_]\n    (node/concat-strings children))\n\n  node/InnerNode\n  (inner? [_]\n    true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;; TODO: Macro fun !\n;(node/make-printable! FormsNode)\n\n;; ## Constructor\n\n(defn forms-node\n  \"Create top-level node wrapping multiple children\n   (equals an implicit `do` on the top-level).\"\n  [children]\n  (->FormsNode children))\n"],"mappings":"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","names":["this__4301__auto__","k__4302__auto__","k19689","G__19694","cljs.core/Keyword","children","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","else__4304__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__19696","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__19697","f__4321__auto__","ret__4323__auto__","k__4324__auto__","v__4325__auto__","init__4322__auto__","this__4320__auto__","cljs.core/pr-sequential-writer","writer__4316__auto__","opts__4317__auto__","keyval__4319__auto__","pr-pair__4318__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","cljs.core/RecordIter","G__19688","cljs.core/-iterator","cljs.core/nil-iter","__meta","__hash","cljs.core/count","h__4159__auto__","cljs.core/hash-unordered-coll","coll__4298__auto__","fexpr__19701","this__4297__auto__","other19691","this19690","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core/contains?","k__4311__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","this__4310__auto__","cljs.core/not-empty","cljs.core/keyword-identical?","k__4309__auto__","expr__19704","pred__19703","G__19706","G__19707","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/seq","cljs.core/MapEntry","cljs.core/vector?","entry__4307__auto__","this__4306__auto__","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","rewrite-clj.node.forms/FormsNode","cljs.core/List","cljs.core/-write","writer__4345__auto__","G__19692","cljs.core/record?","G__19710","extmap__4340__auto__","rewrite-clj.node.forms/->FormsNode","rewrite-clj.node.forms/map->FormsNode","rewrite-clj.node.protocols/sexprs","cljs.core/next","es","cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","this","children'","rewrite-clj.node.forms/forms-node"]}