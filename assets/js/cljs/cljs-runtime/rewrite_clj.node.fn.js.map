{"version":3,"sources":["rewrite_clj/node/fn.cljs"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.fn\n  (:require [rewrite-clj.node.protocols :as node]\n            [clojure.walk :as w]))\n\n;; ## Conversion\n\n(defn- construct-fn\n  \"Construct function form.\"\n  [syms vararg body]\n  (list\n    'fn*\n    (vec\n      (concat\n        syms\n        (if vararg\n          (list '& vararg))))\n    body))\n\n(defn- sym-index\n  \"Get index based on the substring following the parameter's `%`.\n   Zero means vararg.\"\n  [n]\n  (cond (= n \"&\") 0\n        (= n \"\") 1\n        (re-matches #\"\\d+\" n) (js/parseInt n)\n        :else (throw (js/Error. \"arg literal must be %, %& or %integer.\"))))\n\n;; TODO: No promises available\n(defn- symbol->gensym\n  \"If symbol starting with `%`, convert to respective gensym.\"\n  [sym-seq vararg? max-n sym]\n  (if (symbol? sym)\n    (let [nm (name sym)]\n      (if (= (.indexOf nm \"%\") 0)\n        (let [i (sym-index (subs nm 1))]\n;;           (if (and (= i 0) (not (realized? vararg?)))\n;;             (deliver vararg? true))\n          (swap! max-n max i)\n          (nth sym-seq i))))))\n\n;; TODO: No promises available\n(defn- fn-walk\n  \"Walk the form and create an expand function form.\"\n  [form]\n  (let [syms (for [i (range)\n                   :let [base (if (= i 0)\n                                \"rest__\"\n                                (str \"p\" i \"__\"))\n                         s (name (gensym base))]]\n               (symbol (str s \"#\")))\n        vararg? false ;(promise)\n        max-n (atom 0)\n        body (w/prewalk\n               #(or (symbol->gensym syms vararg? max-n %) %)\n               form)]\n    (construct-fn\n      (take @max-n (rest syms))\n      nil\n;;       (if (deref vararg? 0 nil)\n;;         (first syms))\n      body)))\n\n;; ## Node\n\n(defrecord FnNode [children]\n  node/Node\n  (tag [_] :fn)\n  (printable-only? [_]\n    false)\n  (sexpr [_]\n    (fn-walk (node/sexprs children)))\n  (length [_]\n    (+ 3 (node/sum-lengths children)))\n  (string [_]\n    (str \"#(\" (node/concat-strings children) \")\"))\n\n  node/InnerNode\n  (inner? [_]\n    true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;; TODO\n;(node/make-printable! FnNode)\n\n;; ## Constructor\n\n(defn fn-node\n  \"Create node representing an anonymous function.\"\n  [children]\n  (->FnNode children))\n"],"mappings":"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","names":["rewrite-clj.node.fn/construct-fn","cljs.core/List","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","syms","vararg","body","rewrite-clj.node.fn/sym-index","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","n","cljs.core/re-matches","js/parseInt","js/Error","rewrite-clj.node.fn/symbol->gensym","cljs.core/Symbol","sym","cljs.core/name","nm","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","max-n","cljs.core/max","i","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","sym-seq","rewrite-clj.node.fn/fn-walk","cljs.core/LazySeq","s__20481","cljs.core/seq","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/count","c__4432__auto__","cljs.core/chunk-buffer","size__4433__auto__","i__20482","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","b__20483","cljs.core/chunk-cons","cljs.core/chunk","iter__20480","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","iter__4434__auto__","cljs.core.range.cljs$core$IFn$_invoke$arity$0","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","base","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","s","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","clojure.walk/prewalk","or__4047__auto__","p1__20479#","vararg?","form","cljs.core/deref","cljs.core.take.cljs$core$IFn$_invoke$arity$2","this__4301__auto__","k__4302__auto__","k20485","G__20491","cljs.core/Keyword","children","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","else__4304__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__20497","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__20503","f__4321__auto__","ret__4323__auto__","k__4324__auto__","v__4325__auto__","init__4322__auto__","this__4320__auto__","cljs.core/pr-sequential-writer","writer__4316__auto__","opts__4317__auto__","keyval__4319__auto__","pr-pair__4318__auto__","cljs.core/PersistentVector","cljs.core/RecordIter","G__20484","cljs.core/-iterator","cljs.core/nil-iter","__meta","__hash","h__4159__auto__","cljs.core/hash-unordered-coll","coll__4298__auto__","fexpr__20514","this__4297__auto__","other20487","this20486","cljs.core/PROTOCOL_SENTINEL","cljs.core/contains?","k__4311__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","this__4310__auto__","cljs.core/not-empty","cljs.core/keyword-identical?","k__4309__auto__","expr__20540","pred__20539","G__20542","G__20543","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/MapEntry","cljs.core/vector?","entry__4307__auto__","this__4306__auto__","cljs.core/-conj","rewrite-clj.node.fn/FnNode","cljs.core/-write","writer__4345__auto__","G__20488","cljs.core/record?","G__20548","extmap__4340__auto__","rewrite-clj.node.fn/->FnNode","rewrite-clj.node.fn/map->FnNode","rewrite-clj.node.protocols/sexprs","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","this","children'","rewrite-clj.node.fn/fn-node","cljs.core/chunk-first"]}