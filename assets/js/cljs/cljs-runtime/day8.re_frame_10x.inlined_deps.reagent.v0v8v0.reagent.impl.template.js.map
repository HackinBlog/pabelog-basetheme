{"version":3,"sources":["day8/re_frame_10x/inlined_deps/reagent/v0v8v0/reagent/impl/template.cljs"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.util :as util :refer [is-client]]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component :as comp]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.batching :as batch]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.ratom :as ratom]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.interop :refer-macros [$ $!]]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.debug :refer-macros [dbg prn println log dev?\n                                          warn warn-unless]]))\n\n(declare as-element)\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [])\n\n\n;;; Common utilities\n\n(defn ^boolean named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n\n;;; Props conversion\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (aget o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (aset (cached-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (aset (cached-custom-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn oset [o k v]\n  (doto (if (nil? o) #js{} o)\n    (aset k v)))\n\n(defn oget [o k]\n  (if (nil? o) nil (aget o k)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id ($ id-class :id)\n        class ($ id-class :class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      (assoc :class (let [old-class (:class props)]\n                      (if (nil? old-class) class (str class \" \" old-class)))))))\n\n(defn stringify-class [{:keys [class] :as props}]\n  (if (coll? class)\n    (->> class\n         (filter identity)\n         (string/join \" \")\n         (assoc props :class))\n    props))\n\n(defn convert-props [props id-class]\n  (let [props (-> props\n                  stringify-class\n                  (set-id-class id-class))]\n    (if ($ id-class :custom)\n      (convert-custom-prop-value props)\n      (convert-prop-value props))))\n\n;;; Specialization for input components\n\n;; This gets set from day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom\n(defonce find-dom-node nil)\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(declare input-component-set-value)\n\n(defn input-node-set-value\n  [node rendered-value dom-value component {:keys [on-write]}]\n  (if-not (and (identical? node ($ js/document :activeElement))\n            (has-selection-api? ($ node :type))\n            (string? rendered-value)\n            (string? dom-value))\n    ;; just set the value, no need to worry about a cursor\n    (do\n      ($! component :cljsDOMValue rendered-value)\n      ($! node :value rendered-value)\n      (when (fn? on-write)\n        (on-write rendered-value)))\n\n    ;; Setting \"value\" (below) moves the cursor position to the\n    ;; end which gives the user a jarring experience.\n    ;;\n    ;; But repositioning the cursor within the text, turns out to\n    ;; be quite a challenge because changes in the text can be\n    ;; triggered by various events like:\n    ;; - a validation function rejecting a user inputted char\n    ;; - the user enters a lower case char, but is transformed to\n    ;;   upper.\n    ;; - the user selects multiple chars and deletes text\n    ;; - the user pastes in multiple chars, and some of them are\n    ;;   rejected by a validator.\n    ;; - the user selects multiple chars and then types in a\n    ;;   single new char to repalce them all.\n    ;; Coming up with a sane cursor repositioning strategy hasn't\n    ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n    ;; and it appears to sanely handle all the cases we could\n    ;; think of.\n    ;; So this is just a warning. The code below is simple\n    ;; enough, but if you are tempted to change it, be aware of\n    ;; all the scenarios you have handle.\n    (let [node-value ($ node :value)]\n      (if (not= node-value dom-value)\n        ;; IE has not notified us of the change yet, so check again later\n        (batch/do-after-render #(input-component-set-value component))\n        (let [existing-offset-from-end (- (count node-value)\n                                         ($ node :selectionStart))\n              new-cursor-offset        (- (count rendered-value)\n                                         existing-offset-from-end)]\n          ($! component :cljsDOMValue rendered-value)\n          ($! node :value rendered-value)\n          (when (fn? on-write)\n            (on-write rendered-value))\n          ($! node :selectionStart new-cursor-offset)\n          ($! node :selectionEnd new-cursor-offset))))))\n\n(defn input-component-set-value [this]\n  (when ($ this :cljsInputLive)\n    ($! this :cljsInputDirty false)\n    (let [rendered-value ($ this :cljsRenderedValue)\n          dom-value ($ this :cljsDOMValue)\n          ;; Default to the root node within this component\n          node (find-dom-node this)]\n      (when (not= rendered-value dom-value)\n        (input-node-set-value node rendered-value dom-value this {})))))\n\n(defn input-handle-change [this on-change e]\n  ($! this :cljsDOMValue (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not ($ this :cljsInputDirty)\n    ($! this :cljsInputDirty true)\n    (batch/do-after-render #(input-component-set-value this)))\n  (on-change e))\n\n(defn input-render-setup\n  [this jsprops]\n  ;; Don't rely on React for updating \"controlled inputs\", since it\n  ;; doesn't play well with async rendering (misses keystrokes).\n  (when (and (some? jsprops)\n             (.hasOwnProperty jsprops \"onChange\")\n             (.hasOwnProperty jsprops \"value\"))\n    (assert find-dom-node\n            \"reagent.dom needs to be loaded for controlled input to work\")\n    (let [v ($ jsprops :value)\n          value (if (nil? v) \"\" v)\n          on-change ($ jsprops :onChange)]\n      (when-not ($ this :cljsInputLive)\n        ;; set initial value\n        ($! this :cljsInputLive true)\n        ($! this :cljsDOMValue value))\n      ($! this :cljsRenderedValue value)\n      (js-delete jsprops \"value\")\n      (doto jsprops\n        ($! :defaultValue value)\n        ($! :onChange #(input-handle-change this on-change %))))))\n\n(defn input-unmount [this]\n  ($! this :cljsInputLive nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def reagent-input-class nil)\n\n(declare make-element)\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (make-element argv comp jsprops first-child)))})\n\n(defn reagent-input\n  []\n  (when (nil? reagent-input-class)\n    (set! reagent-input-class (comp/create-class input-spec)))\n  reagent-input-class)\n\n\n;;; Conversion from Hiccup forms\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id class] (->> hiccup-tag name (re-matches re-tag) next)\n        class (when-not (nil? class)\n                (string/replace class #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\"\n                     (comp/comp-name)))\n    #js {:name tag\n         :id id\n         :class class\n         ;; Custom element names must contain hyphen\n         ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n         :custom (not= -1 (.indexOf tag \"-\"))}))\n\n(defn try-get-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn key-from-vec [v]\n  (if-some [k (-> (meta v) get-key)]\n    k\n    (-> v (nth 1 nil) get-key)))\n\n(defn reag-element [tag v]\n  (let [c (comp/as-class tag)\n        jsprops #js{:argv v}]\n    (when-some [key (key-from-vec v)]\n      ($! jsprops :key key))\n    (react/createElement c jsprops)))\n\n(defn fragment-element [argv]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (convert-prop-value (if hasprops props))\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (key-from-vec argv)]\n      (oset jsprops \"key\" key))\n    (make-element argv react/Fragment jsprops first-child)))\n\n(defn adapt-react-class\n  [c]\n  (doto (->NativeWrapper)\n    ($! :name c)\n    ($! :id nil)\n    ($! :class nil)))\n\n(def tag-name-cache #js{})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (aset tag-name-cache x (parse-tag x))))\n\n(defn native-element [parsed argv first]\n  (let [comp ($ parsed :name)]\n    (let [props (nth argv first nil)\n          hasprops (or (nil? props) (map? props))\n          jsprops (convert-props (if hasprops props) parsed)\n          first-child (+ first (if hasprops 1 0))]\n      (if (input-component? comp)\n        (-> [(reagent-input) argv comp jsprops first-child]\n            (with-meta (meta argv))\n            as-element)\n        (let [key (-> (meta argv) get-key)\n              p (if (nil? key)\n                  jsprops\n                  (oset jsprops \"key\" key))]\n          (make-element argv comp p first-child))))))\n\n(defn str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (util/fun-name x)]\n                        (case n \"\" x (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" (comp/comp-name)))\n\n(defn vec-to-elem [v]\n  (assert (pos? (count v)) (hiccup-err v \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (hiccup-err v \"Invalid Hiccup form\"))\n    (cond\n      (keyword-identical? :<> tag)\n      (fragment-element v)\n\n      (hiccup-tag? tag)\n      (let [n (name tag)\n            pos (.indexOf n \">\")]\n        (case pos\n          -1 (native-element (cached-parse n) v 1)\n          0 (let [comp (nth v 1 nil)]\n              ;; Support [:> comp ...]\n              (assert (= \">\" n) (hiccup-err v \"Invalid Hiccup tag\"))\n              (assert (or (string? comp) (fn? comp))\n                      (hiccup-err v \"Expected React component in\"))\n              (native-element #js{:name comp} v 2))\n          ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n          ;; Apply metadata (e.g. :key) to the outermost element.\n          ;; Metadata is probably used only with sequeneces, and in that case\n          ;; only the key of the outermost element matters.\n          (recur (with-meta [(subs n 0 pos)\n                             (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                            (meta v)))))\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1)\n\n      :else (reag-element tag v))))\n\n(declare expand-seq)\n(declare expand-seq-check)\n\n(defn as-element [x]\n  (cond (js-val? x) x\n        (vector? x) (vec-to-elem x)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x)\n                   (expand-seq x))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(set! comp/as-element as-element)\n\n(defn expand-seq [s]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (aset a i (as-element (aget a i))))\n    a))\n\n(defn expand-seq-dev [s o]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (let [val (aget a i)]\n        (when (and (vector? val)\n                   (nil? (key-from-vec val)))\n          ($! o :no-key true))\n        (aset a i (as-element val))))\n    a))\n\n(defn expand-seq-check [x]\n  (let [ctx #js{}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx))]\n    (when derefed\n      (warn (hiccup-err x \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when ($ ctx :no-key)\n      (warn (hiccup-err x \"Every element in a seq should have a unique :key\")))\n    res))\n\n;; From https://github.com/babel/babel/commit/1d0e68f5a19d721fe8799b1ea331041d8bf9120e\n;; (def react-element-type (or (and (exists? js/Symbol)\n;;                                  ($ js/Symbol :for)\n;;                                  ($ js/Symbol for \"react.element\"))\n;;                             60103))\n\n;; (defn make-element-fast [argv comp jsprops first-child]\n;;   (let [key (some-> jsprops ($ :key))\n;;         ref (some-> jsprops ($ :ref))\n;;         props (if (nil? jsprops) (js-obj) jsprops)]\n;;     ($! props :children\n;;         (case (- (count argv) first-child)\n;;           0 nil\n;;           1 (as-element (nth argv first-child))\n;;           (reduce-kv (fn [a k v]\n;;                        (when (>= k first-child)\n;;                          (.push a (as-element v)))\n;;                        a)\n;;                      #js[] argv)))\n;;     (js-obj \"key\" key\n;;             \"ref\" ref\n;;             \"props\" props\n;;             \"$$typeof\" react-element-type\n;;             \"type\" comp\n;;             ;; \"_store\" (js-obj)\n;;             )))\n\n(defn make-element [argv comp jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement comp jsprops)\n\n    1 (react/createElement comp jsprops\n          (as-element (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js[comp jsprops] argv))))\n"],"mappings":"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","names":["day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/re-tag","cljs.core/-write","writer__4291__auto__","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/NativeWrapper","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/->NativeWrapper","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/named?","cljs.core/Keyword","x","cljs.core/Symbol","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/hiccup-tag?","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/valid-tag?","cljs.core/ifn?","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/prop-name-cache","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/cache-get","o","k","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/cached-prop-name","temp__5459__auto__","cljs.core/name","k'","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.util/dash-to-camel","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/js-val?","goog/typeOf","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/kv-conv","G__18421","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/convert-prop-value","v","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","args","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/custom-prop-name-cache","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/cached-custom-prop-name","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/custom-kv-conv","G__18425","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/convert-custom-prop-value","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/oset","G__18427","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/oget","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/set-id-class","id-class","G__18444","props","id","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","class","old-class","p__18458","map__18463","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/stringify-class","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","clojure.string.join.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/convert-props","js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template.find-dom-node","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/find-dom-node","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/these-inputs-have-selection-api","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/has-selection-api?","cljs.core/contains?","input-type","p__18477","map__18478","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/input-node-set-value","node","js/document","rendered-value","dom-value","component","cljs.core/fn?","on-write","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","node-value","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.batching/do-after-render","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/input-component-set-value","cljs.core/count","existing-offset-from-end","new-cursor-offset","this","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/input-handle-change","e","on-change","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/input-render-setup","and__4036__auto__","jsprops","js/Error","value","G__18522","p1__18513#","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/input-unmount","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/input-component?","G__18525","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/reagent-input-class","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/input-spec","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/*current-component*","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/make-element","argv","comp","first-child","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/reagent-input","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/create-class","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/parse-tag","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__18531","hiccup-tag","cljs.core/re-matches","cljs.core/next","clojure.string/replace","tag","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/comp-name","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/try-get-key","e18534","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/get-key","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/key-from-vec","cljs.core/meta","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/reag-element","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/as-class","temp__5461__auto__","key","js/module$node_modules$react$index.createElement","c","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/fragment-element","hasprops","js/module$node_modules$react$index.Fragment","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/adapt-react-class","G__18540","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/tag-name-cache","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/cached-parse","s","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/native-element","parsed","first","G__18546","cljs.core/with-meta","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/as-element","p","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/str-coll","clojure.walk/prewalk","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.util/fun-name","G__18548","n","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","coll","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/hiccup-err","argseq__4648__auto__","cljs.core/first","seq18549","self__4628__auto__","G__18550","cljs.core/str","msg","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/vec-to-elem","day8.re_frame_10x.inlined_deps.reagent.v0v8v0.reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic","cljs.core/keyword-identical?","G__18552","pos","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/vector?","cljs.core/seq?","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/expand-seq-check","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.component/as-element","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/expand-seq","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","n__4518__auto__","i","a","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/expand-seq-dev","val","vec__18561","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.ratom/check-derefs","ctx","derefed","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.debug/has-console","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.debug/tracking","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.debug/track-console","js/console","res","G__18567","G__18568","G__18569","G__18570"]}