{"version":3,"sources":["day8/re_frame_10x/inlined_deps/garden/v1v3v3/garden/color.cljc"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color\n  \"Utilities for color creation, conversion, and manipulation.\"\n  (:refer-clojure :exclude [complement])\n  #?(:cljs\n     (:require-macros\n      [day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color :refer [defcolor-operation]]))\n  (:require\n   [clojure.string :as string]\n   [day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.util :as util])\n  #?(:clj\n     (:import clojure.lang.IFn)))\n\n;; Many of the functions in this namespace were ported or inspired by\n;; the implementations included with Sass\n;; (http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html).\n;; Some additional functions have been added such as `triad` and\n;; `tetrad` for generating sets of colors. \n\n;; Converts a color to a hexadecimal string (implementation below). \n(declare as-hex)\n\n(defrecord CSSColor [red green blue hue saturation lightness alpha]\n  IFn\n  #?(:clj\n      (invoke [this] this))\n  #?(:clj\n      (invoke [this k]\n              (get this k)))\n  #?(:clj\n      (invoke [this k missing]\n              (get this k missing)))\n  #?(:cljs\n      (-invoke [this] this))\n  #?(:cljs\n      (-invoke [this k]\n               (get this k)))\n  #?(:cljs\n      (-invoke [this k missing]\n               (get this k missing)))\n  #?(:clj\n      (applyTo [this args]\n               (clojure.lang.AFn/applyToHelper this args))))\n\n(def as-color map->CSSColor)\n\n(defn rgb\n  \"Create an RGB color.\"\n  ([[r g b :as vs]]\n     (if (every? #(util/between? % 0 255) vs)\n       (as-color {:red r :green g :blue b})\n       (throw\n        (ex-info \"RGB values must be between 0 and 255\" {}))))\n  ([r g b]\n     (rgb [r g b])))\n\n(defn rgba\n  \"Create an RGBA color.\"\n  ([[r g b a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (rgb [r g b]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([r g b a]\n     (rgba [r g b a])))\n\n(defn hsl\n  \"Create an HSL color.\"\n  ([[h s l]]\n     ;; Handle CSSUnits. \n     (let [[h s l] (map #(get % :magnitude %) [h s l])]\n       (if (and (util/between? s 0 100)\n                (util/between? l 0 100))\n         (as-color {:hue (mod h 360) :saturation s :lightness l})\n         (throw\n          (ex-info \"Saturation and lightness must be between 0(%) and 100(%)\" {})))))\n  ([h s l]\n     (hsl [h s l])))\n\n(defn hsla\n  \"Create an HSLA color.\"\n  ([[h s l a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (hsl [h s l]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([h s l a]\n     (hsla [h s l a])))\n\n(defn rgb?\n  \"Return true if color is an RGB color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:red :green :blue})))\n\n(defn hsl?\n  \"Return true if color is an HSL color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:hue :saturation :lightness})))\n\n(defn color?\n  \"Return true if x is a color.\"\n  [x]\n  (or (rgb? x) (hsl? x)))\n\n(def ^{:doc \"Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \\\"#\\\". The color portion is captured.\"}\n  ;; Quantifier must be in this order or JavaScript engines will match\n  ;; 3 chars even when 6 are provided (failing re-matches).\n  hex-re #\"#?([\\da-fA-F]{6}|[\\da-fA-F]{3})\")\n\n(defn hex?\n  \"Returns true if x is a hexadecimal color.\"\n  [x]\n  (boolean (and (string? x) (re-matches hex-re x))))\n\n(defn hex->rgb\n  \"Convert a hexadecimal color to an RGB color map.\"\n  [s]\n  (when-let [[_ hex] (re-matches hex-re s)]\n    (let [hex (if (= 3 (count hex))\n                (apply str (mapcat #(list % %) hex))\n                hex)]\n      (->> (re-seq #\"[\\da-fA-F]{2}\" hex)\n           (map #(util/string->int % 16))\n           (rgb)))))\n\n(defn rgb->hex\n  \"Convert an RGB color map to a hexadecimal color.\"\n  [{r :red g :green b :blue}]\n  (letfn [(hex-part [v]\n            (-> (util/format \"%2s\" (util/int->string v 16))\n                (string/replace \" \" \"0\")))]\n    (apply str \"#\" (map hex-part [r g b]))))\n\n(defn trim-one [x]\n  (if (< 1 x) 1 x))\n\n(defn rgb->hsl\n  \"Convert an RGB color map to an HSL color map.\"\n  [{:keys [red green blue] :as color}]\n  (if (hsl? color)\n    color\n    (let [[r g b] (map #(/ % 255) [red green blue])\n          mx (max r g b)\n          mn (min r g b)\n          d (- mx mn)\n          h (condp = mx\n              mn 0\n              r (* 60 (/ (- g b) d))\n              g (+ (* 60 (/ (- b r) d)) 120)\n              b (+ (* 60 (/ (- r g) d)) 240))\n          l (trim-one (/ (+ mx mn) 2))\n          s (trim-one\n              (cond\n                (= mx mn) 0\n                (< l 0.5) (/ d (* 2 l))\n                :else (/ d (- 2 (* 2 l)))))]\n      (hsl (mod h 360) (* 100 s) (* 100 l)))))\n\n(declare hue->rgb)\n\n;; SEE: http://www.w3.org/TR/css3-color/#hsl-color.\n(defn hsl->rgb\n  \"Convert an HSL color map to an RGB color map.\"\n  [{:keys  [hue saturation lightness] :as color}]\n  (if (rgb? color)\n    color\n    (let [h (/ hue 360.0)\n          s (/ saturation 100.0)\n          l (/ lightness 100.0)\n          m2 (if (<= l 0.5)\n               (* l (inc s))\n               (- (+ l s) (* l s)))\n          m1 (- (* 2 l) m2)\n          [r g b] (map #(Math/round (* % 0xff))\n                       [(hue->rgb m1 m2 (+ h (/ 1.0 3)))\n                        (hue->rgb m1 m2 h)\n                        (hue->rgb m1 m2 (- h (/ 1.0 3)))])]\n      (rgb [r g b]))))\n\n(defn- hue->rgb\n  [m1 m2 h]\n  (let [h (cond\n           (< h 0) (inc h)\n           (> h 1) (dec h)\n           :else h)]\n    (cond\n     (< (* 6 h) 1) (+ m1 (* (- m2 m1) h 6))\n     (< (* 2 h) 1) m2\n     (< (* 3 h) 2) (+ m1 (* (- m2 m1) (- (/ 2.0 3) h) 6))\n     :else m1)))\n\n(defn hsl->hex\n  \"Convert an HSL color map to a hexadecimal string.\"\n  [color]\n  (-> color hsl->rgb rgb->hex))\n\n(defn hex->hsl\n  \"Convert a hexadecimal color to an HSL color.\"\n  [color]\n  (-> color hex->rgb rgb->hsl))\n\n(def percent-clip\n  (partial util/clip 0 100))\n\n(def rgb-clip\n  (partial util/clip 0 255))\n\n(defn as-hex\n  \"Convert a color to a hexadecimal string.\"\n  [x]\n  (cond\n   (hex? x) x\n   (rgb? x) (rgb->hex x)\n   (hsl? x) (hsl->hex x)\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-rgb\n  \"Convert a color to a RGB.\"\n  [x]\n  (cond\n   (rgb? x) x\n   (hsl? x) (hsl->rgb x)\n   (hex? x) (hex->rgb x)\n   (number? x) (rgb (map rgb-clip [x x x]))\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-hsl\n  \"Convert a color to a HSL.\"\n  [x]\n  (cond\n   (hsl? x) x\n   (rgb? x) (rgb->hsl x)\n   (hex? x) (hex->hsl x)\n   (number? x) (hsl [x (percent-clip x) (percent-clip x)])\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn- restrict-rgb\n  [m]\n  (select-keys m [:red :green :blue]))\n\n(defn- make-color-operation\n  [op]\n  (fn color-op\n    ([a] a)\n    ([a b]\n       (let [o (comp rgb-clip op)\n             a (restrict-rgb (as-rgb a))\n             b (restrict-rgb (as-rgb b))]\n         (as-color (merge-with o a b))))\n    ([a b & more]\n       (reduce color-op (color-op a b) more))))\n\n#?(:clj\n   (defmacro ^:private defcolor-operation [name operator]\n     `(def ~name (make-color-operation ~operator))))\n\n(defcolor-operation\n  ^{:doc \"Add the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color+ +)\n\n(defcolor-operation\n  ^{:doc \"Subtract the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color- -)\n\n(defcolor-operation\n  ^{:doc \"Multiply the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color* *)\n\n(defcolor-operation\n  ^{:doc \"Multiply the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color-div /)\n\n(defn- update-color [color field f v]\n  (let [v (or (:magnitude v) v)]\n    (update-in (as-hsl color) [field] f v)))\n\n(defn rotate-hue\n  \"Rotates the hue value of a given color by amount.\"\n  [color amount]\n  (update-color color :hue (comp #(mod % 360) +) amount))\n\n(defn saturate\n  \"Increase the saturation value of a given color by amount.\"\n  [color amount]\n  (update-color color :saturation (comp percent-clip +) amount))\n\n(defn desaturate\n  \"Decrease the saturation value of a given color by amount.\"\n  [color amount]\n  (update-color color :saturation (comp percent-clip -) amount))\n\n(defn lighten\n  \"Increase the lightness value a given color by amount.\"\n  [color amount]\n  (update-color color :lightness (comp percent-clip +) amount))\n\n(defn darken\n  \"Decrease the lightness value a given color by amount.\"\n  [color amount]\n  (update-color color :lightness (comp percent-clip -) amount))\n\n(defn invert\n  \"Return the inversion of a color.\"\n  [color]\n  (as-color (merge-with - {:red 255 :green 255 :blue 255} (as-rgb color))))\n\n(defn mix\n  \"Mix two or more colors by averaging their RGB channels.\"\n  ([color-1 color-2]\n     (let [c1 (restrict-rgb (as-rgb color-1))\n           c2 (restrict-rgb (as-rgb color-2))]\n       (as-color (merge-with util/average c1 c2))))\n  ([color-1 color-2 & more]\n     (reduce mix (mix color-1 color-2) more)))\n\n;;;; Color wheel functions. \n\n(defn complement\n  \"Return the complement of a color.\"\n  [color]\n  (rotate-hue color 180))\n\n(defn- hue-rotations\n  ([color & amounts]\n     (map (partial rotate-hue color) amounts)))\n\n(defn analogous\n  \"Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction.\"\n  ([color]\n     (analogous color true))\n  ([color clockwise?]\n     (let [sign (if clockwise? + -)]\n       (hue-rotations color 0 (sign 30) (sign 60)))))\n\n(defn triad\n  \"Given a color return a triple of colors which are equidistance apart\n  on the color wheel.\"\n  [color]\n  (hue-rotations color 0 120 240))\n\n(defn split-complement\n  \"Given a color return a triple of the color and the two colors on\n  either side of it's complement.\"\n  ([color]\n     (split-complement color 130))\n  ([color distance-from-complement]\n     (let [d (util/clip 1 179 distance-from-complement)]\n         (hue-rotations color 0 d (- d)))))\n\n(defn tetrad\n  \"Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed).\"\n  ([color]\n     (tetrad color 90))\n  ([color angle]\n     (let [a (util/clip 1 90 (Math/abs (:magnitude angle angle)))\n           color-2 (rotate-hue color a)]\n       [(rotate-hue color 0)\n        (complement color)\n        color-2\n        (complement color-2)])))\n\n(defn shades\n  \"Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list.\"\n  ([color]\n     (shades color 10))\n  ([color step]\n     (let [c (as-hsl color)]\n       (for [i (range 1 (Math/floor (/ 100.0 step)))]\n         (assoc c :lightness (* i step))))))\n\n;; ---------------------------------------------------------------------\n;; CSS color name conversion\n\n(def color-name->hex\n  {:aquamarine \"#7fffd4\"\n   :aliceblue \"#f0f8ff\"\n   :antiquewhite \"#faebd7\"\n   :aqua \"#00ffff\"\n   :azure \"#f0ffff\"\n   :beige \"#f5f5dc\"\n   :bisque \"#ffe4c4\"\n   :black \"#000000\"\n   :blanchedalmond \"#ffebcd\"\n   :blue \"#0000ff\"\n   :blueviolet \"#8a2be2\"\n   :brown \"#a52a2a\"\n   :burlywood \"#deb887\"\n   :cadetblue \"#5f9ea0\"\n   :chartreuse \"#7fff00\"\n   :chocolate \"#d2691e\"\n   :coral \"#ff7f50\"\n   :cornflowerblue \"#6495ed\"\n   :cornsilk \"#fff8dc\"\n   :crimson \"#dc143c\"\n   :cyan \"#00ffff\"\n   :darkblue \"#00008b\"\n   :darkcyan \"#008b8b\"\n   :darkgoldenrod \"#b8860b\"\n   :darkgray \"#a9a9a9\"\n   :darkgreen \"#006400\"\n   :darkgrey \"#a9a9a9\"\n   :darkkhaki \"#bdb76b\"\n   :darkmagenta \"#8b008b\"\n   :darkolivegreen \"#556b2f\"\n   :darkorange \"#ff8c00\"\n   :darkorchid \"#9932cc\"\n   :darkred \"#8b0000\"\n   :darksalmon \"#e9967a\"\n   :darkseagreen \"#8fbc8f\"\n   :darkslateblue \"#483d8b\"\n   :darkslategray \"#2f4f4f\"\n   :darkslategrey \"#2f4f4f\"\n   :darkturquoise \"#00ced1\"\n   :darkviolet \"#9400d3\"\n   :deeppink \"#ff1493\"\n   :deepskyblue \"#00bfff\"\n   :dimgray \"#696969\"\n   :dimgrey \"#696969\"\n   :dodgerblue \"#1e90ff\"\n   :firebrick \"#b22222\"\n   :floralwhite \"#fffaf0\"\n   :forestgreen \"#228b22\"\n   :fuchsia \"#ff00ff\"\n   :gainsboro \"#dcdcdc\"\n   :ghostwhite \"#f8f8ff\"\n   :gold \"#ffd700\"\n   :goldenrod \"#daa520\"\n   :gray \"#808080\"\n   :green \"#008000\"\n   :greenyellow \"#adff2f\"\n   :honeydew \"#f0fff0\"\n   :hotpink \"#ff69b4\"\n   :indianred \"#cd5c5c\"\n   :indigo \"#4b0082\"\n   :ivory \"#fffff0\"\n   :khaki \"#f0e68c\"\n   :lavender \"#e6e6fa\"\n   :lavenderblush \"#fff0f5\"\n   :lawngreen \"#7cfc00\"\n   :lemonchiffon \"#fffacd\"\n   :lightblue \"#add8e6\"\n   :lightcoral \"#f08080\"\n   :lightcyan \"#e0ffff\"\n   :lightgoldenrodyellow \"#fafad2\"\n   :lightgray \"#d3d3d3\"\n   :lightgreen \"#90ee90\"\n   :lightgrey \"#d3d3d3\"\n   :lightpink \"#ffb6c1\"\n   :lightsalmon \"#ffa07a\"\n   :lightseagreen \"#20b2aa\"\n   :lightskyblue \"#87cefa\"\n   :lightslategray \"#778899\"\n   :lightslategrey \"#778899\"\n   :lightsteelblue \"#b0c4de\"\n   :lightyellow \"#ffffe0\"\n   :lime \"#00ff00\"\n   :limegreen \"#32cd32\"\n   :linen \"#faf0e6\"\n   :magenta \"#ff00ff\"\n   :maroon \"#800000\"\n   :mediumaquamarine \"#66cdaa\"\n   :mediumblue \"#0000cd\"\n   :mediumorchid \"#ba55d3\"\n   :mediumpurple \"#9370db\"\n   :mediumseagreen \"#3cb371\"\n   :mediumslateblue \"#7b68ee\"\n   :mediumspringgreen \"#00fa9a\"\n   :mediumturquoise \"#48d1cc\"\n   :mediumvioletred \"#c71585\"\n   :midnightblue \"#191970\"\n   :mintcream \"#f5fffa\"\n   :mistyrose \"#ffe4e1\"\n   :moccasin \"#ffe4b5\"\n   :navajowhite \"#ffdead\"\n   :navy \"#000080\"\n   :oldlace \"#fdf5e6\"\n   :olive \"#808000\"\n   :olivedrab \"#6b8e23\"\n   :orange \"#ffa500\"\n   :orangered \"#ff4500\"\n   :orchid \"#da70d6\"\n   :palegoldenrod \"#eee8aa\"\n   :palegreen \"#98fb98\"\n   :paleturquoise \"#afeeee\"\n   :palevioletred \"#db7093\"\n   :papayawhip \"#ffefd5\"\n   :peachpuff \"#ffdab9\"\n   :peru \"#cd853f\"\n   :pink \"#ffc0cb\"\n   :plum \"#dda0dd\"\n   :powderblue \"#b0e0e6\"\n   :purple \"#800080\"\n   :red \"#ff0000\"\n   :rosybrown \"#bc8f8f\"\n   :royalblue \"#4169e1\"\n   :saddlebrown \"#8b4513\"\n   :salmon \"#fa8072\"\n   :sandybrown \"#f4a460\"\n   :seagreen \"#2e8b57\"\n   :seashell \"#fff5ee\"\n   :sienna \"#a0522d\"\n   :silver \"#c0c0c0\"\n   :skyblue \"#87ceeb\"\n   :slateblue \"#6a5acd\"\n   :slategray \"#708090\"\n   :slategrey \"#708090\"\n   :snow \"#fffafa\"\n   :springgreen \"#00ff7f\"\n   :steelblue \"#4682b4\"\n   :tan \"#d2b48c\"\n   :teal \"#008080\"\n   :thistle \"#d8bfd8\"\n   :tomato \"#ff6347\"\n   :turquoise \"#40e0d0\"\n   :violet \"#ee82ee\"\n   :wheat \"#f5deb3\"\n   :white \"#ffffff\"\n   :whitesmoke \"#f5f5f5\"\n   :yellow \"#ffff00\"\n   :yellowgreen \"#9acd32\"})\n\n(defn- ex-info-color-name\n  \"Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors.\"\n  [n]\n  (ex-info\n   (str \"Unknown color \" (pr-str n) \" see (:expected (ex-data e)) for a list of color names\")\n   {:given n\n    :expected (set (keys color-name->hex))}))\n\n(def\n  ^{:private true\n    :doc \"Helper function for from-name.\"}\n  color-name->color\n  (memoize (fn [k] (color-name->hex k))))\n\n(defn from-name\n  \"Given a CSS color name n return an instance of CSSColor.\"\n  [n]\n  (if-let [h (color-name->color (keyword n))]\n    h\n    (throw (ex-info-color-name n))))\n\n(defn- scale-color-value\n  [value amount]\n  (+ value (if (pos? amount)\n             (* (- 100 value) (/ amount 100))\n             (/ (* value amount) 100))))\n\n(defn scale-lightness\n  \"Scale the lightness of a color by amount\"\n  [color amount]\n  (update-color color :lightness scale-color-value amount))\n\n(defn scale-saturation\n  \"Scale the saturation of a color by amount\"\n  [color amount]\n  (update-color color :saturation scale-color-value amount))\n\n(defn- decrown-hex [hex]\n  (string/replace hex #\"^#\" \"\"))\n\n(defn- crown-hex [hex]\n  (if (re-find #\"^#\" hex)\n    hex\n    (str \"#\" hex)))\n\n(defn- expand-hex\n  \"(expand-hex \\\"#abc\\\") -> \\\"aabbcc\\\"\n   (expand-hex \\\"333333\\\") -> \\\"333333\\\"\"\n  [hex]\n  (as-> (decrown-hex hex) _\n        (cond\n         (= 3 (count _)) (string/join (mapcat vector _ _))\n         (= 1 (count _)) (string/join (repeat 6 _))\n         :else _)))\n\n(defn- hex->long\n  \"(hex->long \\\"#abc\\\") -> 11189196\"\n  [hex]\n  (-> hex\n      (string/replace #\"^#\" \"\")\n      (expand-hex)\n      #?(:clj (Long/parseLong 16)\n         :cljs (js/parseInt 16))))\n\n(defn- long->hex\n  \"(long->hex 11189196) -> \\\"aabbcc\\\"\"\n  [long]\n  #?(:clj (Integer/toHexString long)\n     :cljs (.toString long 16)))\n\n(defn weighted-mix\n  \"`weight` is number 0 to 100 (%).\n   At 0, it weighs color-1 at 100%.\n   At 100, it weighs color-2 at 100%.\n   Returns hex string.\"\n  [color-1 color-2 weight]\n  (let [[weight-1 weight-2] (map #(/ % 100) [(- 100 weight) weight])\n        [long-1 long-2] (map (comp hex->long as-hex)\n                             [color-1 color-2])]\n    (-> (+ (* long-1 weight-1) (* long-2 weight-2))\n        (long->hex)\n        (expand-hex)\n        (crown-hex))))\n"],"mappings":"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","names":["this__4301__auto__","k__4302__auto__","k16397","G__16408","cljs.core/Keyword","red","green","blue","hue","saturation","lightness","alpha","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","else__4304__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__16411","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__16412","f__4321__auto__","ret__4323__auto__","k__4324__auto__","v__4325__auto__","init__4322__auto__","this__4320__auto__","cljs.core/pr-sequential-writer","writer__4316__auto__","opts__4317__auto__","keyval__4319__auto__","pr-pair__4318__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","cljs.core/RecordIter","G__16396","cljs.core/-iterator","cljs.core/nil-iter","__meta","__hash","cljs.core/count","h__4159__auto__","cljs.core/hash-unordered-coll","coll__4298__auto__","fexpr__16429","this__4297__auto__","other16399","this16398","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/contains?","k__4311__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","this__4310__auto__","cljs.core/not-empty","cljs.core/keyword-identical?","k__4309__auto__","expr__16445","pred__16444","G__16449","G__16450","G__16460","G__16461","G__16465","G__16466","G__16468","G__16469","G__16470","G__16471","G__16472","G__16473","G__16474","G__16475","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/seq","cljs.core/MapEntry","cljs.core/vector?","entry__4307__auto__","this__4306__auto__","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","self__","cljs.core/aclone","args16405","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/CSSColor","cljs.core/List","cljs.core/-write","writer__4345__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__16400","cljs.core/record?","G__16493","extmap__4340__auto__","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/->CSSColor","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/map->CSSColor","this","cljs.core.get.cljs$core$IFn$_invoke$arity$2","k","missing","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/as-color","G__16499","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/rgb","js/Error","p__16501","vec__16502","cljs.core/every?","p1__16496#","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.util/between?","vs","G__16517","r","g","b","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.color.rgb.cljs$core$IFn$_invoke$arity$1","G__16521","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/rgba","p__16523","vec__16525","a","G__16533","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.color.rgba.cljs$core$IFn$_invoke$arity$1","G__16540","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/hsl","p__16541","vec__16544","vec__16547","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__16537#","h","s","l","G__16552","cljs.core/mod","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$1","G__16557","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/hsla","p__16560","vec__16561","G__16569","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.color.hsla.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/rgb?","cljs.core/map?","color","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/hsl?","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/color?","x","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/hex-re","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/hex?","cljs.core/boolean","and__4036__auto__","cljs.core/re-matches","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/hex->rgb","temp__5457__auto__","vec__16594","hex","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","p1__16589#","cljs.core/re-seq","p1__16590#","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic","p__16606","map__16608","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/rgb->hex","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.util.format.cljs$core$IFn$_invoke$arity$variadic","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic","v","clojure.string/replace","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","hex-part","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/trim-one","p__16620","map__16621","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/rgb->hsl","vec__16626","p1__16619#","x__4135__auto__","y__4136__auto__","x__4138__auto__","y__4139__auto__","mx","mn","pred__16633","expr__16634","cljs.core/=","d","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$3","p__16642","map__16643","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/hsl->rgb","vec__16645","m2","G__16648","Math/round","p1__16641#","G__16649","G__16650","G__16651","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/hue->rgb","m1","G__16652","G__16653","G__16654","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/hsl->hex","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/hex->hsl","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/percent-clip","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.util/clip","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/rgb-clip","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/as-hex","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/as-rgb","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/as-hsl","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/restrict-rgb","cljs.core/select-keys","m","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/make-color-operation","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","op","G__16676","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","o","color-op","day8$re_frame_10x$inlined_deps$garden$v1v3v3$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$2","more","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/color+","cljs.core/+","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/color-","cljs.core/-","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/color*","cljs.core/*","cljs.core//","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/color-div","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/update-color","or__4047__auto__","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","field","f","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/rotate-hue","p1__16700#","amount","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/saturate","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/desaturate","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/lighten","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/darken","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/invert","G__16708","G__16713","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/mix","i__4642__auto__","len__4641__auto__","args-arr__4662__auto__","cljs.core/IndexedSeq","argseq__4663__auto__","cljs.core/first","seq16710","cljs.core/next","self__4628__auto__","G__16711","G__16712","color-1","color-2","G__16720","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.util/average","c1","c2","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.color.mix.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/complement","args__4647__auto__","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/hue-rotations","argseq__4648__auto__","seq16725","G__16726","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","amounts","G__16752","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/analogous","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.color.analogous.cljs$core$IFn$_invoke$arity$2","clockwise?","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic","sign","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/triad","G__16762","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/split-complement","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.color.split_complement.cljs$core$IFn$_invoke$arity$2","distance-from-complement","G__16765","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/tetrad","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.color.tetrad.cljs$core$IFn$_invoke$arity$2","G__16766","Math/abs","angle","G__16768","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/shades","day8.re_frame_10x.inlined_deps.garden.v1v3v3.garden.color.shades.cljs$core$IFn$_invoke$arity$2","cljs.core/LazySeq","s__16770","cljs.core/chunked-seq?","c__4432__auto__","cljs.core/chunk-buffer","size__4433__auto__","i__16771","cljs.core/chunk-append","b__16772","cljs.core/chunk-cons","cljs.core/chunk","iter__16769","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","iter__4434__auto__","cljs.core.range.cljs$core$IFn$_invoke$arity$2","G__16785","Math/floor","step","c","i","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/color-name->hex","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/ex-info-color-name","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","n","cljs.core/set","cljs.core/keys","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/color-name->color","cljs.core/memoize","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/from-name","temp__5455__auto__","G__16797","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/scale-color-value","value","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/scale-lightness","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/scale-saturation","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/decrown-hex","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/crown-hex","cljs.core/re-find","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/expand-hex","_","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core/vector","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/hex->long","js/parseInt","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/long->hex","long","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.color/weighted-mix","vec__16799","vec__16802","p1__16798#","weight","long-1","weight-1","long-2","weight-2","cljs.core/chunk-first"]}