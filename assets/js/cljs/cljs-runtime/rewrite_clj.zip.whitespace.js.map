{"version":3,"sources":["rewrite_clj/zip/whitespace.cljs"],"sourcesContent":["(ns rewrite-clj.zip.whitespace\n  (:require [rewrite-clj.node :as node]\n            [clojure.zip :as z]))\n\n;; ## Predicates\n\n(defn whitespace?\n  [zloc]\n  (some-> zloc z/node node/whitespace?))\n\n(defn linebreak?\n  [zloc]\n  (some-> zloc z/node node/linebreak?))\n\n(defn comment?\n  [zloc]\n  (some-> zloc z/node node/comment?))\n\n(defn whitespace-not-linebreak?\n  [zloc]\n  (and\n   (whitespace? zloc)\n   (not (linebreak? zloc))))\n\n(defn whitespace-or-comment?\n  [zloc]\n  (some-> zloc z/node node/whitespace-or-comment?))\n\n\n;; ## Movement\n\n(defn skip\n  \"Perform the given movement while the given predicate returns true.\"\n  [f p? zloc]\n  (->> (iterate f zloc)\n       (take-while identity)\n       (take-while (complement z/end?))\n       (drop-while p?)\n       (first)))\n\n(defn skip-whitespace\n  \"Perform the given movement (default: `z/right`) until a non-whitespace/\n   non-comment node is encountered.\"\n  ([zloc] (skip-whitespace z/right zloc))\n  ([f zloc] (skip f whitespace-or-comment? zloc)))\n\n(defn skip-whitespace-left\n  \"Move left until a non-whitespace/non-comment node is encountered.\"\n  [zloc]\n  (skip-whitespace z/left zloc))\n\n;; ## Insertion\n\n(defn prepend-space\n  \"Prepend a whitespace node representing the given number of spaces (default: 1).\"\n  ([zloc] (prepend-space zloc 1))\n  ([zloc n]\n   (z/insert-left zloc (node/spaces n))))\n\n(defn append-space\n  \"Append a whitespace node representing the given number of spaces (default: 1).\"\n  ([zloc] (append-space zloc 1))\n  ([zloc n]\n   (z/insert-right zloc (node/spaces n))))\n\n(defn prepend-newline\n  \"Prepend a newlines node representing the given number of newlines (default: 1).\"\n  ([zloc] (prepend-newline zloc 1))\n  ([zloc n]\n   (z/insert-left zloc (node/newlines n))))\n\n(defn append-newline\n  \"Append a newline node representing the given number of newlines (default: 1).\"\n  ([zloc] (append-newline zloc 1))\n  ([zloc n]\n   (z/insert-right zloc (node/newlines n))))\n"],"mappings":"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","names":["rewrite-clj.zip.whitespace/whitespace?","G__21127","zloc","clojure.zip/node","rewrite-clj.node/whitespace?","rewrite-clj.zip.whitespace/linebreak?","G__21128","rewrite-clj.node/linebreak?","rewrite-clj.zip.whitespace/comment?","G__21129","rewrite-clj.node/comment?","rewrite-clj.zip.whitespace/whitespace-not-linebreak?","and__4036__auto__","cljs.core/not","rewrite-clj.zip.whitespace/whitespace-or-comment?","G__21130","rewrite-clj.node/whitespace-or-comment?","rewrite-clj.zip.whitespace/skip","cljs.core/iterate","f","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core/complement","clojure.zip/end?","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","p?","cljs.core/first","G__21132","rewrite-clj.zip.whitespace/skip-whitespace","js/Error","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2","clojure.zip/right","rewrite-clj.zip.whitespace/skip-whitespace-left","clojure.zip/left","G__21134","rewrite-clj.zip.whitespace/prepend-space","rewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$2","clojure.zip/insert-left","rewrite-clj.node/spaces","n","G__21136","rewrite-clj.zip.whitespace/append-space","rewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$2","clojure.zip/insert-right","G__21139","rewrite-clj.zip.whitespace/prepend-newline","rewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node/newlines","G__21141","rewrite-clj.zip.whitespace/append-newline","rewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$2"]}