{"version":3,"sources":["day8/re_frame_10x/utils/pretty_print_condensed.cljs"],"sourcesContent":["(ns ^{:doc    \"Utilities for pretty-printing abbreviated Clojure forms\"\n      :author \"Matthew Huebert\"}\nday8.re-frame-10x.utils.pretty-print-condensed\n  (:refer-clojure :exclude [pr-seq-writer string-print pr-str-with-opts pr-opts pr])\n  (:require [clojure.string :as str]\n            [goog.string :as gstring])\n  (:import [goog.string StringBuffer]))\n\n(defprotocol ILimited\n  (-limited? [x]))\n\n(defn ^string truncate-string\n  \"Truncate a string to length `n`.\n\n  Removal occurs at `cut-from`, which may be :start, :end, or :middle.\n\n  Truncation is indicated by `\u2026` at start/end, or `...` at middle, for readability. \"\n  ([n string]\n   (truncate-string n :end string))\n  ([n cut-from string]\n   (let [c (count string)]\n     (if (> c n)\n       (case cut-from\n         :start (str \"\u2026\" (subs string (- c (dec n)) c))\n         :end (str (subs string 0 (dec n)) \"\u2026\")\n         :middle (case n\n                   1 \"\u2026\"\n                   2 (truncate-string n :start string)\n                   3 (str (subs string 0 1) \"\u2026\" (subs string (dec c) c))\n                   (let [content-budget  (- n 2)\n                         per-side-budget (-> content-budget\n                                             (/ 2)\n                                             (js/Math.floor))]\n                     ;; 100 - 9 = 91 / 2 = 45\n                     ;; subs string 0\n                     (str (subs string 0 (cond-> per-side-budget\n                                                 (even? content-budget)\n                                                 (dec)))\n                          \"...\"\n                          (subs string (- c per-side-budget) c)))))\n       string))))\n\n(comment\n  (assert (= (truncate-string 5 :start \"123456789\") \"\u20266789\"))\n  (assert (= (truncate-string 5 :end \"123456789\") \"1234\u2026\"))\n\n  ;; special case use of \u2026 for short :middle-truncated strings\n  (assert (= (truncate-string 1 :middle \"123456789\") \"\u2026\"))\n  (assert (= (truncate-string 2 :middle \"123456789\") \"\u20269\"))\n  (assert (= (truncate-string 3 :middle \"123456789\") \"1\u20269\"))\n\n  (assert (= (truncate-string 4 :middle \"123456789\") \"...9\"))\n  (assert (= (truncate-string 5 :middle \"123456789\") \"1...9\"))\n  (assert (= (truncate-string 6 :middle \"123456789\") \"1...89\"))\n  (assert (= (truncate-string 7 :middle \"123456789\") \"12...89\"))\n  (assert (= (truncate-string 8 :middle \"123456789\") \"12...789\")))\n\n(defn ^string truncate-segments\n  ([s limit] (truncate-segments s limit #\"^[^.]+\\.\" \"\u2026\"))\n  ([s limit match trunc-prefix]\n   (if (<= (count s) limit)\n     s\n     (let [rep (str/replace s match trunc-prefix)]\n       (if (= rep s)\n         trunc-prefix\n         (recur (str/replace s match trunc-prefix)\n                limit\n                match\n                trunc-prefix))))))\n\n\n(comment\n  (assert (= (truncate-segments \"a.bcd\" 1) \"\u2026\"))\n  (assert (= (truncate-segments \"a.bcd\" 2) \"\u2026\"))\n  (assert (= (truncate-segments \"a.bcd\" 3) \"\u2026\"))\n  (assert (= (truncate-segments \"a.bcd\" 4) \"\u2026bcd\"))\n  (assert (= (truncate-segments \"a.bcd\" 5) \"a.bcd\"))\n  (assert (= (truncate-segments \"a.bcd\" 6) \"a.bcd\"))\n\n\n  (assert (= (truncate-segments \"a.b.c\" 1) \"\u2026\"))\n  (assert (= (truncate-segments \"a.b.c\" 2) \"\u2026c\"))\n  (assert (= (truncate-segments \"a.b.c\" 3) \"\u2026c\"))\n  (assert (= (truncate-segments \"a.b.c\" 4) \"\u2026b.c\"))\n  (assert (= (truncate-segments \"a.b.c\" 5) \"a.b.c\"))\n  (assert (= (truncate-segments \"a.b.c\" 6) \"a.b.c\")))\n\n(defn ^string truncate-named\n  \"Truncates `named`, which must satisfy INamed protocol, to within `n`\n   characters, cutting from beginning. Adds a `\u2026` prefix to indicate where\n   cutting has occurred.\"\n  [n named]\n  (let [the-ns         (namespace named)\n        the-name       (name named)\n        kw?            (keyword? named)\n        ns-prefix-size (if kw? 3 2)]\n    (if (or (> (count the-name) (if the-ns (- n ns-prefix-size) n))\n            (nil? the-ns))\n      (let [prefix (cond-> (if kw? \":\" \"\")\n                           the-ns (str \"\u2026/\"))]\n        (str prefix\n             (truncate-string (- n (count prefix)) :start the-name)))\n      (let [end       (str \"/\" the-name)\n            prefix    (if kw? \":\" \"\")\n            ns-budget (- n (count end) (count prefix))\n            ns-string (truncate-segments the-ns ns-budget)]\n        (str prefix\n             ns-string\n             end)))))\n\n\n(assert (= (truncate-named 12 :city/saskatoon)\n\n           \":\u2026/saskatoon\"))\n\n(comment\n\n  (assert (= (truncate-named 1 :saskatoon) \":\u2026\"))\n  (assert (= (truncate-named 2 :saskatoon) \":\u2026\"))\n  (assert (= (truncate-named 3 :saskatoon) \":\u2026n\"))\n  (assert (= (truncate-named 9 :saskatoon) \":\u2026skatoon\"))\n  (assert (= (truncate-named 10 :saskatoon) \":saskatoon\"))\n\n\n  (assert (= (truncate-named 1 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 2 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 3 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 4 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 5 :city/saskatoon) \":\u2026/\u2026n\"))\n  (assert (= (truncate-named 11 :city/saskatoon) \":\u2026/\u2026skatoon\"))\n  (assert (= (truncate-named 12 :city/saskatoon) \":\u2026/saskatoon\"))\n  (assert (= (truncate-named 13 :city/saskatoon) \":\u2026/saskatoon\"))\n  (assert (= (truncate-named 14 :city/saskatoon) \":\u2026/saskatoon\"))\n  (assert (= (truncate-named 15 :city/saskatoon) \":city/saskatoon\"))\n  (assert (= (truncate-named 16 :city/saskatoon) \":city/saskatoon\"))\n\n  (assert (= (truncate-named 8 'saskatoon) \"\u2026skatoon\"))\n  (assert (= (truncate-named 9 'saskatoon) \"saskatoon\"))\n  (assert (= (truncate-named 10 'saskatoon) \"saskatoon\"))\n\n  (assert (= (truncate-named 1 'city/saskatoon) \"\u2026/\u2026\"))\n  (assert (= (truncate-named 2 'city/saskatoon) \"\u2026/\u2026\"))\n  (assert (= (truncate-named 3 'city/saskatoon) \"\u2026/\u2026\"))\n  (assert (= (truncate-named 4 'city/saskatoon) \"\u2026/\u2026n\"))\n  (assert (= (truncate-named 10 'city/saskatoon) \"\u2026/\u2026skatoon\"))\n  (assert (= (truncate-named 11 'city/saskatoon) \"\u2026/saskatoon\"))\n  (assert (= (truncate-named 12 'city/saskatoon) \"\u2026/saskatoon\"))\n  (assert (= (truncate-named 13 'city/saskatoon) \"\u2026/saskatoon\"))\n  (assert (= (truncate-named 14 'city/saskatoon) \"city/saskatoon\"))\n  (assert (= (truncate-named 15 'city/saskatoon) \"city/saskatoon\")))\n\n(defn ^string truncate [n location param]\n  (if (satisfies? INamed param)\n    (truncate-named n param)\n    (truncate-string n location (str param))))\n\n(defn str->namespaced-sym [s]\n  (if (string? s)\n    (let [name (second (re-find #\"\\.([^.]+)$\" s))]\n      (if name (symbol (subs s 0 (- (count s) (count name) 1))\n                       name)\n               (symbol s)))\n    s))\n\n(defn edges\n  \"Return left and right edges of a collection (eg. brackets plus prefixes), defaults to [< >].\"\n  [coll]\n  (cond (map? coll) [\\{ \\}]\n        (vector? coll) [\\[ \\]]\n        (set? coll) [\"#{\" \\}]\n        (or (list? coll)\n            (seq? coll)) [\"(\" \")\"]\n        :else [\"<\" \">\"]))\n\n(defn with-edges\n  \"Wrap `value` with edges of `coll`\"\n  [coll value]\n  (let [[left right] (edges coll)]\n    (str left value right)))\n\n(defn pretty-condensed\n  \"Render form in abbreviated form, showing content only for keywords/strings/symbols and entering collections to a depth of 1.\"\n  ([form] (pretty-condensed 0 coll? 1 form))\n  ([depth enter-pred max-depth form]\n   (cond\n     (satisfies? INamed form) (truncate-named 16 form)\n     (string? form) (truncate-string 16 :middle form)\n     (fn? form) (or (some-> (.-name form)\n                            (str/replace #\"(^.*\\$)(.*)\" \"$2\"))\n                    \"\u0192\")\n     (number? form) (str form)\n     (and (enter-pred form)\n          (< depth max-depth)) (with-edges form\n                                           (str/join \", \" (mapv (partial pretty-condensed (inc depth) enter-pred max-depth) form)))\n     :else (with-edges form \"\u2026\"))))\n\n;; Copied from cljs.core and modified to take a LimitedStringBufferWriter\n\n(defn pr-writer-impl [obj writer opts]\n  (if (-limited? writer)\n    writer\n    (#'cljs.core/pr-writer-impl obj writer opts)))\n\n(defn- pr-writer\n  \"Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.\"\n  [obj writer opts]\n  (if-let [alt-impl (:alt-impl opts)]\n    (alt-impl obj writer (assoc opts :fallback-impl pr-writer-impl))\n    (pr-writer-impl obj writer opts)))\n\n(defn pr-seq-writer [objs writer opts]\n  (pr-writer (first objs) writer opts)\n  (doseq [obj (next objs)]\n    (-write writer \" \")\n    (pr-writer obj writer opts)))\n\n(defn string-print [x]\n  (*print-fn* x)\n  nil)\n\n(deftype LimitedStringBufferWriter [sb max-string-length ^:mutable over-limit?]\n  IWriter\n  (-write [_ s]\n    (when-not over-limit?\n      (if (<= max-string-length (.getLength sb))\n        (set! over-limit? true)\n        (.append sb s)))\n    sb)\n  (-flush [_] nil)\n  ICounted\n  (-count [_]\n    (.getLength sb))\n  ILimited\n  (-limited? [_]\n    over-limit?))\n\n(defn- pr-sb-with-opts [objs opts]\n  (let [sb     (StringBuffer.)\n        writer (LimitedStringBufferWriter. sb (:debux/max-string-length opts 72) false)]\n    (pr-seq-writer objs writer opts)\n    (-flush writer)\n    sb))\n\n(defn pr-str-with-opts\n  \"Prints a sequence of objects to a string, observing all the\n  options given in opts\"\n  [objs opts]\n  (if (empty? objs)\n    \"\"\n    (str (pr-sb-with-opts objs opts))))\n\n(defn- pr-opts []\n  {:flush-on-newline *flush-on-newline*\n   :readably         *print-readably*\n   :meta             *print-meta*\n   :dup              *print-dup*\n   :print-length     *print-length*})\n\n(defn pr-str-truncated\n  \"Like pr, but truncates output at n characters. Use for efficient printing where\n  you don't want to pay the cost of printing the (possibly large) data structure.\"\n  [n & objs]\n  (let [opts (pr-opts)]\n    (->> (pr-str-with-opts objs (assoc opts\n                                  ;; Each sequence element must be at least a single character, plus a space separator\n                                  :print-length (/ n 2)\n                                  :more-marker \"\u2026\"\n                                  :debux/max-string-length (inc n) ;; One higher so we can detect truncation vs. max limit\n                                  :alt-impl pr-writer-impl))\n         (truncate-string n))))\n\n(comment (defn testit []\n           (dotimes [i 5]\n             (time\n               (pr-str-truncated 200 @day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.db/app-db)))\n           (pr-str-truncated 200 \"=>\" @day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.db/app-db)))\n"],"mappings":"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","names":["day8.re-frame-10x.utils.pretty-print-condensed/-limited?","goog/typeOf","x__4347__auto__","m__4348__auto__","cljs.core/missing-protocol","day8.re-frame-10x.utils.pretty-print-condensed/ILimited","x","G__22074","day8.re-frame-10x.utils.pretty-print-condensed/truncate-string","js/Error","day8.re_frame_10x.utils.pretty_print_condensed.truncate_string.cljs$core$IFn$_invoke$arity$3","n","string","cljs.core/count","c","G__22079","cljs.core/Keyword","cut-from","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","G__22080","content-budget","js/Math.floor","G__22091","per-side-budget","cljs.core/even?","G__22094","day8.re-frame-10x.utils.pretty-print-condensed/truncate-segments","day8.re_frame_10x.utils.pretty_print_condensed.truncate_segments.cljs$core$IFn$_invoke$arity$4","s","limit","clojure.string/replace","match","trunc-prefix","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","rep","day8.re-frame-10x.utils.pretty-print-condensed/truncate-named","cljs.core/namespace","named","cljs.core/name","kw?","the-name","the-ns","ns-prefix-size","G__22103","prefix","end","day8.re_frame_10x.utils.pretty_print_condensed.truncate_segments.cljs$core$IFn$_invoke$arity$2","ns-budget","ns-string","day8.re-frame-10x.utils.pretty-print-condensed/truncate","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/INamed","param","location","day8.re-frame-10x.utils.pretty-print-condensed/str->namespaced-sym","cljs.core/second","cljs.core/re-find","name","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.utils.pretty-print-condensed/edges","cljs.core/map?","coll","cljs.core/vector?","cljs.core/set?","cljs.core/list?","cljs.core/seq?","day8.re-frame-10x.utils.pretty-print-condensed/with-edges","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__22126","left","value","right","G__22131","day8.re-frame-10x.utils.pretty-print-condensed/pretty-condensed","day8.re_frame_10x.utils.pretty_print_condensed.pretty_condensed.cljs$core$IFn$_invoke$arity$4","cljs.core/coll?","form","cljs.core/fn?","or__4047__auto__","G__22136","and__4036__auto__","enter-pred","depth","max-depth","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","day8.re-frame-10x.utils.pretty-print-condensed/pr-writer-impl","writer","cljs.core/pr-writer-impl","fexpr__22146","obj","opts","day8.re-frame-10x.utils.pretty-print-condensed/pr-writer","temp__5455__auto__","G__22150","G__22151","G__22152","alt-impl","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.utils.pretty-print-condensed/pr-seq-writer","cljs.core/first","objs","cljs.core/seq","i__22159","count__22158","chunk__22157","seq__22156","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/next","cljs.core/-write","day8.re-frame-10x.utils.pretty-print-condensed/string-print","cljs.core/*print-fn*","writer__4291__auto__","day8.re-frame-10x.utils.pretty-print-condensed/LimitedStringBufferWriter","day8.re-frame-10x.utils.pretty-print-condensed/->LimitedStringBufferWriter","sb","max-string-length","over-limit?","day8.re-frame-10x.utils.pretty-print-condensed/pr-sb-with-opts","goog.string/StringBuffer","day8.re-frame-10x.utils.pretty-print-condensed/pr-str-with-opts","cljs.core/empty?","day8.re-frame-10x.utils.pretty-print-condensed/pr-opts","cljs.core/*flush-on-newline*","cljs.core/*print-readably*","cljs.core/*print-meta*","cljs.core/*print-dup*","cljs.core/*print-length*","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.utils.pretty-print-condensed/pr-str-truncated","argseq__4648__auto__","seq22189","self__4628__auto__","G__22190","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","day8.re_frame_10x.utils.pretty_print_condensed.truncate_string.cljs$core$IFn$_invoke$arity$2"]}