{"version":3,"sources":["rewrite_clj/zip/move.cljs"],"sourcesContent":["(ns rewrite-clj.zip.move\n  (:refer-clojure :exclude [next])\n  (:require [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n(defn right\n  \"Move right to next non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc z/right ws/skip-whitespace))\n\n(defn left\n  \"Move left to next non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc z/left ws/skip-whitespace-left))\n\n(defn down\n  \"Move down to next non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc z/down ws/skip-whitespace))\n\n(defn up\n  \"Move up to next non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc z/up ws/skip-whitespace-left))\n\n(defn next\n  \"Move to the next non-whitespace/non-comment location in a depth-first manner.\"\n  [zloc]\n  (when zloc\n    (or (some->> zloc\n                 z/next\n                 (ws/skip-whitespace z/next))\n        (vary-meta zloc assoc ::end? true))))\n\n(defn end?\n  \"Check whether the given node is at the end of the depth-first traversal.\"\n  [zloc]\n  (or (not zloc)\n      (z/end? zloc)\n      (::end? (meta zloc))))\n\n(defn rightmost?\n  \"Check if the given location represents the leftmost non-whitespace/\n   non-comment one.\"\n  [zloc]\n  (nil? (ws/skip-whitespace (z/right zloc))))\n\n(defn leftmost?\n  \"Check if the given location represents the leftmost non-whitespace/\n   non-comment one.\"\n  [zloc]\n  (nil? (ws/skip-whitespace-left (z/left zloc))))\n\n(defn prev\n  \"Move to the next non-whitespace/non-comment location in a depth-first manner.\"\n  [zloc]\n  (some->> zloc\n           z/prev\n           (ws/skip-whitespace z/prev)))\n\n(defn leftmost\n  \"Move to the leftmost non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc\n          z/leftmost\n          ws/skip-whitespace))\n\n(defn rightmost\n  \"Move to the rightmost non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc\n          z/rightmost\n          ws/skip-whitespace-left))\n"],"mappings":";;;;AAKA;;;AAAA,AAAMA,AAEH;AAFH,AAGE,AAAA,AAAQE;AAAR,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAAA,AAAaE;AAAb,AAAA,AAAA,AAAAF,AAAA;AAAA;;AAAA,AAAAA,AAAqBG;;;AAEvB;;;AAAA,AAAMC,AAEH;AAFH,AAGE,AAAA,AAAQH;AAAR,AAAA,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAAA,AAAaC;AAAb,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAAA,AAAAA,AAAoBE;;;AAEtB;;;AAAA,AAAMC,AAEH;AAFH,AAGE,AAAA,AAAQP;AAAR,AAAA,AAAA,AAAAQ,AAAA,AAAA,AAAA,AAAAA,AAAaC;AAAb,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAAA,AAAAA,AAAoBN;;;AAEtB;;;AAAA,AAAMQ,AAEH;AAFH,AAGE,AAAA,AAAQV;AAAR,AAAA,AAAA,AAAAW,AAAA,AAAA,AAAA,AAAAA,AAAaC;AAAb,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAAA,AAAAA,AAAkBL;;;AAEpB;;;AAAA,AAAMO,AAEH;AAFH,AAGE,AAAMb;AAAN,AACE,AAAA,AAAI,AAAA,AAASA;AAAT,AAAA,AAAA,AAAAe,AAAA,AAAA,AAAA,AAAAA,AACSC;AADT,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAES,AAAAA,AAACE,AAAmBD;;;AAFjC,AAAA,AAAAF;AAAAA;;AAGI,AAAA,AAAA,AAACI,AAAUlB,AAAKmB;;;AAJtB;;;AAMF;;;AAAA,AAAMC,AAEH;AAFH,AAGE,AAAA,AAAI,AAACC,AAAIrB;AAAT,AAAA,AAAAc;AAAAA;;AAAA,AAAA,AACI,AAACQ,AAAOtB;AADZ,AAAA,AAAAc;AAAAA;;AAEI,AAAA,AAAQ,AAACS,AAAKvB;;;;AAEpB;;;;AAAA,AAAMwB,AAGH;AAHH,AAIE,AAAA,AAAM,AAACtB,AAAmB,AAACD,AAAQD;;AAErC;;;;AAAA,AAAMyB,AAGH;AAHH,AAIE,AAAA,AAAM,AAACnB,AAAwB,AAACD,AAAOL;;AAEzC;;;AAAA,AAAM0B,AAEH;AAFH,AAGE,AAAA,AAAS1B;AAAT,AAAA,AAAA,AAAA2B,AAAA,AAAA,AAAA,AAAAA,AACSC;AADT,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAES,AAAAA,AAACV,AAAmBW;;;AAE/B;;;AAAA,AAAMC,AAEH;AAFH,AAGE,AAAA,AAAQ7B;AAAR,AAAA,AAAA,AAAA8B,AAAA,AAAA,AAAA,AAAAA,AACQC;AADR,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAAA,AAAAA,AAEQ5B;;;AAEV;;;AAAA,AAAM8B,AAEH;AAFH,AAGE,AAAA,AAAQhC;AAAR,AAAA,AAAA,AAAAiC,AAAA,AAAA,AAAA,AAAAA,AACQC;AADR,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAAA,AAAAA,AAEQ3B","names":["rewrite-clj.zip.move/right","G__21163","zloc","clojure.zip/right","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1","rewrite-clj.zip.move/left","G__21164","clojure.zip/left","rewrite-clj.zip.whitespace/skip-whitespace-left","rewrite-clj.zip.move/down","G__21165","clojure.zip/down","rewrite-clj.zip.move/up","G__21166","clojure.zip/up","rewrite-clj.zip.move/next","or__4047__auto__","G__21178","clojure.zip/next","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","rewrite-clj.zip.move/end?","cljs.core/not","clojure.zip/end?","cljs.core/meta","rewrite-clj.zip.move/rightmost?","rewrite-clj.zip.move/leftmost?","rewrite-clj.zip.move/prev","G__21181","clojure.zip/prev","rewrite-clj.zip.move/leftmost","G__21182","clojure.zip/leftmost","rewrite-clj.zip.move/rightmost","G__21183","clojure.zip/rightmost"]}