{"version":3,"sources":["day8/re_frame_10x/subs.cljs"],"sourcesContent":["(ns day8.re-frame-10x.subs\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core :as rf]\n            [day8.re-frame-10x.metamorphic :as metam]\n            [day8.re-frame-10x.utils.utils :as utils]\n            [clojure.string :as str]\n            [cljs.spec.alpha :as s]\n            [zprint.core :as zp]))\n\n(rf/reg-sub\n  :settings/root\n  (fn [db _]\n    (get db :settings)))\n\n(rf/reg-sub\n  :settings/panel-width%\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :panel-width%)))\n\n(rf/reg-sub\n  :settings/panel-width%-rounded\n  :<- [:settings/panel-width%]\n  ;; Rounds panel width to nearest n%\n  (fn [panel-width% [_ n]]\n    ;; https://stackoverflow.com/a/19621472\n    (/ (* (Math/ceil (/ (* panel-width% 100)\n                        n))\n          n)\n       100.0)))\n\n(rf/reg-sub\n  :settings/window-width\n  ;; Prefer window-width-rounded if you don't need the exact number of pixels.\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :window-width)))\n\n(rf/reg-sub\n  :settings/window-width-rounded\n  :<- [:settings/window-width]\n  ;; Window width, rounded up to the nearest n pixels.\n  ;; Useful when you want to respond to window size changes\n  ;; but not too many of them.\n  (fn [width [_ n]]\n    (* (Math/ceil (/ width n))\n       n)))\n\n(rf/reg-sub\n  :settings/show-panel?\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :show-panel?)))\n\n(rf/reg-sub\n  :settings/selected-tab\n  :<- [:settings/root]\n  (fn [settings _]\n    (if (:showing-settings? settings)\n      :settings\n      (get settings :selected-tab))))\n\n(rf/reg-sub\n  :settings/number-of-retained-epochs\n  :<- [:settings/root]\n  (fn [settings]\n    (:number-of-epochs settings)))\n\n(rf/reg-sub\n  :settings/ignored-events\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:ignored-events settings)))))\n\n(rf/reg-sub\n  :settings/filtered-view-trace\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:filtered-view-trace settings)))))\n\n(rf/reg-sub\n  :settings/low-level-trace\n  ;; TODO: filter from traces panel\n  ;; TODO: eventually drop these low level traces after computing the state we need from them.\n  :<- [:settings/root]\n  (fn [settings]\n    (:low-level-trace settings)))\n\n(rf/reg-sub\n  :settings/debug?\n  :<- [:settings/root]\n  (fn [settings]\n    (:debug? settings)))\n\n(rf/reg-sub\n  :settings/app-db-follows-events?\n  :<- [:settings/root]\n  (fn [settings]\n    (:app-db-follows-events? settings)))\n\n;; App DB\n\n(rf/reg-sub\n  :app-db/root\n  (fn [db _]\n    (get db :app-db)))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-after\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-after])))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-before\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-before])))\n\n(rf/reg-sub\n  :app-db/paths\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (map #(assoc (val %) :id (key %))\n         (get app-db-settings :paths))))\n\n(rf/reg-sub\n  :app-db/search-string\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :search-string)))\n\n(rf/reg-sub\n  :app-db/expansions\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :json-ml-expansions)))\n\n(rf/reg-sub\n  :app-db/node-expanded?\n  :<- [:app-db/expansions]\n  (fn [expansions [_ path]]\n    (contains? expansions path)))\n\n(rf/reg-sub\n  :app-db/reagent-id\n  :<- [:app-db/root]\n  (fn [root _]\n    (:reagent-id root)))\n\n;;\n\n(rf/reg-sub\n  :traces/trace-root\n  (fn [db _]\n    (:traces db)))\n\n(rf/reg-sub\n  :trace-panel/root\n  (fn [db _]\n    (:trace-panel db)))\n\n(rf/reg-sub\n  :traces/filter-items\n  (fn [db _]\n    (get-in db [:traces :filter-items])))\n\n(rf/reg-sub\n  :traces/expansions\n  (fn [db _]\n    (get-in db [:traces :expansions])))\n\n(rf/reg-sub\n  :traces/categories\n  (fn [db _]\n    (get-in db [:traces :categories])))\n\n(rf/reg-sub\n  :traces/all-traces\n  :<- [:traces/trace-root]\n  (fn [traces _]\n    (:all-traces traces)))\n\n(rf/reg-sub\n  :traces/number-of-traces\n  :<- [:traces/all-traces]\n  (fn [traces _]\n    (count traces)))\n\n(rf/reg-sub\n  :traces/current-event-traces\n  :<- [:traces/all-traces]\n  :<- [:epochs/beginning-trace-id]\n  :<- [:epochs/ending-trace-id]\n  (fn [[traces beginning ending] _]\n    (into [] (utils/id-between-xf beginning ending) traces)))\n\n(defn filter-ignored-views [[traces filtered-views] _]\n  (let [munged-ns (->> filtered-views\n                       (map (comp munge :ns-str))\n                       (set))]\n    (into []\n          ;; Filter out view namespaces we don't care about.\n          (remove\n            (fn [trace] (and (metam/render? trace)\n                             (contains? munged-ns (subs (:operation trace) 0 (str/last-index-of (:operation trace) \".\"))))))\n          traces)))\n\n(rf/reg-sub\n  :traces/current-event-visible-traces\n  :<- [:traces/current-event-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :traces/all-visible-traces\n  :<- [:traces/all-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :trace-panel/show-epoch-traces?\n  :<- [:trace-panel/root]\n  (fn [trace-root]\n    (:show-epoch-traces? trace-root)))\n\n;;\n\n(rf/reg-sub\n  :global/unloading?\n  (fn [db _]\n    (get-in db [:global :unloading?])))\n\n;;\n\n(rf/reg-sub\n  :snapshot/snapshot-root\n  (fn [db _]\n    (:snapshot db)))\n\n(rf/reg-sub\n  :snapshot/snapshot-ready?\n  :<- [:snapshot/snapshot-root]\n  (fn [snapshot _]\n    (contains? snapshot :current-snapshot)))\n\n;;\n\n(rf/reg-sub\n  :epochs/epoch-root\n  (fn [db _]\n    (:epochs db)))\n\n(rf/reg-sub\n  :epochs/current-match-state\n  :<- [:epochs/epoch-root]\n  :<- [:epochs/match-ids]\n  (fn [[epochs match-ids] _]\n    (let [current-id (:current-epoch-id epochs)\n          match      (cond\n                       (nil? current-id) (last (:matches epochs))\n                       (< current-id (first match-ids)) (first (:matches epochs))\n                       ;; This case seems impossible, but can happen if the user filters out\n                       ;; an event that they are 'on'.\n                       (> current-id (last match-ids)) (last (:matches epochs))\n                       :else (get (:matches-by-id epochs) current-id))]\n      match)))\n\n(rf/reg-sub\n  :epochs/current-match\n  :<- [:epochs/current-match-state]\n  (fn [match-state _]\n    (:match-info match-state)))\n\n(rf/reg-sub\n  :epochs/current-event-trace\n  :<- [:epochs/current-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  :epochs/current-event\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  :epochs/number-of-matches\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (count (get epochs :matches))))\n\n(rf/reg-sub\n  :epochs/current-event-index\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-index epochs)))\n\n(rf/reg-sub\n  :epochs/current-epoch-id\n  :<- [:epochs/current-match]\n  (fn [epochs _]\n    (:id (first epochs))))\n\n(rf/reg-sub\n  :epochs/match-ids\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:match-ids epochs)))\n\n(rf/reg-sub\n  :epochs/beginning-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (first match))))\n\n(rf/reg-sub\n  :epochs/ending-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (last match))))\n\n(rf/reg-sub\n  :epochs/older-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (or (nil? current)\n             (> current (nth ids 0))))))\n\n(rf/reg-sub\n  :epochs/newer-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (some? current)\n         (< current (utils/last-in-vec ids)))))\n\n;;\n\n(rf/reg-sub\n  :timing/total-epoch-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-epoch (nth traces 0)\n          end-of-epoch   (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-epoch end-of-epoch))))\n\n(rf/reg-sub\n  :timing/animation-frame-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter #(or (metam/request-animation-frame? %)\n                 (metam/request-animation-frame-end? %))\n            traces)))\n\n(rf/reg-sub\n  :timing/animation-frame-count\n  :<- [:timing/animation-frame-traces]\n  (fn [frame-traces]\n    (count (filter metam/request-animation-frame? frame-traces))))\n\n(defn ^number +nil\n  \"Returns the sum of nums. (+) returns nil (not 0 like in cljs.core).\"\n  ([] nil)\n  ([x] x)\n  ([x y] (cljs.core/+ x y))\n  ([x y & more]\n   (reduce + (cljs.core/+ x y) more)))\n\n(rf/reg-sub\n  :timing/animation-frame-time\n  :<- [:timing/animation-frame-traces]\n  :<- [:traces/current-event-traces]\n  (fn [[af-start-end epoch-traces] [_ frame-number]]\n    (let [frame-pairs (partition 2 af-start-end)\n          [start end] (nth frame-pairs (dec frame-number))\n          af-traces   (into [] (metam/id-between-xf (:id start) (:id end)) epoch-traces)\n          total-time  (metam/elapsed-time start end)\n          ;; TODO: these times double count renders/subs that happened as a child of another\n          ;; need to fix either here, at ingestion point, or most preferably in re-frame at tracing point.\n          subs-time   (transduce (comp\n                                   (filter metam/subscription?)\n                                   (map :duration))\n                                 +nil af-traces)\n          render-time (transduce (comp\n                                   (filter metam/render?)\n                                   (map :duration))\n                                 +nil af-traces)]\n      {:timing/animation-frame-total  total-time\n       :timing/animation-frame-subs   subs-time\n       :timing/animation-frame-render render-time\n       ;; TODO: handle rounding weirdness here, make sure it is never below 0.\n       :timing/animation-frame-misc   (- total-time subs-time render-time)})))\n\n(rf/reg-sub\n  :timing/event-processing-time\n  :<- [:epochs/current-match-state]\n  (fn [match]\n    (let [{:re-frame/keys [event-time event-handler-time event-dofx-time event-run-time]} (get match :timing)\n          ;; The scope of tracing is:\n          ;; event-run-time\n          ;;   event-time\n          ;;     event-handler-time\n          ;;     event-dofx-time\n          ;;     <other stuff>\n          ;;   <other stuff>\n          remaining-interceptors (- event-time event-handler-time event-dofx-time)]\n      {:timing/event-total        event-run-time\n       :timing/event-handler      event-handler-time\n       :timing/event-effects      event-dofx-time\n       :timing/event-interceptors remaining-interceptors\n       ;; TODO: look at splitting out interceptors from misc, there was a suspiciously high amount of time\n       ;; in misc on some events, so that needs to be investigated.\n       ; :timing/event-misc (- event-run-time event-time)\n       :timing/event-misc         (- event-run-time event-handler-time event-dofx-time)})))\n\n(rf/reg-sub\n  :timing/render-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-render (first (filter metam/request-animation-frame? traces))\n          end-of-epoch    (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-render end-of-epoch))))\n\n(rf/reg-sub\n  :timing/data-available?\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (not (empty? traces))))\n\n;;\n\n(rf/reg-sub\n  :subs/root\n  (fn [db _]\n    (:subs db)))\n\n(rf/reg-sub\n  :subs/all-sub-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter metam/subscription? traces)))\n\n(rf/reg-sub\n  :subs/subscription-info\n  :<- [:epochs/epoch-root]\n  (fn [epoch]\n    (:subscription-info epoch)))\n\n(rf/reg-sub\n  :subs/sub-state\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:sub-state epochs)))\n\n(rf/reg-sub\n  :subs/current-epoch-sub-state\n  :<- [:epochs/current-match-state]\n  (fn [match-state]\n    (:sub-state match-state)))\n\n(def string! (s/and string? #(not (empty? %))))\n\n(s/def :sub/id string!)\n(s/def :sub/reagent-id string!)\n(s/def :sub/run-types #{:sub/create :sub/dispose :sub/run :sub/not-run})\n(s/def :sub/order (s/nilable (s/coll-of :sub/run-types)))\n(s/def :sub/layer (s/nilable pos-int?))\n(s/def :sub/path-data any?)\n(s/def :sub/path string!)\n(s/def :sub/value any?)\n(s/def :sub/previous-value any?)\n(s/def :subs/view-panel-sub\n  (s/keys :req-un [:sub/id :sub/reagent-id :sub/order :sub/layer :sub/path-data :sub/path]\n          :opt-un [:sub/value :sub/previous-value]))\n(s/def :subs/view-subs (s/coll-of :subs/view-panel-sub))\n\n(defn sub-type-value\n  [sub-type]\n  (case sub-type\n    :sub/create 5\n    :sub/run 4\n    :sub/dispose 3\n    :sub/not-run 2\n    1))\n\n(defn accumulate-sub-value\n  \"Calculate a sorting value for a series of subscription trace types.\"\n  ;; A reader might reasonably ask, \"Why are we going to all this work here?\"\n  ;; We calculate a custom value rather than just comparing two order vectors,\n  ;; because the default compare logic for comparing vectors is to sort shorter\n  ;; vectors above longer ones, whereas we want all CRR, CR, C orders to be\n  ;; sorted adjacent to each other, in that order.\n  ;;\n  ;; The first sub type in the order is worth (n * 10^3),\n  ;; then the next one (if it exists), is worth (n * 10^2), and so-on.\n  [order]\n  (loop [exp   3\n         total 0\n         order order]\n    (if-let [sub-type (first order)]\n      (recur (dec exp) (+ total (* (sub-type-value sub-type) (js/Math.pow 10 exp))) (rest order))\n      total)))\n\n(def accumulate-sub-value-memoized\n  (memoize accumulate-sub-value))\n\n(defn sub-sort-val [order-x order-y]\n  ;; Note x and y are reversed here so that the \"highest\" sub orders get sorted first.\n  (compare (accumulate-sub-value-memoized order-y)\n           (accumulate-sub-value-memoized order-x)))\n\n(defn sub-op-type->type [t]\n  (case (:op-type t)\n    :sub/create :created\n    :sub/run :re-run\n    :sub/dispose :destroyed\n\n    :not-run))\n\n(defn prepare-pod-info\n  \"Returns sub info prepared for rendering in pods\"\n  [[sub-info sub-state] [subscription]]\n  (let [remove-fn (if (= subscription :subs/intra-epoch-subs)\n                    (fn [me] (nil? (:order (val me))))\n                    (constantly false))\n        subx      (->> sub-state\n                       (remove remove-fn)\n                       (map (fn [me] (let [state        (val me)\n                                           subscription (:subscription state)\n                                           sub          {:id         (key me)\n                                                         :reagent-id (key me)\n                                                         :layer      (get-in sub-info [(first subscription) :layer])\n                                                         :path-data  subscription\n                                                         :path       (pr-str subscription)\n                                                         :order      (or (:order state) [:sub/not-run])\n                                                         :sub/traits (:sub/traits state)}\n                                           sub          (if (contains? state :value)\n                                                          (assoc sub :value (:value state))\n                                                          sub)\n                                           sub          (if (contains? state :previous-value)\n                                                          (assoc sub :previous-value (:previous-value state))\n                                                          sub)]\n                                       sub)))\n                       (sort-by :order sub-sort-val)        ;; Also sort by subscription-id\n                       #_(sort-by :path))]\n    subx))\n\n\n(rf/reg-sub\n  :subs/pre-epoch-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:pre-epoch-state sub-state)))\n\n(rf/reg-sub\n  :subs/reaction-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:reaction-state sub-state)))\n\n(rf/reg-sub\n  :subs/intra-epoch-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/pre-epoch-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/all-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/reaction-state]\n  prepare-pod-info)\n\n\n(rf/reg-sub\n :subs/filter-str\n :<- [:subs/root]\n (fn [root _]\n   (:filter-str root)))\n\n\n(rf/reg-sub\n  :subs/visible-subs\n  :<- [:subs/all-subs]\n  :<- [:subs/ignore-unchanged-l2-subs?]\n  :<- [:subs/filter-str]\n  :<- [:subs/sub-pins]\n  (fn [[all-subs ignore-unchanged-l2? filter-str pins]]\n    (let [compare-fn (fn [s1 s2]\n                       (let [p1 (boolean (get-in pins [(:id s1) :pin?]))\n                             p2 (boolean (get-in pins [(:id s2) :pin?]))]\n                         (if (= p1 p2)\n                           (compare (:path s1) (:path s2))\n                           p1)))]\n      (cond->> (sort compare-fn all-subs)\n        ignore-unchanged-l2?   (remove metam/unchanged-l2-subscription?)\n        (not-empty filter-str) (filter (fn [{:keys [path id]}]\n                                         (or (str/includes? path filter-str)\n                                             (get-in pins [id :pin?]))))))))\n\n(rf/reg-sub\n  :subs/sub-counts\n  :<- [:subs/visible-subs]\n  (fn [subs _]\n    (->> subs\n         (mapcat :order)\n         (frequencies))))\n\n(rf/reg-sub\n  :subs/created-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/create 0)))\n\n(rf/reg-sub\n  :subs/re-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/run 0)))\n\n(rf/reg-sub\n  :subs/destroyed-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/dispose 0)))\n\n(rf/reg-sub\n  :subs/not-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/not-run 0)))\n\n(rf/reg-sub\n  :subs/unchanged-l2-subs-count\n  :<- [:subs/all-subs]\n  (fn [subs]\n    (count (filter metam/unchanged-l2-subscription? subs))))\n\n(rf/reg-sub\n  :subs/ignore-unchanged-l2-subs?\n  :<- [:subs/root]\n  (fn [subs _]\n    (:ignore-unchanged-subs? subs true)))\n\n(rf/reg-sub\n  :subs/sub-expansions\n  :<- [:subs/root]\n  (fn [subs _]\n    (:expansions subs)))\n\n(rf/reg-sub\n  :subs/sub-pins\n  :<- [:subs/root]\n  (fn [subs _]\n    (:pinned subs)))\n\n;;\n\n(rf/reg-sub\n  :code/root\n  (fn [db _]\n    (:code db)))\n\n(rf/reg-sub\n  :code/current-code\n  :<- [:traces/current-event-traces]\n  (fn [traces _]\n    (keep-indexed (fn [i trace]\n                    (when-some [code (get-in trace [:tags :code])]\n                      {:id       i\n                       :trace-id (:id trace)\n                       :title    (pr-str (:op-type trace))\n                       :code     (->> code (map-indexed (fn [i code] (assoc code :id i))) vec) ;; Add index\n                       :form     (get-in trace [:tags :form])}))\n                  traces)))\n\n(rf/reg-sub\n  :code/current-form\n  :<- [:code/current-code]\n  (fn [code _]\n    (:form (first code))))\n\n(rf/reg-sub\n  :code/current-zprint-form\n  :<- [:code/current-form]\n  (fn [form _]\n    (zp/zprint-str form)))\n\n(rf/reg-sub\n  :code/code-open?\n  :<- [:code/root]\n  (fn [code _]\n    (:code-open? code)))\n\n(rf/reg-sub\n  :code/highlighted-form\n  :<- [:code/root]\n  (fn [code _]\n    (:highlighted-form code)))\n\n(rf/reg-sub\n  :code/show-all-code?\n  :<- [:code/root]\n  (fn [code _]\n    (:show-all-code? code)))\n\n(rf/reg-sub\n  :code/repl-msg-state\n  :<- [:code/root]\n  (fn [code _]\n    (:repl-msg-state code)))\n\n(def canvas (js/document.createElement \"canvas\"))\n\n(rf/reg-sub\n  :code/single-character-width\n  (fn [_ _]\n    (let [context (.getContext canvas \"2d\")]\n      (set! (.-font context) \"monospace 1em\")\n      (.-width (.measureText context \"T\")))))\n\n(rf/reg-sub\n    :code/max-column-width\n    :<- [:settings/window-width-rounded 100]\n    :<- [:code/single-character-width]\n    ;; It seems like it would be possible to do something smarter responding to panel sizing,\n    ;; but that introduces a lot of jank, so we just set to maximum possible window width.\n    (fn [[window-width char-width] _]\n      (Math/ceil (/ window-width\n                    char-width))))\n\n;;\n\n(rf/reg-sub\n  :component/root\n  (fn [db _]\n    (:component db)))\n\n(rf/reg-sub\n  :component/direction\n  :<- [:component/root]\n  (fn [component _]\n    (:direction component)))\n\n;;\n\n(rf/reg-sub\n  :errors/root\n  (fn [db _]\n    (:errors db)))\n\n(rf/reg-sub\n  :errors/popup-failed?\n  :<- [:errors/root]\n  (fn [errors _]\n    (:popup-failed? errors)))\n"],"mappings":"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","names":["G__23881","G__23882","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core/reg-sub","cljs.core.get.cljs$core$IFn$_invoke$arity$2","db","G__23883","G__23884","G__23885","G__23886","settings","G__23887","G__23888","G__23889","G__23890","p__23891","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__23892","G__23895","Math/ceil","panel-width%","n","G__23896","G__23897","G__23898","G__23899","G__23901","G__23902","G__23903","G__23904","p__23906","vec__23908","G__23911","width","G__23912","G__23913","G__23914","G__23915","G__23916","G__23917","G__23918","G__23919","G__23934","G__23935","G__23936","G__23937","G__23938","G__23939","G__23940","G__23941","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/vals","G__23946","G__23947","G__23948","G__23949","G__23950","G__23951","G__23952","G__23953","G__23954","G__23955","G__23956","G__23957","G__23958","G__23959","G__23960","G__23961","G__23962","G__23963","G__23964","G__23965","G__23966","G__23967","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","trace","G__23968","G__23969","G__23970","G__23971","G__23973","G__23974","G__23975","G__23976","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p1__23972#","cljs.core/val","cljs.core/key","app-db-settings","G__23977","G__23978","G__23979","G__23980","G__23981","G__23982","G__23983","G__23984","G__23985","G__23986","G__23987","G__23988","p__23989","vec__23990","cljs.core/contains?","expansions","path","G__23993","G__23994","G__23995","G__23996","root","G__23997","G__23998","G__23999","G__24000","G__24001","G__24002","G__24003","G__24004","G__24005","G__24006","G__24007","G__24008","G__24009","G__24010","traces","G__24011","G__24012","G__24013","G__24014","cljs.core/count","G__24015","G__24016","G__24017","G__24018","G__24019","G__24020","G__24021","G__24022","p__24023","vec__24024","cljs.core.into.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.utils.utils/id-between-xf","beginning","ending","p__24030","vec__24031","day8.re-frame-10x.subs/filter-ignored-views","filtered-views","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/munge","cljs.core/set","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.metamorphic/render?","munged-ns","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2","G__24034","G__24035","G__24036","G__24037","G__24038","G__24039","G__24040","G__24041","G__24042","G__24043","G__24044","G__24045","G__24046","G__24047","G__24048","G__24049","trace-root","G__24050","G__24051","G__24052","G__24053","G__24054","G__24055","G__24056","G__24057","snapshot","G__24058","G__24059","G__24070","G__24071","G__24072","G__24073","G__24074","G__24075","p__24076","vec__24077","epochs","current-id","cljs.core/last","cljs.core/first","match-ids","match","G__24080","G__24081","G__24082","G__24083","match-state","G__24086","G__24087","G__24088","G__24089","day8.re-frame-10x.metamorphic/matched-event","G__24092","G__24093","G__24094","G__24095","G__24096","G__24097","G__24098","G__24099","G__24100","G__24101","G__24102","G__24103","G__24104","G__24105","G__24106","G__24107","G__24108","G__24109","G__24110","G__24111","G__24112","G__24113","G__24114","G__24115","G__24116","G__24117","G__24118","G__24119","G__24125","G__24126","G__24127","G__24128","G__24129","G__24130","p__24131","vec__24132","ids","current","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__24135","G__24136","G__24137","G__24138","G__24139","G__24140","p__24141","vec__24142","day8.re-frame-10x.utils.utils/last-in-vec","G__24145","G__24146","G__24147","G__24148","day8.re-frame-10x.metamorphic/elapsed-time","start-of-epoch","end-of-epoch","G__24150","G__24151","G__24152","G__24153","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p1__24149#","day8.re-frame-10x.metamorphic/request-animation-frame?","day8.re-frame-10x.metamorphic/request-animation-frame-end?","G__24154","G__24155","G__24156","G__24157","frame-traces","G__24162","day8.re-frame-10x.subs/+nil","i__4642__auto__","len__4641__auto__","args-arr__4662__auto__","cljs.core/IndexedSeq","argseq__4663__auto__","seq24159","cljs.core/next","self__4628__auto__","G__24160","G__24161","x","y","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/+","more","G__24167","G__24168","G__24169","G__24170","G__24171","G__24172","p__24173","vec__24175","p__24174","vec__24178","vec__24183","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","af-start-end","frame-pairs","frame-number","day8.re-frame-10x.metamorphic/id-between-xf","start","end","epoch-traces","cljs.core.transduce.cljs$core$IFn$_invoke$arity$3","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.metamorphic/subscription?","cljs.core.map.cljs$core$IFn$_invoke$arity$1","af-traces","total-time","subs-time","render-time","G__24186","G__24187","G__24188","G__24189","map__24190","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","event-time","event-handler-time","event-dofx-time","event-run-time","remaining-interceptors","G__24193","G__24194","G__24195","G__24196","start-of-render","G__24197","G__24198","G__24199","G__24200","cljs.core/empty?","G__24201","G__24202","G__24203","G__24204","G__24205","G__24206","G__24207","G__24208","G__24209","G__24210","epoch","G__24211","G__24212","G__24213","G__24214","G__24215","G__24216","G__24217","G__24218","day8.re-frame-10x.subs/string!","cljs.spec.alpha/and-spec-impl","cljs.core/string?","p1__24219#","cljs.spec.alpha/def-impl","cljs.spec.alpha/nilable-impl","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","cljs.core/coll?","G__24225","cljs.core/pos-int?","cljs.core/any?","cljs.spec.alpha/map-spec-impl","cljs.core/map?","G__24229","G__24237","day8.re-frame-10x.subs/sub-type-value","G__24238","cljs.core/Keyword","sub-type","day8.re-frame-10x.subs/accumulate-sub-value","order","temp__5455__auto__","exp","total","js/Math.pow","cljs.core/rest","day8.re-frame-10x.subs/accumulate-sub-value-memoized","cljs.core/memoize","day8.re-frame-10x.subs/sub-sort-val","cljs.core/compare","order-y","order-x","day8.re-frame-10x.subs/sub-op-type->type","G__24239","t","p__24240","vec__24246","p__24241","vec__24249","day8.re-frame-10x.subs/prepare-pod-info","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","subscription","me","cljs.core/constantly","sub-state","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","remove-fn","state","sub-info","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","or__4047__auto__","sub","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3","subx","G__24254","G__24255","G__24256","G__24257","G__24258","G__24259","G__24260","G__24261","G__24262","G__24263","G__24264","G__24265","G__24266","G__24267","G__24268","G__24269","G__24270","G__24271","G__24272","G__24273","G__24274","G__24275","G__24276","G__24277","G__24278","G__24279","G__24280","G__24281","G__24282","G__24283","G__24284","G__24285","G__24286","G__24287","p__24288","vec__24289","cljs.core/boolean","pins","s1","s2","p1","p2","G__24296","cljs.core.sort.cljs$core$IFn$_invoke$arity$2","compare-fn","all-subs","ignore-unchanged-l2?","day8.re-frame-10x.metamorphic/unchanged-l2-subscription?","cljs.core/not-empty","filter-str","p__24297","map__24298","clojure.string/includes?","id","G__24300","G__24301","G__24302","G__24303","subs","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/frequencies","G__24304","G__24305","G__24306","G__24307","cljs.core.get.cljs$core$IFn$_invoke$arity$3","counts","G__24308","G__24309","G__24310","G__24311","G__24312","G__24313","G__24314","G__24315","G__24316","G__24317","G__24318","G__24319","G__24320","G__24321","G__24322","G__24323","G__24324","G__24325","G__24326","G__24327","G__24328","G__24329","G__24330","G__24331","G__24334","G__24335","G__24336","G__24337","G__24363","G__24364","G__24369","G__24370","G__24371","G__24372","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","temp__5461__auto__","i","code","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","G__24373","G__24374","G__24375","G__24376","G__24378","G__24379","G__24380","G__24381","zprint.core/zprint-str","form","G__24382","G__24383","G__24384","G__24385","G__24387","G__24388","G__24389","G__24390","G__24392","G__24393","G__24394","G__24395","G__24396","G__24397","G__24398","G__24399","day8.re-frame-10x.subs/canvas","js/document.createElement","G__24427","G__24428","context","G__24430","G__24431","G__24432","G__24433","G__24434","G__24435","p__24437","vec__24439","G__24443","window-width","char-width","G__24448","G__24449","G__24457","G__24458","G__24459","G__24460","component","G__24464","G__24465","G__24471","G__24472","G__24473","G__24474","errors"]}