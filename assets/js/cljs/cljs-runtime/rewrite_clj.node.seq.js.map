{"version":3,"sources":["rewrite_clj/node/seq.cljs"],"sourcesContent":["(ns rewrite-clj.node.seq\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Node\n\n(defn wrap-vec [s] (str \"[\" s \"]\"))\n(defn wrap-list [s] (str \"(\" s \")\"))\n(defn wrap-set [s] (str \"#{\" s \"}\"))\n(defn wrap-map [s] (str \"{\" s \"}\"))\n\n\n\n(defrecord SeqNode [tag\n                    wrap-fn\n                    wrap-length\n                    seq-fn\n                    children]\n  node/Node\n  (tag [this]\n    tag)\n  (printable-only? [_] false)\n  (sexpr [this]\n    (seq-fn (node/sexprs children)))\n  (length [_]\n    (+ wrap-length (node/sum-lengths children)))\n  (string [this]\n    (->> (node/concat-strings children)\n         wrap-fn))\n\n  node/InnerNode\n  (inner? [_]\n    true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;; TODO\n;(node/make-printable! SeqNode)\n\n;; ## Constructors\n\n(defn list-node\n  \"Create a node representing an EDN list.\"\n  [children]\n  (->SeqNode :list wrap-list 2 #(apply list %) children))\n\n(defn vector-node\n  \"Create a node representing an EDN vector.\"\n  [children]\n  (->SeqNode :vector  wrap-vec 2 vec children))\n\n(defn set-node\n  \"Create a node representing an EDN set.\"\n  [children]\n  (->SeqNode :set  wrap-set 3 set children))\n\n(defn map-node\n  \"Create a node representing an EDN map.\"\n  [children]\n  (->SeqNode :map wrap-map 2 #(apply hash-map %) children))\n"],"mappings":";;;AAKA,AAAA,AAAMA,AAAU;AAAhB,AAAmB,AAAA,AAAA,AAASC;;AAC5B,AAAA,AAAMC,AAAW;AAAjB,AAAoB,AAAA,AAAA,AAASD;;AAC7B,AAAA,AAAME,AAAU;AAAhB,AAAmB,AAAA,AAAA,AAAUF;;AAC7B,AAAA,AAAMG,AAAU;AAAhB,AAAmB,AAAA,AAAA,AAASH;;AAI5B,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAW+E;;AAAX,AAAA,AAAA,AA0Ba;AA1Bb,AA2BI,AAAagB;;;AA3BjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWhB;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA3E,AAAAC,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAW0E;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAzE;AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAAE;;;AAAA;AAAAC;;;AAAA;AAAAC;;;AAAA;AAAAC;;;AAAA;AAAAC;;;;AAAA,AAAAC,AAAAC,AAAAT,AAAAU;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAW+D;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA9D,AAAA;AAAA,AAAA;AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAAA,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC;;AAAAC,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWqD;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;AAAA;AAAA,AAAA,AAAApD,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC;;;AAAA,AAAA,AAAAH,AAAAC,AAAAG,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAG,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxB,AAAA,AAAA,AAAAwB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvB,AAAA,AAAA,AAAAuB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAA,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApB,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAWgE;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA7C,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAApB,AAAA,AAAAqB,AAAArB,AAAA,AAAAsB;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAW0C;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAAzC;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAWyC;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAtE,AAAAC,AAAAC,AAAAC,AAAAC,AAAAyB,AAAAvB,AAAAwB,AAAWwC;;;AAAX,AAAA,AAAA,AAAA,AAAA,AAAWA;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAvC,AAAAzB;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAWgE;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAxC;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA;AAAAA;;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC;;;AAAA,AAAA,AAAAC,AAAAC;;AAAA,AAAA,AAAAN,AAAAE;;AAAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWsC;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAjC,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAAE,AAAA,AAAAD,AAAA,AAAAD,AAAA,AAAAE,AAAA,AAAAD,AAAA,AAAAD,AAAA,AAAAE,AAAA,AAAAD,AAAA,AAAAD,AAAA,AAAAE,AAAA,AAAAD,AAAA,AAAAD,AAAA,AAAAE,AAAA,AAAAD,AAAA,AAAAD,AAAA,AAAAE,AAAA,AAAAD,AAAA,AAAAD;;;AAAA,AAAA,AAAA,AAAAG,AAAW8B;;AAAX,AAAA,AAAA,AAAA,AAAWA,AAMH;;AANR,AAAA,AAAA,AAMQ;AANR,AAOItE;;;AAPJ,AAAA,AAAA,AAAA,AAAWsE,AAQS;;AARpB,AAAA,AAAA,AAQoB;AARpB,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAWA,AASD;;AATV,AAAA,AAAA,AASU;AATV,AAUI,AAAA,AAAQ,AAACY,AAAY9E;AAArB,AAAA,AAAA6E,AAAAA,AAAC9E,AAAAA,AAAAA;;;AAVL,AAAA,AAAA,AAAA,AAAWmE,AAWA;;AAXX,AAAA,AAAA,AAWW;AAXX,AAYI,AAAGpE,AAAY,AAACiF,AAAiB/E;;;AAZrC,AAAA,AAAA,AAAA,AAAWkE,AAaA;;AAbX,AAAA,AAAA,AAaW;AAbX,AAcI,AAAA,AAAK,AAACe,AAAoBjF;AAA1B,AAAA,AAAAgF,AAAAA,AACKnF,AAAAA,AAAAA;;;AAfT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWqE;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA7B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAAjB,AAAAa;;AAAA,AAAA1C,AAAAC,AAAAC,AAAAC,AAAAC,AAAAyB,AAAA,AAAAkB,AAAA,AAAAJ,AAAArC,AAAAoC,AAAA,AAAW4B;;;;AAAX,AAAA,AAAA,AAAA9B,AAAW8B;;AAAX,AAAA,AAAA,AAAA,AAAWA,AAkBA;;AAlBX,AAAA,AAAA,AAkBW;AAlBX,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAWA,AAoBE;;AApBb,AAAA,AAAA,AAoBa;AApBb,AAqBIlE;;;AArBJ,AAAA,AAAA,AAAA,AAAWkE,AAsBU,AAAK;;AAtB1B,AAAA,AAAA,AAsBqB;AAtBrB,AAuBI,AAAA,AAACR,AAAMwB,AAAeC;;;AAvB1B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWjB;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAtB;AAAA,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAA,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC;;AAAA,AAAA3B,AAAAzB,AAAAC,AAAAC,AAAAC,AAAAyB,AAAAvB,AAAA,AAAWgE;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAApB;AAAA,AAAA,AAAAC,AAAAA,AAAAG,AAAAC,AAAAJ,AAAAG,AAAAC;;AAAA,AAAAvD,AAAA0B,AAAAxB,AAAAC,AAAAC,AAAAyB,AAAAvB,AAAA,AAAWgE;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAApB;AAAA,AAAA,AAAAC,AAAAA,AAAAK,AAAAC,AAAAN,AAAAK,AAAAC;;AAAA,AAAAzD,AAAAC,AAAAyB,AAAAvB,AAAAC,AAAAyB,AAAAvB,AAAA,AAAWgE;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAApB;AAAA,AAAA,AAAAC,AAAAA,AAAAO,AAAAC,AAAAR,AAAAO,AAAAC;;AAAA,AAAA3D,AAAAC,AAAAC,AAAAwB,AAAAtB,AAAAyB,AAAAvB,AAAA,AAAWgE;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAApB;AAAA,AAAA,AAAAC,AAAAA,AAAAS,AAAAC,AAAAV,AAAAS,AAAAC;;AAAA,AAAA7D,AAAAC,AAAAC,AAAAC,AAAAuB,AAAAG,AAAAvB,AAAA,AAAWgE;;AAAX,AAAAtE,AAAAC,AAAAC,AAAAC,AAAAC,AAAAyB,AAAA,AAAAiC,AAAAxD,AAAA2C,AAAAvB,AAAA,AAAW4C;;;;;;;;AAAX,AAAA,AAAA,AAAA,AAAA,AAAWA;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAP,AAAA,AAAAxC,AAAA,AAAA,AAAAyC,AAAA,AAAAhE,AAAA,AAAA,AAAAgE,AAAA,AAAA/D,AAAA,AAAA,AAAA+D,AAAA,AAAA9D,AAAA,AAAA,AAAA8D,AAAA,AAAA7D,AAAA,AAAA,AAAA6D,AAAA,AAAA5D,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWgE;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAtE,AAAAC,AAAAC,AAAAC,AAAAC,AAAAsB,AAAApB,AAAAwB,AAAWwC;;;AAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWA;;AAAX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAL,AAAAC;AAAA,AAAAC,AAAA,AAAAC,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;;AAAA,AAAA1D,AAAA6D,AAAAF,AAAAD;;;;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAAC,AAAA;;;AAAA;;;AAAA,AAAWM,AAAS,AACA,AACA,AACA,AACA;AAJpB,AAAA,AAAAT,AAAA,AAAA,AAAA,AAAoBtE,AACAC,AACAC,AACAC,AACAC;;;AAJpB;;;AAAA,AAAA,AAAW4E;AAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAN,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA9B,AAAA,AAAAgC;;AAAAA;;;AAAA,AAAA,AAAAP,AAAA,AAAA,AAAAK,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5B,AAAA+B,AAAA;;;AAAAR,AAkCA;;;AAAA,AAAMkB,AAEH;AAFH,AAGE,AAAA,AAAA,AAAA,AAAA,AAACT,AAAgBvF;AAAjB,AAA8B,AAAAiG,AAACC,AAAMC;AAAQvF;;AAE/C;;;AAAA,AAAMwF,AAEH;AAFH,AAGE,AAAA,AAAA,AAACb,AAAmBzF,AAAWuG,AAAIzF;;AAErC;;;AAAA,AAAM0F,AAEH;AAFH,AAGE,AAAA,AAAA,AAACf,AAAgBtF,AAAWsG,AAAI3F;;AAElC;;;AAAA,AAAM4F,AAEH;AAFH,AAGE,AAAA,AAAA,AAAA,AAAA,AAACjB,AAAerF;AAAhB,AAA4B,AAAAuG,AAACP,AAAMQ;AAAY9F","names":["rewrite-clj.node.seq/wrap-vec","s","rewrite-clj.node.seq/wrap-list","rewrite-clj.node.seq/wrap-set","rewrite-clj.node.seq/wrap-map","this__4301__auto__","k__4302__auto__","k20617","G__20622","cljs.core/Keyword","tag","wrap-fn","wrap-length","seq-fn","children","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","else__4304__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__20623","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__20625","f__4321__auto__","ret__4323__auto__","k__4324__auto__","v__4325__auto__","init__4322__auto__","this__4320__auto__","cljs.core/pr-sequential-writer","writer__4316__auto__","opts__4317__auto__","keyval__4319__auto__","pr-pair__4318__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","cljs.core/RecordIter","G__20616","cljs.core/-iterator","cljs.core/nil-iter","__meta","__hash","cljs.core/count","h__4159__auto__","cljs.core/hash-unordered-coll","coll__4298__auto__","fexpr__20637","this__4297__auto__","other20619","this20618","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core/contains?","k__4311__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","this__4310__auto__","cljs.core/not-empty","cljs.core/keyword-identical?","k__4309__auto__","expr__20645","pred__20644","G__20647","G__20648","G__20650","G__20651","G__20653","G__20654","G__20656","G__20657","G__20659","G__20660","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/seq","cljs.core/MapEntry","cljs.core/vector?","entry__4307__auto__","this__4306__auto__","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","rewrite-clj.node.seq/SeqNode","cljs.core/List","cljs.core/-write","writer__4345__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__20620","cljs.core/record?","G__20661","extmap__4340__auto__","rewrite-clj.node.seq/->SeqNode","rewrite-clj.node.seq/map->SeqNode","G__20642","rewrite-clj.node.protocols/sexprs","rewrite-clj.node.protocols/sum-lengths","G__20643","rewrite-clj.node.protocols/concat-strings","this","children'","rewrite-clj.node.seq/list-node","p1__20677#","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/list","rewrite-clj.node.seq/vector-node","cljs.core/vec","rewrite-clj.node.seq/set-node","cljs.core/set","rewrite-clj.node.seq/map-node","p1__20679#","cljs.core/hash-map"]}