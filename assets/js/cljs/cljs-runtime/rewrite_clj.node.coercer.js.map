{"version":3,"sources":["rewrite_clj/node/coercer.cljs"],"sourcesContent":["(ns rewrite-clj.node.coercer\n  (:require [rewrite-clj.node.comment :refer [CommentNode]]\n            [rewrite-clj.node.forms :refer [FormsNode]]\n            [rewrite-clj.node.keyword :refer [KeywordNode]]\n            [rewrite-clj.node.quote :refer [QuoteNode]]\n            [rewrite-clj.node.stringz :refer [StringNode string-node]]\n            [rewrite-clj.node.uneval :refer [UnevalNode]]\n            [rewrite-clj.node.meta :refer [MetaNode meta-node]]\n            [rewrite-clj.node.fn :refer [FnNode]]\n            [rewrite-clj.node.protocols :refer [NodeCoerceable coerce]]\n            [rewrite-clj.node.reader-macro :refer [ReaderNode ReaderMacroNode DerefNode]]\n            [rewrite-clj.node.seq :refer [SeqNode vector-node list-node set-node map-node]]\n            [rewrite-clj.node.token :refer [TokenNode token-node]]\n            [rewrite-clj.node.whitespace :refer [WhitespaceNode NewlineNode whitespace-node space-separated]]))\n\n;; ## Helpers\n\n(defn node-with-meta\n  [n value]\n  (if (implements? IWithMeta value)\n    (let [mta (meta value)]\n      (if (empty? mta)\n        n\n        (meta-node (coerce mta) n)))\n    n))\n\n\n;; ## Tokens\n\n(extend-protocol NodeCoerceable\n  object\n  (coerce [v]\n    (node-with-meta\n      (token-node v)\n      v)))\n\n;; Number\n(extend-protocol NodeCoerceable\n  number\n  (coerce [n]\n    (node-with-meta\n     (token-node n)\n     n)))\n\n;; Number\n(extend-protocol NodeCoerceable\n  string\n  (coerce [n]\n    (node-with-meta\n     (string-node n)\n     n)))\n\n\n\n;; ## Seqs\n\n(defn seq-node\n  [f sq]\n  (node-with-meta\n    (->> (map coerce sq)\n         (space-separated)\n         (vec)\n         (f))\n    sq))\n\n(extend-protocol NodeCoerceable\n  PersistentVector\n  (coerce [sq]\n    (seq-node vector-node sq))\n  List\n  (coerce [sq]\n    (seq-node list-node sq))\n  PersistentHashSet\n  (coerce [sq]\n    (seq-node set-node sq)))\n\n\n\n\n;; ## Maps\n\n(let [comma (whitespace-node \", \")\n      space (whitespace-node \" \")]\n  (defn- map->children\n    [m]\n    (->> (mapcat\n           (fn [[k v]]\n             [(coerce k) space (coerce v) comma])\n           m)\n         (butlast)\n         (vec))))\n\n\n(extend-protocol NodeCoerceable\n  PersistentHashMap\n  (coerce [m]\n    (node-with-meta\n      (map-node (map->children m))\n      m)))\n\n\n\n\n;(seq-node vector-node [1])\n\n;; ## Vars\n\n;; (extend-protocol NodeCoerceable\n;;   Var\n;;   (coerce [v]\n;;     (-> (str v)\n;;         (subs 2)\n;;         (symbol)\n;;         (token-node)\n;;         (vector)\n;;         (var-node))))\n\n;; ## Existing Nodes\n\n(extend-protocol NodeCoerceable\n  CommentNode     (coerce [v] v)\n  FormsNode       (coerce [v] v)\n  FnNode          (coerce [v] v)\n  ;IntNode         (coerce [v] v)\n  KeywordNode     (coerce [v] v)\n  MetaNode        (coerce [v] v)\n  QuoteNode       (coerce [v] v)\n  ReaderNode      (coerce [v] v)\n  ReaderMacroNode (coerce [v] v)\n  DerefNode       (coerce [v] v)\n  StringNode      (coerce [v] v)\n  ;UnevalNode      (coerce [v] v)\n  NewlineNode     (coerce [v] v)\n  SeqNode         (coerce [v] v)\n  TokenNode       (coerce [v] v)\n  WhitespaceNode  (coerce [v] v))\n"],"mappings":"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","names":["rewrite-clj.node.coercer/node-with-meta","cljs.core/PROTOCOL_SENTINEL","value","cljs.core/meta","cljs.core/empty?","mta","n","rewrite_clj.node.meta.meta_node.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.protocols/coerce","goog.object/set","rewrite-clj.node.protocols/NodeCoerceable","G__20868","G__20869","G__20870","rewrite_clj.node.token.token_node.cljs$core$IFn$_invoke$arity$1","v","G__20874","G__20875","G__20876","G__20877","G__20878","G__20879","rewrite-clj.node.stringz/string-node","rewrite-clj.node.coercer/seq-node","cljs.core.map.cljs$core$IFn$_invoke$arity$2","sq","rewrite-clj.node.whitespace/space-separated","cljs.core/vec","G__20881","f","cljs.core/PersistentVector","rewrite-clj.node.seq/vector-node","cljs.core/List","rewrite-clj.node.seq/list-node","cljs.core/PersistentHashSet","rewrite-clj.node.seq/set-node","rewrite-clj.node.whitespace/whitespace-node","rewrite-clj.node.coercer/map->children","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","p__20884","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__20885","k","space","comma","m","cljs.core/butlast","cljs.core/PersistentHashMap","rewrite-clj.node.seq/map-node","rewrite-clj.node.comment/CommentNode","rewrite-clj.node.forms/FormsNode","rewrite-clj.node.fn/FnNode","rewrite-clj.node.keyword/KeywordNode","rewrite-clj.node.meta/MetaNode","rewrite-clj.node.quote/QuoteNode","rewrite-clj.node.reader-macro/ReaderNode","rewrite-clj.node.reader-macro/ReaderMacroNode","rewrite-clj.node.reader-macro/DerefNode","rewrite-clj.node.stringz/StringNode","rewrite-clj.node.whitespace/NewlineNode","rewrite-clj.node.seq/SeqNode","rewrite-clj.node.token/TokenNode","rewrite-clj.node.whitespace/WhitespaceNode"]}