{"version":3,"sources":["day8/re_frame_10x/view/event.cljs"],"sourcesContent":["(ns day8.re-frame-10x.view.event\n  (:require [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.view.components :as components]\n            [day8.re-frame-10x.common-styles :as common]\n            [day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.units :as units]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.core :as reagent]\n            [day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core :as rf]\n            [zprint.core :as zp]\n            [goog.string]\n            [clojure.string :as str]\n            [day8.re-frame-10x.utils.pretty-print-condensed :as pp]\n            [day8.re-frame-10x.utils.utils :as utils])\n  (:require-macros [day8.re-frame-10x.utils.macros :refer [with-cljs-devtools-prefs]]\n                   [day8.re-frame-10x.utils.re-com :refer [handler-fn]]))\n\n(def code-border (str \"1px solid \" common/white-background-border-color))\n\n\n(def event-styles\n  [:#--re-frame-10x--\n   [:.event-panel\n    {:padding \"19px 19px 0px 0px\"}]\n   [:.bold {:font-weight \"bold\"}]\n   [:.event-section]\n   [:.event-section--header\n    {:background-color common/navbar-tint-lighter\n     :color            common/navbar-text-color\n     :height           common/gs-19\n     :padding          [[0 common/gs-12]]\n     :overflow         \"hidden\"}]\n   [:.event-section--data\n    {:background-color \"rgba(100, 255, 100, 0.08)\"\n     :padding-left     (units/px- common/gs-12 common/expansion-button-horizontal-padding)\n     :overflow-x       \"auto\"\n     :overflow-y       \"hidden\"}]\n   ])\n\n\n;; Terminology:\n;; Form: a single Clojure form (may have nested children)\n;; Result: the result of execution of a single form\n;; Fragment: the combination of a form and result\n;; Listing: a block of traced Clojure code, e.g. an event handler function\n\n\n(defn no-event-instructions\n  []\n  [rc/v-box\n   :children [[rc/p {:style {:font-style \"italic\"}} \"Code trace is not available for this event\"]\n              [:br]\n              [rc/hyperlink-href\n               :label  \"Instructions for enabling Event Code Tracing\"\n               :attr   {:rel \"noopener noreferrer\"}\n               :target \"_blank\"\n               :href   \"https://github.com/Day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/EventCodeTracing.md\"]]])\n\n\n(defn code-header\n  [code-execution-id line]\n  (let [open?-path       [@(rf/subscribe [:epochs/current-epoch-id]) code-execution-id (:id line)]\n        max-column-width @(rf/subscribe [:code/max-column-width])\n        trace-id         code-execution-id\n        open?            (get-in @(rf/subscribe [:code/code-open?]) open?-path)\n        line-str         (pp/pr-str-truncated max-column-width (:form line))\n        =>str            \"=> \"\n        result-length    (- max-column-width (count =>str) (count line-str))]\n    [rc/h-box\n     :class    \"code-fragment__content\"\n     :size     \"1\"\n     :align    :center\n     :style    {:border   code-border\n                :overflow \"hidden\"\n                :padding  \"0px 6px\"}\n     :children [[rc/box\n                 :width  \"17px\"\n                 :height \"17px\"\n                 :class  \"noselect\"\n                 :style  {:cursor \"pointer\"\n                          :color  \"#b0b2b4\"}\n                 :attr   {:on-click (handler-fn (rf/dispatch [:code/set-code-visibility open?-path (not open?)]))}\n                 :child  [rc/box\n                          :margin \"auto\"\n                          :child  [:span.arrow (if open? \"\u25bc\" \"\u25b6\")]]]\n                [rc/h-box\n                 :size     \"1\"\n                 :style    {:overflow \"hidden\"}\n                 :children [[rc/box\n                             :style {:margin-left      \"2px\"\n                                     :white-space      \"nowrap\"}\n                             :child [:code line-str]]\n                            [rc/box\n                             :class \"code-fragment__result\"\n                             :style {:flex             \"1\"\n                                     :margin-left      \"8px\"\n                                     :white-space      \"nowrap\"}\n                             :child [:code =>str (when (pos? result-length)\n                                                   (pp/pr-str-truncated result-length (:result line)))]]]]\n                [rc/box\n                 :class \"code-fragment__button\"\n                 :attr {:title    \"Copy to the clipboard, an expression that will return this form's value in the cljs repl\"\n                        :on-click (handler-fn (do (utils/copy-to-clipboard (pr-str (list 'day8.re-frame-10x/traced-result trace-id (:id line))))\n                                                  (rf/dispatch [:code/repl-msg-state :start])))}\n                 :child \"repl\"]]]))\n\n\n(defn code-block\n  [code-execution-id line]\n  [rc/box\n   :size  \"1\"\n   :style {:background-color \"rgba(100, 255, 100, 0.08)\"\n           :border           code-border\n           :margin-top       \"-1px\"\n           :overflow-x       \"auto\"\n           :overflow-y       \"hidden\"\n           :padding          \"0px 3px\"}\n   :child [components/simple-render (:result line) [@(rf/subscribe [:epochs/current-epoch-id]) code-execution-id (:id line)]]])\n\n(defn find-bounds\n  \"Try and find the bounds of the form we are searching for. Uses some heuristics to\n  try and avoid matching partial forms, e.g. 'default-|weeks| for the form 'weeks.\"\n  [form-str search-str]\n  (let [re         (re-pattern (str \"(\\\\s|\\\\(|\\\\[|\\\\{)\" \"(\" (goog.string.regExpEscape search-str) \")\"))\n        result     (.exec re form-str)]\n    (if (some? result)\n      (let [index        (.-index result)\n            pre-match    (aget result 1)\n            matched-form (aget result 2)\n            index        (+ index (count pre-match))]\n        [index (+ index (count matched-form))])\n      ;; If the regex fails, fall back to string index just in case.\n      (let [start  (str/index-of form-str search-str)\n            length (if (and (some? search-str) (some? start))\n                     (count (pr-str search-str))\n                     0)]\n        [start (+ start length)]))))\n\n(defn event-expression\n  []\n  (let [scroll-pos (atom {:top 0 :left 0})]\n    (reagent/create-class\n      {:component-will-update\n       (fn event-expression-component-will-update [this]\n         (let [node (reagent/dom-node this)]\n           (reset! scroll-pos {:top (.-scrollTop node) :left (.-scrollLeft node)})))\n\n       :component-did-update\n       (fn event-expression-component-did-update [this]\n         (let [node (reagent/dom-node this)]\n           (set! (.-scrollTop node) (:top @scroll-pos))\n           (set! (.-scrollLeft node) (:left @scroll-pos))))\n\n       :display-name\n       \"event-expression\"\n\n       :reagent-render\n       (fn\n         []\n         (let [highlighted-form @(rf/subscribe [:code/highlighted-form])\n               form-str         @(rf/subscribe [:code/current-zprint-form])\n               show-all-code?   @(rf/subscribe [:code/show-all-code?])\n               [start-index end-index] (find-bounds form-str (zp/zprint-str highlighted-form))\n               before           (subs form-str 0 start-index)\n               highlight        (subs form-str start-index end-index)\n               after            (subs form-str end-index)]\n           ; DC: We get lots of React errors if we don't force a creation of a new element when the highlight changes. Not really sure why...\n           ;; Possibly relevant? https://stackoverflow.com/questions/21926083/failed-to-execute-removechild-on-node\n           ^{:key (pr-str highlighted-form)}\n           [rc/box\n            :style {:max-height       (when-not show-all-code? (str (* 10 17) \"px\")) ;; Add scrollbar after 10 lines\n                    :overflow         \"auto\"\n                    :border           code-border\n                    :background-color common/white-background-color}\n            :attr {:on-double-click (handler-fn (rf/dispatch [:code/set-show-all-code? (not show-all-code?)]))}\n            :child (if (some? highlighted-form)\n                     [components/highlight {:language \"clojure\"}\n                      (list ^{:key \"before\"} before\n                            ^{:key \"hl\"} [:span.code-listing--highlighted highlight]\n                            ^{:key \"after\"} after)]\n                     [components/highlight {:language \"clojure\"}\n                      form-str])]))})))\n\n\n(defn repl-msg-area\n  []\n  (let [repl-msg-state @(rf/subscribe [:code/repl-msg-state])]\n    (when (get #{:running :re-running} repl-msg-state)\n      ^{:key (gensym)}\n      [:div\n       {:style            {:opacity            \"0\"\n                           :color              \"white\"\n                           :background-color   \"green\"\n                           :padding            \"0px 4px\"\n                           :white-space        \"nowrap\"\n                           :overflow           \"hidden\"\n                           :animation-duration \"5000ms\"\n                           :margin-right       \"5px\"\n                           :animation-name     \"fade-clipboard-msg-re-frame-10x\"}\n        :on-animation-end #(rf/dispatch [:code/repl-msg-state :end])}\n       \"Clipboard now contains text for pasting into the REPL\"])))\n\n\n(defn repl-section\n  []\n  [rc/h-box\n   :height   \"23px\"\n   :align    :end\n   :style    {:margin-bottom \"2px\"}\n   :children [[repl-msg-area]\n              [rc/box\n               :size \"1\"\n               :child \"\"]\n              [rc/hyperlink\n               :label \"repl requires\"\n               :style {:margin-right common/gs-7s}\n               :attr  {:title \"Copy to the clipboard, the require form to set things up for the \\\"repl\\\" links below\"}\n               ;; Doing this in a list would be nicer, but doesn't let us use ' as it will be expanded before we can create the string.\n               :on-click #(do (utils/copy-to-clipboard \"(require '[day8.re-frame-10x])\")\n                              (rf/dispatch [:code/repl-msg-state :start]))]\n              [rc/hyperlink-info \"https://github.com/Day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/UsingTheRepl.md\"]]])\n\n\n(defn indent-block\n  [indent-level first?]\n  [rc/h-box\n   :children (doall\n               (for [num (range indent-level)]\n                 [rc/box\n                  :width \"12px\"\n                  :style {:background-color common/standard-background-color\n                          :border-top       (when first? code-border)\n                          :border-left      code-border}\n                  :child \"\"]))])\n\n\n(defn event-fragments\n  [fragments code-exec-id]\n  (let [code-open? @(rf/subscribe [:code/code-open?])\n        max-frags  50]\n    [rc/v-box\n     :size     \"1\"\n     :style    {:overflow-y \"auto\"}\n     :children [(doall\n                  (for [frag (take max-frags fragments)]\n                    (let [id     (:id frag)\n                          first? (zero? id)]\n                      ^{:key id}\n                      [rc/v-box\n                       :class    \"code-fragment\"\n                       :style    {:margin-top (when-not first? \"-1px\")}\n                       :attr     {:on-mouse-enter (handler-fn (rf/dispatch [:code/hover-form (:form frag)]))\n                                  :on-mouse-leave (handler-fn (rf/dispatch [:code/exit-hover-form (:form frag)]))}\n                       :children [[rc/h-box\n                                   :children [[indent-block (:indent-level frag) first?]\n                                              [code-header code-exec-id frag]]]\n                                  (when (get-in code-open? [@(rf/subscribe [:epochs/current-epoch-id]) code-exec-id id])\n                                    [rc/h-box\n                                     :children [[indent-block (:indent-level frag) false]\n                                                [code-block code-exec-id frag id]]])]])))\n                (when (> (count fragments) max-frags)\n                  [rc/label\n                   :style {:margin-top common/gs-5s\n                           :font-style \"italic\"}\n                   :label (str \"(only showing first \" max-frags \" of \" (count fragments) \" traces)\")])]]))\n\n\n(defn event-code\n  []\n  (let [code-traces      @(rf/subscribe [:code/current-code])\n        code-execution   (first code-traces) ;; Ignore multiple code executions for now\n        #_#_debug?           @(rf/subscribe [:settings/debug?])\n        #_#_highlighted-form (rf/subscribe [:code/highlighted-form])]\n    (if-not code-execution\n      [no-event-instructions]\n      [rc/v-box\n       :size \"1 1 auto\"\n       :class \"code-panel\"\n       :children [#_(when debug? [:pre \"Hover \" (subs (pr-str @highlighted-form) 0 50) \"\\n\"])\n                  [event-expression]\n                  [repl-section]\n                  [event-fragments (->> (:code code-execution)\n                                        (remove (fn [line] (fn? (:result line)))))\n                   (:trace-id code-execution)]]])))\n\n\n(defn render []\n  (let [epoch-id @(rf/subscribe [:epochs/current-epoch-id])]\n    ;; Create a new id on each panel because Reagent can throw an exception if\n    ;; the data provided in successive renders is sufficiently different.\n    ^{:key epoch-id}\n    [rc/v-box\n     :size     \"1\"\n     :class    \"event-panel\"\n     :gap      common/gs-19s\n     :children [[event-code]\n                [rc/gap-f :size \"0px\"]]]))\n"],"mappings":"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","names":["day8.re-frame-10x.view.event/code-border","day8.re-frame-10x.common-styles/white-background-border-color","day8.re-frame-10x.view.event/event-styles","day8.re-frame-10x.common-styles/navbar-tint-lighter","day8.re-frame-10x.common-styles/navbar-text-color","day8.re-frame-10x.common-styles/gs-19","day8.re-frame-10x.common-styles/gs-12","day8.re-frame-10x.inlined-deps.garden.v1v3v3.garden.units/px-","day8.re-frame-10x.common-styles/expansion-button-horizontal-padding","day8.re-frame-10x.view.event/no-event-instructions","day8.re-frame-10x.utils.re-com/v-box","day8.re-frame-10x.utils.re-com/p","day8.re-frame-10x.utils.re-com/hyperlink-href","day8.re-frame-10x.view.event/code-header","cljs.core/deref","G__22574","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core/subscribe","code-execution-id","line","G__22575","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__22576","open?-path","day8.re_frame_10x.utils.pretty_print_condensed.pr_str_truncated.cljs$core$IFn$_invoke$arity$variadic","max-column-width","cljs.core/count","=>str","line-str","day8.re-frame-10x.utils.re-com/h-box","day8.re-frame-10x.utils.re-com/box","G__22577","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core/dispatch","cljs.core/not","open?","result-length","day8.re-frame-10x.utils.utils/copy-to-clipboard","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","trace-id","G__22579","day8.re-frame-10x.view.event/code-block","day8.re-frame-10x.view.components/simple-render","G__22580","day8.re-frame-10x.view.event/find-bounds","cljs.core/re-pattern","goog.string/regExpEscape","search-str","re","form-str","result","index","pre-match","matched-form","clojure.string.index_of.cljs$core$IFn$_invoke$arity$2","start","length","day8.re-frame-10x.view.event/event-expression","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.core/create-class","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.core/dom-node","this","cljs.core/reset!","scroll-pos","node","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__22581","G__22584","G__22585","G__22586","zprint.core/zprint-str","highlighted-form","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","start-index","end-index","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","show-all-code?","day8.re-frame-10x.common-styles/white-background-color","G__22588","day8.re-frame-10x.view.components/highlight","before","highlight","after","day8.re-frame-10x.view.event/repl-msg-area","G__22589","cljs.core.get.cljs$core$IFn$_invoke$arity$2","repl-msg-state","cljs.core.gensym.cljs$core$IFn$_invoke$arity$0","G__22590","day8.re-frame-10x.view.event/repl-section","day8.re-frame-10x.utils.re-com/hyperlink","day8.re-frame-10x.common-styles/gs-7s","G__22593","day8.re-frame-10x.utils.re-com/hyperlink-info","day8.re-frame-10x.view.event/indent-block","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core/LazySeq","s__22596","cljs.core/seq","temp__5457__auto__","cljs.core/chunked-seq?","c__4432__auto__","cljs.core/chunk-buffer","size__4433__auto__","i__22597","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","b__22598","cljs.core/chunk-cons","cljs.core/chunk","iter__22595","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","iter__4434__auto__","cljs.core.range.cljs$core$IFn$_invoke$arity$1","indent-level","day8.re-frame-10x.common-styles/standard-background-color","first?","day8.re-frame-10x.view.event/event-fragments","G__22599","s__22601","i__22602","b__22603","iter__22600","cljs.core.take.cljs$core$IFn$_invoke$arity$2","max-frags","fragments","frag","id","G__22607","G__22613","G__22608","G__22614","code-exec-id","code-open?","G__22611","G__22617","day8.re-frame-10x.utils.re-com/label","day8.re-frame-10x.common-styles/gs-5s","day8.re-frame-10x.view.event/event-code","G__22619","code-traces","code-execution","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/fn?","day8.re-frame-10x.view.event/render","G__22623","epoch-id","day8.re-frame-10x.common-styles/gs-19s","day8.re-frame-10x.utils.re-com/gap-f","cljs.core/chunk-first"]}