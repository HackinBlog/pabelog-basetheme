{"version":3,"sources":["day8/re_frame_10x/inlined_deps/reagent/v0v8v0/reagent/dom.cljs"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom\n  (:require [react-dom :as react-dom]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.util :as util]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template :as tmpl]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.batching :as batch]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.ratom :as ratom]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.debug :refer-macros [dbg]]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.interop :refer-macros [$ $!]]))\n\n(defonce ^:private imported nil)\n\n(defonce ^:private roots (atom {}))\n\n(defn- unmount-comp [container]\n  (swap! roots dissoc container)\n  (react-dom/unmountComponentAtNode container))\n\n(defn- render-comp [comp container callback]\n  (binding [util/*always-update* true]\n    (react-dom/render (comp) container\n      (fn []\n        (binding [util/*always-update* false]\n          (swap! roots assoc container [comp container])\n          (batch/flush-after-render)\n          (if (some? callback)\n            (callback)))))))\n\n(defn- re-render-component [comp container]\n  (render-comp comp container nil))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (render comp container nil))\n  ([comp container callback]\n   (ratom/flush!)\n   (let [f (fn []\n             (tmpl/as-element (if (fn? comp) (comp) comp)))]\n     (render-comp f container callback))))\n\n(defn unmount-component-at-node [container]\n  (unmount-comp container))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  [this]\n  (react-dom/findDOMNode this))\n\n(set! tmpl/find-dom-node dom-node)\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  []\n  (ratom/flush!)\n  (doseq [v (vals @roots)]\n    (apply re-render-component v))\n  \"Updated\")\n"],"mappings":";;;;;;;;;AASA,AAAA,AAAAA,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAmBC;;AAEnB,AAAA,AAAAR,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAG;AAAA;AAAA,AAAA,AAAmBC,AAAM,AAAA,AAACC;;AAE1B,AAAA,AAAOC,AAAc;AAArB,AACE,AAACC,AAAMH,AAAMI,AAAOC;;AACpB,AAACC,AAAiCD;;AAEpC,AAAA,AAAOE,AAAa,AAAK,AAAU;AAAnC,AACE,AAAA,AAAUG;AAAV,AAAA;AAAA,AAAA,AAAAF,AAAUE;;AAAV,AAAA,AACE,AAAA,AAAkB,AAACK,AAAAA,AAAAA;AAAnB,AAAyBV;AAAzB,AACE;;AAAA,AACE,AAAA,AAAUK;AAAV,AAAA;AAAA,AAAA,AAAAM,AAAUN;;AAAV,AAAA,AACE,AAAA,AAACQ,AAAMlB,AAAMmB,AAAMd,AAAWU,AAAKV;;AACnC,AAACe;;AACD,AAAI,AAAA,AAAA,AAAOC;AACT,AAACA,AAAAA,AAAAA;;AADH;;AAHF,AAAA,AAAAJ,AAAUP;;;AAFd,AAAA,AAAAC,AAAAC,AAAAC,AAACC;AADH,AAAA,AAAAL,AAAUC;;AASZ,AAAA,AAAOY,AAAqB,AAAK;AAAjC,AACE,AAAA,AAACf,AAAYQ,AAAKV;;AAEpB,AAAA;;;;;;;;AAAA,AAAA,AAAMmB;AAAN,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAOF,AAAK;AAPT,AAQG,AAAA,AAACE,AAAOX,AAAKV;;;AARhB,AAAA,AAAA,AAAMmB,AASF,AAAK,AAAU;AATnB,AAUG,AAACG;;AACD,AAAM,AAAE;AAAA,AACE,AAACC,AAAgB,AAAI,AAACC,AAAId,AAAM,AAACA,AAAAA,AAAAA,AAAMA;;AADjD,AAEE,AAACR,AAAYuB,AAAEzB,AAAUgB;;;AAb9B,AAAA,AAAA,AAAMG;;AAAN,AAeA,AAAA,AAAMO,AAA2B;AAAjC,AACE,AAAC7B,AAAaG;;AAEhB;;;AAAA,AAAM2B,AAEH;AAFH,AAGE,AAACC,AAAsBC;;AAEzB,AAAMC,AAAmBH;AAEzB;;;;;;;;;;;AAAA,AAAMI;AAAN,AAWE,AAACT;;AACD,AAAA,AAAA,AAAAU,AAAU,AAAA,AAAAa,AAACC,AAAMnD;AAAjB,AAAA;AAAA,AAAA;AAAA,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAsC,AAAAC;AAAA,AAAA,AAAAC,AAAAF,AAAQ;AAAR,AAAA,AACE,AAACc,AAAM9B,AAAoB+B;;AAD7B;AAAA,AAAAZ;AAAAD;AAAAD;AAAA,AAAAD,AAAA;;;;;;;AAAA,AAAA,AAAA,AAAAD,AAAAI;AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAA,AAAAI,AAAAJ;AAAAK;AAAA,AAAAC,AAAAD;AAAA;;;;;;;AAAA,AAAA,AAAAE,AAAAP,AAAQ;AAAR,AAAA,AACE,AAACW,AAAM9B,AAAoB+B;;AAD7B;AAAA,AAAA,AAAAJ,AAAAR;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAZF","names":["js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom.imported","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom/imported","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom.roots","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom/roots","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom/unmount-comp","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","container","js/module$node_modules$react_dom$index.unmountComponentAtNode","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom/render-comp","*always-update*-temp-val__18575","*always-update*-orig-val__18574","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.util/*always-update*","G__18579","G__18580","G__18581","js/module$node_modules$react_dom$index.render","comp","*always-update*-temp-val__18583","*always-update*-orig-val__18582","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.batching/flush-after-render","callback","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom/re-render-component","G__18592","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom/render","js/Error","day8.re_frame_10x.inlined_deps.reagent.v0v8v0.reagent.dom.render.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.ratom/flush!","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/as-element","cljs.core/fn?","f","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom/unmount-component-at-node","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom/dom-node","js/module$node_modules$react_dom$index.findDOMNode","this","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.impl.template/find-dom-node","day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.dom/force-update-all","cljs.core/seq","i__18599","count__18598","chunk__18597","seq__18596","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/deref","cljs.core/vals","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","v"]}