{"version":3,"sources":["rewrite_clj/node/whitespace.cljs"],"sourcesContent":["(ns rewrite-clj.node.whitespace\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Newline Modifiers\n\n(def ^:dynamic *newline-fn*\n  \"This function is applied to every newline string.\"\n  identity)\n\n(def ^:dynamic *count-fn*\n  \"This function is applied to every newline string and should produce\n   the eventual character count.\"\n  count)\n\n\n;; TODO\n;; (defmacro with-newline-fn\n;;   [f & body]\n;;   `(binding [*newline-fn* (comp *newline-fn* ~f)]\n;;      ~@body))\n\n;; (defmacro with-count-fn\n;;   [f & body]\n;;   `(binding [*count-fn* (comp *count-fn* ~f)]\n;;      ~@body))\n\n;; ## Nodes\n\n(defrecord WhitespaceNode [whitespace]\n  node/Node\n  (tag [_] :whitespace)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (count whitespace))\n  (string [_] whitespace)\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(defrecord NewlineNode [newlines]\n  node/Node\n  (tag [_] :newline)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (*count-fn* newlines))\n  (string [_] (*newline-fn* newlines))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n\n;; TODO\n;; (node/make-printable! WhitespaceNode)\n;; (node/make-printable! NewlineNode)\n\n;; ## Constructors\n\n(defn whitespace-node\n  \"Create whitespace node.\"\n  [s]\n  (->WhitespaceNode s))\n\n(defn newline-node\n  \"Create newline node.\"\n  [s]\n  (->NewlineNode s))\n\n(defn- newline?\n  \"Check whether a character represents a linebreak.\"\n  [c]\n  (contains? #{\\return \\newline} c))\n\n(defn whitespace-nodes\n  \"Convert a string of whitespace to whitespace/newline nodes.\"\n  [s]\n  (->> (partition-by newline? s)\n       (map\n         (fn [char-seq]\n           (let [s (apply str char-seq)]\n             (if (newline? (first char-seq))\n               (newline-node s)\n               (whitespace-node s)))))))\n\n;; ## Utilities\n\n(defn spaces\n  \"Create node representing the given number of spaces.\"\n  [n]\n  (whitespace-node (apply str (repeat n \\space))))\n\n(defn newlines\n  \"Create node representing the given number of newline characters.\"\n  [n]\n  (newline-node (apply str (repeat n \\newline))))\n\n\n\n(let [comma (whitespace-node \", \")]\n  (defn comma-separated\n    \"Interleave the given seq of nodes with `\\\", \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat comma)))))\n\n(let [nl (newline-node \"\\n\")]\n  (defn line-separated\n    \"Interleave the given seq of nodes with newline nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat nl)))))\n\n(let [space (whitespace-node \" \")]\n  (defn space-separated\n    \"Interleave the given seq of nodes with `\\\" \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat space)))))\n\n;; ## Predicates\n\n(defn whitespace?\n  \"Check whether a node represents whitespace.\"\n  [node]\n  (contains?\n    #{:whitespace\n      :newline}\n    (node/tag node)))\n\n(defn linebreak?\n  \"Check whether a ndoe represents linebreaks.\"\n  [node]\n  (= (node/tag node) :newline))\n"],"mappings":"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","names":["rewrite-clj.node.whitespace/*newline-fn*","cljs.core/identity","rewrite-clj.node.whitespace/*count-fn*","cljs.core/count","this__4301__auto__","k__4302__auto__","k20232","G__20249","cljs.core/Keyword","whitespace","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","else__4304__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__20254","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__20258","f__4321__auto__","ret__4323__auto__","k__4324__auto__","v__4325__auto__","init__4322__auto__","this__4320__auto__","cljs.core/pr-sequential-writer","writer__4316__auto__","opts__4317__auto__","keyval__4319__auto__","pr-pair__4318__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","cljs.core/RecordIter","G__20231","cljs.core/-iterator","cljs.core/nil-iter","__meta","__hash","h__4159__auto__","cljs.core/hash-unordered-coll","coll__4298__auto__","fexpr__20278","this__4297__auto__","other20234","this20233","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core/contains?","k__4311__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","this__4310__auto__","cljs.core/not-empty","cljs.core/keyword-identical?","k__4309__auto__","expr__20282","pred__20281","G__20284","G__20285","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/seq","cljs.core/MapEntry","cljs.core/vector?","entry__4307__auto__","this__4306__auto__","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","rewrite-clj.node.whitespace/WhitespaceNode","cljs.core/List","cljs.core/-write","writer__4345__auto__","G__20239","cljs.core/record?","G__20286","extmap__4340__auto__","rewrite-clj.node.whitespace/->WhitespaceNode","rewrite-clj.node.whitespace/map->WhitespaceNode","js/Error","this","k20288","G__20296","newlines","p__20308","vec__20309","G__20287","fexpr__20314","other20290","this20289","expr__20316","pred__20315","G__20318","G__20319","rewrite-clj.node.whitespace/NewlineNode","G__20291","G__20323","rewrite-clj.node.whitespace/->NewlineNode","rewrite-clj.node.whitespace/map->NewlineNode","rewrite-clj.node.whitespace/whitespace-node","s","rewrite-clj.node.whitespace/newline-node","rewrite-clj.node.whitespace/newline?","c","rewrite-clj.node.whitespace/whitespace-nodes","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","char-seq","cljs.core/first","rewrite-clj.node.whitespace/spaces","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","n","rewrite-clj.node.whitespace/newlines","rewrite-clj.node.whitespace/comma-separated","cljs.core/butlast","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","nodes","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","comma","rewrite-clj.node.whitespace/line-separated","nl","rewrite-clj.node.whitespace/space-separated","space","rewrite-clj.node.whitespace/whitespace?","rewrite-clj.node.protocols/tag","node","rewrite-clj.node.whitespace/linebreak?"]}