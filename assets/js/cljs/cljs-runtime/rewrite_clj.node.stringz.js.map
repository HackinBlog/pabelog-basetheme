{"version":3,"sources":["rewrite_clj/node/stringz.cljs"],"sourcesContent":["(ns rewrite-clj.node.stringz\n  (:require [rewrite-clj.node.protocols :as node]\n            [cljs.tools.reader :as r]\n            [clojure.string :as s]))\n\n;; ## Node\n\n(defn- wrap-string\n  [v]\n  (str \"\\\"\" v \"\\\"\"))\n\n(defn- join-lines\n  [lines]\n  (s/join \"\\n\" lines))\n\n(defrecord StringNode [lines]\n  node/Node\n  (tag [_]\n    (if (next lines)\n      :multi-line\n      :token))\n  (printable-only? [_]\n    false)\n  (sexpr [_]\n    (join-lines\n      (map\n        (comp r/read-string wrap-string)\n        lines)))\n  (length [_]\n    (+ 2 (reduce + (map count lines))))\n  (string [_]\n    (wrap-string (join-lines lines)))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;(node/make-printable! StringNode)\n\n;; ## Constructors\n\n(defn string-node\n  \"Create node representing a string value.\n   Takes either a seq of strings or a single one.\"\n  [lines]\n  (if (string? lines)\n    (->StringNode [lines])\n    (->StringNode lines)))\n"],"mappings":"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","names":["rewrite-clj.node.stringz/wrap-string","v","rewrite-clj.node.stringz/join-lines","clojure.string.join.cljs$core$IFn$_invoke$arity$2","lines","this__4301__auto__","k__4302__auto__","k20046","G__20061","cljs.core/Keyword","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","else__4304__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__20076","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__20085","f__4321__auto__","ret__4323__auto__","k__4324__auto__","v__4325__auto__","init__4322__auto__","this__4320__auto__","cljs.core/pr-sequential-writer","writer__4316__auto__","opts__4317__auto__","keyval__4319__auto__","pr-pair__4318__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","cljs.core/RecordIter","G__20045","cljs.core/-iterator","cljs.core/nil-iter","__meta","__hash","cljs.core/count","h__4159__auto__","cljs.core/hash-unordered-coll","coll__4298__auto__","fexpr__20102","this__4297__auto__","other20048","this20047","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core/contains?","k__4311__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","this__4310__auto__","cljs.core/not-empty","cljs.core/keyword-identical?","k__4309__auto__","expr__20116","pred__20115","G__20118","G__20119","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/seq","cljs.core/MapEntry","cljs.core/vector?","entry__4307__auto__","this__4306__auto__","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","rewrite-clj.node.stringz/StringNode","cljs.core/List","cljs.core/-write","writer__4345__auto__","G__20054","cljs.core/record?","G__20120","extmap__4340__auto__","rewrite-clj.node.stringz/->StringNode","rewrite-clj.node.stringz/map->StringNode","cljs.core/next","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader/read-string","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","this","rewrite-clj.node.stringz/string-node"]}